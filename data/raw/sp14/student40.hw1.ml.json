{"ocaml":[{"in":"let rec sumList xs = \nmatch xs with \n| [] -> 0\n| x :: tail -> x + sumList tail","min":"\nlet rec sumList xs = match xs with | [] -> 0 | x::tail -> x + (sumList tail);;\n","type":"","out":""},{"in":"let _ = sumList [1; 2; 3; 4]","min":"\nlet rec sumList xs = match xs with | [] -> 0 | x::tail -> x + (sumList tail);;\n\nlet _ = sumList [1; 2; 3; 4];;\n","type":"","out":""},{"in":"let _ = sumList [1; -2; 3; 5]","min":"\nlet rec sumList xs = match xs with | [] -> 0 | x::tail -> x + (sumList tail);;\n\nlet _ = sumList [1; (-2); 3; 5];;\n","type":"","out":""},{"in":"let _ = sumList [1; 3; 5; 7; 9; 11]","min":"\nlet rec sumList xs = match xs with | [] -> 0 | x::tail -> x + (sumList tail);;\n\nlet _ = sumList [1; 3; 5; 7; 9; 11];;\n","type":"","out":""},{"in":"let rec append l e =\nmatch l with \n|[] -> [e]\n| h :: t -> h :: (append t e)","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n","type":"","out":""},{"in":"let rec listReverse l =\nmatch l with\n|[] -> []\n|[x] -> [x]\n| x::t -> append(listReverse t) x","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec listReverse l =\n  match l with | [] -> [] | x::[] -> [x] | x::t -> append (listReverse t) x;;\n","type":"","out":""},{"in":"let _ = listReverse [1; 2; 3; 4]","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec listReverse l =\n  match l with | [] -> [] | x::[] -> [x] | x::t -> append (listReverse t) x;;\n\nlet _ = listReverse [1; 2; 3; 4];;\n","type":"","out":""},{"in":"let _ = listReverse [\"a\"; \"b\"; \"c\"; \"d\"]","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec listReverse l =\n  match l with | [] -> [] | x::[] -> [x] | x::t -> append (listReverse t) x;;\n\nlet _ = listReverse [\"a\"; \"b\"; \"c\"; \"d\"];;\n","type":"","out":""},{"in":"let rec digitsOfInt n = \nif n <= 0 then [] \nelse\nif n < 10 then n::[] else append(digitsOfInt(n / 10)) (n mod 10)","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec digitsOfInt n =\n  if n <= 0\n  then []\n  else if n < 10 then [n] else append (digitsOfInt (n / 10)) (n mod 10);;\n","type":"","out":""},{"in":"let _ = digitsOfInt 3124","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec digitsOfInt n =\n  if n <= 0\n  then []\n  else if n < 10 then [n] else append (digitsOfInt (n / 10)) (n mod 10);;\n\nlet _ = digitsOfInt 3124;;\n","type":"","out":""},{"in":"let _ = digitsOfInt 352663","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec digitsOfInt n =\n  if n <= 0\n  then []\n  else if n < 10 then [n] else append (digitsOfInt (n / 10)) (n mod 10);;\n\nlet _ = digitsOfInt 352663;;\n","type":"","out":""},{"in":"let digits n = digitsOfInt (abs n)","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec digitsOfInt n =\n  if n <= 0\n  then []\n  else if n < 10 then [n] else append (digitsOfInt (n / 10)) (n mod 10);;\n\nlet digits n = digitsOfInt (abs n);;\n","type":"","out":""},{"in":"let _ = digits (31243)","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec digitsOfInt n =\n  if n <= 0\n  then []\n  else if n < 10 then [n] else append (digitsOfInt (n / 10)) (n mod 10);;\n\nlet digits n = digitsOfInt (abs n);;\n\nlet _ = digits 31243;;\n","type":"","out":""},{"in":"let _ = digits (-23422)","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec digitsOfInt n =\n  if n <= 0\n  then []\n  else if n < 10 then [n] else append (digitsOfInt (n / 10)) (n mod 10);;\n\nlet digits n = digitsOfInt (abs n);;\n\nlet _ = digits (-23422);;\n","type":"","out":""},{"in":"let rec add n = \nif n < 0 then failwith \"n cannot be negative\" else\nif n < 10 then n \nelse add(n/10) + (n mod 10)","min":"\nlet rec add n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else if n < 10 then n else (add (n / 10)) + (n mod 10);;\n","type":"","out":""},{"in":"let rec additivePersistence n = \nif n < 0 then failwith \"n cannot be negative\" else\nif n < 10 then 0\nelse let m = add n in\nif m < 10 then 1 else 1 + (additivePersistence m)","min":"\nlet rec add n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else if n < 10 then n else (add (n / 10)) + (n mod 10);;\n\nlet rec additivePersistence n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else\n    if n < 10\n    then 0\n    else (let m = add n in if m < 10 then 1 else 1 + (additivePersistence m));;\n","type":"","out":""},{"in":"let _ = additivePersistence 9876","min":"\nlet rec add n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else if n < 10 then n else (add (n / 10)) + (n mod 10);;\n\nlet rec additivePersistence n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else\n    if n < 10\n    then 0\n    else (let m = add n in if m < 10 then 1 else 1 + (additivePersistence m));;\n\nlet _ = additivePersistence 9876;;\n","type":"","out":""},{"in":"let rec digitalRoot n = \nif n < 0 then failwith \"n cannot be negative\" else\nif n < 10 then n\nelse\nlet m = add n in\nif m < 10 then m else (digitalRoot m)","min":"\nlet rec add n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else if n < 10 then n else (add (n / 10)) + (n mod 10);;\n\nlet rec digitalRoot n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else\n    if n < 10\n    then n\n    else (let m = add n in if m < 10 then m else digitalRoot m);;\n","type":"","out":""},{"in":"let _ = digitalRoot 9876","min":"\nlet rec add n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else if n < 10 then n else (add (n / 10)) + (n mod 10);;\n\nlet rec digitalRoot n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else\n    if n < 10\n    then n\n    else (let m = add n in if m < 10 then m else digitalRoot m);;\n\nlet _ = digitalRoot 9876;;\n","type":"","out":""},{"in":"let explode s = \nlet rec go i = \nif i >= String.length s \nthen [] \nelse (s.[i]) :: (go (i+1)) \nin\ngo 0","min":"\nlet explode s =\n  let rec go i =\n    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in\n  go 0;;\n","type":"","out":""},{"in":"let rec compareList l1 l2 = \nmatch(l1, l2) with \n| [],[] -> true\n| h1::t1, h2::t2 -> \nif h1=h2 then (compareList t1 t2)\nelse false\n|l1,l2 -> false","min":"\nlet rec compareList l1 l2 =\n  match (l1, l2) with\n  | ([],[]) -> true\n  | (h1::t1,h2::t2) -> if h1 = h2 then compareList t1 t2 else false\n  | (l1,l2) -> false;;\n","type":"","out":""},{"in":"let palindrome w = \nmatch w with\n| _ ->\nlet reverse = listReverse (explode w) in\nlet forward = explode w in\ncompareList forward reverse","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec compareList l1 l2 =\n  match (l1, l2) with\n  | ([],[]) -> true\n  | (h1::t1,h2::t2) -> if h1 = h2 then compareList t1 t2 else false\n  | (l1,l2) -> false;;\n\nlet explode s =\n  let rec go i =\n    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in\n  go 0;;\n\nlet rec listReverse l =\n  match l with | [] -> [] | x::[] -> [x] | x::t -> append (listReverse t) x;;\n\nlet palindrome w =\n  match w with\n  | _ ->\n      let reverse = listReverse (explode w) in\n      let forward = explode w in compareList forward reverse;;\n","type":"","out":""},{"in":"let _ = palindrome \"malayalam\"","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec compareList l1 l2 =\n  match (l1, l2) with\n  | ([],[]) -> true\n  | (h1::t1,h2::t2) -> if h1 = h2 then compareList t1 t2 else false\n  | (l1,l2) -> false;;\n\nlet explode s =\n  let rec go i =\n    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in\n  go 0;;\n\nlet rec listReverse l =\n  match l with | [] -> [] | x::[] -> [x] | x::t -> append (listReverse t) x;;\n\nlet palindrome w =\n  match w with\n  | _ ->\n      let reverse = listReverse (explode w) in\n      let forward = explode w in compareList forward reverse;;\n\nlet _ = palindrome \"malayalam\";;\n","type":"","out":""},{"in":"let _ = palindrome \"myxomatosis\"","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec compareList l1 l2 =\n  match (l1, l2) with\n  | ([],[]) -> true\n  | (h1::t1,h2::t2) -> if h1 = h2 then compareList t1 t2 else false\n  | (l1,l2) -> false;;\n\nlet explode s =\n  let rec go i =\n    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in\n  go 0;;\n\nlet rec listReverse l =\n  match l with | [] -> [] | x::[] -> [x] | x::t -> append (listReverse t) x;;\n\nlet palindrome w =\n  match w with\n  | _ ->\n      let reverse = listReverse (explode w) in\n      let forward = explode w in compareList forward reverse;;\n\nlet _ = palindrome \"myxomatosis\";;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key        = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130  = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let scoreMsg () = \nPrintf.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Printf.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":0,"stop":5755},"type":"eval"},"cursor":80,"time":1.397376752539908e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXX\nXXXXXXXXXXXXX\nXXXXXXXXXXXX\nXXXXXXXXXX\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec sumList xs = \n  match xs with \n    | [] -> 0\n    | x :: tail -> x + sumList tail;;\n\nlet _ = sumList [1; 2; 3; 4]\nlet _ = sumList [1; -2; 3; 5]\nlet _ = sumList [1; 3; 5; 7; 9; 11]\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec append l e =\n  match l with \n    |[] -> [e]\n    | h :: t -> h :: (append t e);;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec listReverse l =\n  match l with\n    |[] -> []\n    |[x] -> [x]\n    | x::t -> append(listReverse t) x;;\n\nlet _ = listReverse [1; 2; 3; 4]\nlet _ = listReverse [\"a\"; \"b\"; \"c\"; \"d\"]\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec digitsOfInt n = \n  if n <= 0 then [] \n  else\n  if n < 10 then n::[] else append(digitsOfInt(n / 10)) (n mod 10);;\n\nlet _ = digitsOfInt 3124\nlet _ = digitsOfInt 352663\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet digits n = digitsOfInt (abs n)\nlet _ = digits (31243)\nlet _ = digits (-23422)\n\n\n\n(*XXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec add n = \n  if n < 0 then failwith \"n cannot be negative\" else\n  if n < 10 then n \n  else add(n/10) + (n mod 10);;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec additivePersistence n = \n  if n < 0 then failwith \"n cannot be negative\" else\n  if n < 10 then 0\n  else let m = add n in\n      if m < 10 then 1 else 1 + (additivePersistence m);;\n\nlet _ = additivePersistence 9876\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec digitalRoot n = \n  if n < 0 then failwith \"n cannot be negative\" else\n  if n < 10 then n\n  else\n    let m = add n in\n      if m < 10 then m else (digitalRoot m);;\n\nlet _ = digitalRoot 9876\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet explode s = \n  let rec go i = \n    if i >= String.length s \n    then [] \n    else (s.[i]) :: (go (i+1)) \n  in\n    go 0\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec compareList l1 l2 = \n  match(l1, l2) with \n    | [],[] -> true\n    | h1::t1, h2::t2 -> \n        if h1=h2 then (compareList t1 t2)\n        else false\n    |l1,l2 -> false;;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet palindrome w = \n  match w with\n    | _ ->\n        let reverse = listReverse (explode w) in\n        let forward = explode w in\n          compareList forward reverse;;\n\nlet _ = palindrome \"malayalam\"\nlet _ = palindrome \"myxomatosis\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key        = \"\"     (*XXXXXXXX*)\nlet prefix130  = \"130\"  (*XXXXXXXX*)\n\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Printf.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet doTest f = \n  try f () with ex -> \n    Printf.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 sumList\n                 [1;2;3;4]\n                 10\n                 \"sample: sumList 1\"\n    );\n    (fun () -> mkTest \n                 sumList \n                 [1;-2;3;5] \n                 7 \n                 \"sample: sumList 2\"\n    ); \n    (fun () -> mkTest \n                 sumList \n                 [1;3;5;7;9;11]\n                 36 \n                 \"sample: sumList 3\"\n    ); \n    (fun () -> mkTest \n                 digitsOfInt \n                 3124 \n                 [3;1;2;4] \n                 \"sample: digitsOfInt 1\"\n    ); \n    (fun () -> mkTest \n                 digitsOfInt \n                 352663 \n                 [3;5;2;6;6;3] \n                 \"sample: digitsOfInt 2\"\n    ); \n    (fun () -> mkTest \n                 digits\n                 31243\n                 [3;1;2;4;3] \n                 \"sample: digits 1\"\n    ); \n    (fun () -> mkTest \n                 digits\n                 (-23422)\n                 [2;3;4;2;2]\n                 \"sample: digits 2\"\n    ); \n    (fun () -> mkTest \n                 additivePersistence \n                 9876 \n                 2 \n                 \"sample: additivePersistence1\"\n    ); \n    (fun () -> mkTest \n                 digitalRoot \n                 9876 \n                 3 \n                 \"sample: digitalRoot\"\n    ); \n    (fun () -> mkTest \n                 listReverse\n                 [1;2;3;4] \n                 [4;3;2;1]\n                 \"sample: reverse 1\"\n    ); \n    (fun () -> mkTest \n                 listReverse \n                 [\"a\";\"b\";\"c\";\"d\"]\n                 [\"d\";\"c\";\"b\";\"a\"] \n                 \"sample: rev 2\"\n    ); \n    (fun () -> mkTest \n                 palindrome \n                 \"malayalam\" \n                 true\n                 \"sample: palindrome 1\"\n    ); \n    (fun () -> mkTest \n                 palindrome \n                 \"myxomatosis\" \n                 false\n                 \"sample: palindrome 2\"\n    )] \n\nlet _ =\n  let report = List.map doTest (sampleTests) in\n  let _ = List.iter print130 (report@([scoreMsg()])) in\n  let _ = print130 (\"Compiled\\n\") in\n    (!score, !max)\n","file":"hw1.ml"}
{"ocaml":[{"in":"let rec sumList xs = \nmatch xs with \n| [] -> 0\n| x :: tail -> x + sumList tail","min":"\nlet rec sumList xs = match xs with | [] -> 0 | x::tail -> x + (sumList tail);;\n","type":"","out":""},{"in":"let _ = sumList [1; 2; 3; 4]","min":"\nlet rec sumList xs = match xs with | [] -> 0 | x::tail -> x + (sumList tail);;\n\nlet _ = sumList [1; 2; 3; 4];;\n","type":"","out":""},{"in":"let _ = sumList [1; -2; 3; 5]","min":"\nlet rec sumList xs = match xs with | [] -> 0 | x::tail -> x + (sumList tail);;\n\nlet _ = sumList [1; (-2); 3; 5];;\n","type":"","out":""},{"in":"let _ = sumList [1; 3; 5; 7; 9; 11]","min":"\nlet rec sumList xs = match xs with | [] -> 0 | x::tail -> x + (sumList tail);;\n\nlet _ = sumList [1; 3; 5; 7; 9; 11];;\n","type":"","out":""},{"in":"let rec append l e =\nmatch l with \n|[] -> [e]\n| h :: t -> h :: (append t e)","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n","type":"","out":""},{"in":"let rec listReverse l =\nmatch l with\n|[] -> []\n|[x] -> [x]\n| x::t -> append(listReverse t) x","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec listReverse l =\n  match l with | [] -> [] | x::[] -> [x] | x::t -> append (listReverse t) x;;\n","type":"","out":""},{"in":"let _ = listReverse [1; 2; 3; 4]","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec listReverse l =\n  match l with | [] -> [] | x::[] -> [x] | x::t -> append (listReverse t) x;;\n\nlet _ = listReverse [1; 2; 3; 4];;\n","type":"","out":""},{"in":"let _ = listReverse [\"a\"; \"b\"; \"c\"; \"d\"]","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec listReverse l =\n  match l with | [] -> [] | x::[] -> [x] | x::t -> append (listReverse t) x;;\n\nlet _ = listReverse [\"a\"; \"b\"; \"c\"; \"d\"];;\n","type":"","out":""},{"in":"let rec digitsOfInt n = \nif n <= 0 then [] \nelse\nif n < 10 then n::[] else append(digitsOfInt(n / 10)) (n mod 10)","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec digitsOfInt n =\n  if n <= 0\n  then []\n  else if n < 10 then [n] else append (digitsOfInt (n / 10)) (n mod 10);;\n","type":"","out":""},{"in":"let _ = digitsOfInt 3124","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec digitsOfInt n =\n  if n <= 0\n  then []\n  else if n < 10 then [n] else append (digitsOfInt (n / 10)) (n mod 10);;\n\nlet _ = digitsOfInt 3124;;\n","type":"","out":""},{"in":"let _ = digitsOfInt 352663","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec digitsOfInt n =\n  if n <= 0\n  then []\n  else if n < 10 then [n] else append (digitsOfInt (n / 10)) (n mod 10);;\n\nlet _ = digitsOfInt 352663;;\n","type":"","out":""},{"in":"let digits n = digitsOfInt (abs n)","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec digitsOfInt n =\n  if n <= 0\n  then []\n  else if n < 10 then [n] else append (digitsOfInt (n / 10)) (n mod 10);;\n\nlet digits n = digitsOfInt (abs n);;\n","type":"","out":""},{"in":"let _ = digits (31243)","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec digitsOfInt n =\n  if n <= 0\n  then []\n  else if n < 10 then [n] else append (digitsOfInt (n / 10)) (n mod 10);;\n\nlet digits n = digitsOfInt (abs n);;\n\nlet _ = digits 31243;;\n","type":"","out":""},{"in":"let _ = digits (-23422)","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec digitsOfInt n =\n  if n <= 0\n  then []\n  else if n < 10 then [n] else append (digitsOfInt (n / 10)) (n mod 10);;\n\nlet digits n = digitsOfInt (abs n);;\n\nlet _ = digits (-23422);;\n","type":"","out":""},{"in":"let rec add n = \nif n < 0 then failwith \"n cannot be negative\" else\nif n < 10 then n \nelse add(n/10) + (n mod 10)","min":"\nlet rec add n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else if n < 10 then n else (add (n / 10)) + (n mod 10);;\n","type":"","out":""},{"in":"let rec additivePersistence n = \nif n < 0 then failwith \"n cannot be negative\" else\nif n < 10 then 0\nelse let m = add n in\nif m < 10 then 1 else 1 + (additivePersistence m)","min":"\nlet rec add n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else if n < 10 then n else (add (n / 10)) + (n mod 10);;\n\nlet rec additivePersistence n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else\n    if n < 10\n    then 0\n    else (let m = add n in if m < 10 then 1 else 1 + (additivePersistence m));;\n","type":"","out":""},{"in":"let _ = additivePersistence 9876","min":"\nlet rec add n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else if n < 10 then n else (add (n / 10)) + (n mod 10);;\n\nlet rec additivePersistence n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else\n    if n < 10\n    then 0\n    else (let m = add n in if m < 10 then 1 else 1 + (additivePersistence m));;\n\nlet _ = additivePersistence 9876;;\n","type":"","out":""},{"in":"let rec digitalRoot n = \nif n < 0 then failwith \"n cannot be negative\" else\nif n < 10 then n\nelse\nlet m = add n in\nif m < 10 then m else (digitalRoot m)","min":"\nlet rec add n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else if n < 10 then n else (add (n / 10)) + (n mod 10);;\n\nlet rec digitalRoot n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else\n    if n < 10\n    then n\n    else (let m = add n in if m < 10 then m else digitalRoot m);;\n","type":"","out":""},{"in":"let _ = digitalRoot 9876","min":"\nlet rec add n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else if n < 10 then n else (add (n / 10)) + (n mod 10);;\n\nlet rec digitalRoot n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else\n    if n < 10\n    then n\n    else (let m = add n in if m < 10 then m else digitalRoot m);;\n\nlet _ = digitalRoot 9876;;\n","type":"","out":""},{"in":"let explode s = \nlet rec go i = \nif i >= String.length s \nthen [] \nelse (s.[i]) :: (go (i+1)) \nin\ngo 0","min":"\nlet explode s =\n  let rec go i =\n    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in\n  go 0;;\n","type":"","out":""},{"in":"let rec compareList l1 l2 = \nmatch(l1, l2) with \n| [],[] -> true\n| h1::t1, h2::t2 -> \nif h1=h2 then (compareList t1 t2)\nelse false\n|l1,l2 -> false","min":"\nlet rec compareList l1 l2 =\n  match (l1, l2) with\n  | ([],[]) -> true\n  | (h1::t1,h2::t2) -> if h1 = h2 then compareList t1 t2 else false\n  | (l1,l2) -> false;;\n","type":"","out":""},{"in":"let palindrome w = \nmatch w with\n| _ ->\nlet reverse = listReverse (explode w) in\nlet forward = explode w in\ncompareList forward reverse","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec compareList l1 l2 =\n  match (l1, l2) with\n  | ([],[]) -> true\n  | (h1::t1,h2::t2) -> if h1 = h2 then compareList t1 t2 else false\n  | (l1,l2) -> false;;\n\nlet explode s =\n  let rec go i =\n    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in\n  go 0;;\n\nlet rec listReverse l =\n  match l with | [] -> [] | x::[] -> [x] | x::t -> append (listReverse t) x;;\n\nlet palindrome w =\n  match w with\n  | _ ->\n      let reverse = listReverse (explode w) in\n      let forward = explode w in compareList forward reverse;;\n","type":"","out":""},{"in":"let _ = palindrome \"malayalam\"","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec compareList l1 l2 =\n  match (l1, l2) with\n  | ([],[]) -> true\n  | (h1::t1,h2::t2) -> if h1 = h2 then compareList t1 t2 else false\n  | (l1,l2) -> false;;\n\nlet explode s =\n  let rec go i =\n    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in\n  go 0;;\n\nlet rec listReverse l =\n  match l with | [] -> [] | x::[] -> [x] | x::t -> append (listReverse t) x;;\n\nlet palindrome w =\n  match w with\n  | _ ->\n      let reverse = listReverse (explode w) in\n      let forward = explode w in compareList forward reverse;;\n\nlet _ = palindrome \"malayalam\";;\n","type":"","out":""},{"in":"let _ = palindrome \"myxomatosis\"","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec compareList l1 l2 =\n  match (l1, l2) with\n  | ([],[]) -> true\n  | (h1::t1,h2::t2) -> if h1 = h2 then compareList t1 t2 else false\n  | (l1,l2) -> false;;\n\nlet explode s =\n  let rec go i =\n    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in\n  go 0;;\n\nlet rec listReverse l =\n  match l with | [] -> [] | x::[] -> [x] | x::t -> append (listReverse t) x;;\n\nlet palindrome w =\n  match w with\n  | _ ->\n      let reverse = listReverse (explode w) in\n      let forward = explode w in compareList forward reverse;;\n\nlet _ = palindrome \"myxomatosis\";;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key        = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130  = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let scoreMsg () = \nPrintf.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Printf.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":0,"stop":5755},"type":"eval"},"cursor":180,"time":1.397376906282349e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXX\nXXXXXXXXXXXXX\nXXXXXXXXXXXX\nXXXXXXXXXX\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec sumList xs = \n  match xs with \n    | [] -> 0\n    | x :: tail -> x + sumList tail;;\n\nlet _ = sumList [1; 2; 3; 4]\nlet _ = sumList [1; -2; 3; 5]\nlet _ = sumList [1; 3; 5; 7; 9; 11]\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec append l e =\n  match l with \n    |[] -> [e]\n    | h :: t -> h :: (append t e);;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec listReverse l =\n  match l with\n    |[] -> []\n    |[x] -> [x]\n    | x::t -> append(listReverse t) x;;\n\nlet _ = listReverse [1; 2; 3; 4]\nlet _ = listReverse [\"a\"; \"b\"; \"c\"; \"d\"]\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec digitsOfInt n = \n  if n <= 0 then [] \n  else\n  if n < 10 then n::[] else append(digitsOfInt(n / 10)) (n mod 10);;\n\nlet _ = digitsOfInt 3124\nlet _ = digitsOfInt 352663\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet digits n = digitsOfInt (abs n)\nlet _ = digits (31243)\nlet _ = digits (-23422)\n\n\n\n(*XXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec add n = \n  if n < 0 then failwith \"n cannot be negative\" else\n  if n < 10 then n \n  else add(n/10) + (n mod 10);;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec additivePersistence n = \n  if n < 0 then failwith \"n cannot be negative\" else\n  if n < 10 then 0\n  else let m = add n in\n      if m < 10 then 1 else 1 + (additivePersistence m);;\n\nlet _ = additivePersistence 9876\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec digitalRoot n = \n  if n < 0 then failwith \"n cannot be negative\" else\n  if n < 10 then n\n  else\n    let m = add n in\n      if m < 10 then m else (digitalRoot m);;\n\nlet _ = digitalRoot 9876\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet explode s = \n  let rec go i = \n    if i >= String.length s \n    then [] \n    else (s.[i]) :: (go (i+1)) \n  in\n    go 0\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec compareList l1 l2 = \n  match(l1, l2) with \n    | [],[] -> true\n    | h1::t1, h2::t2 -> \n        if h1=h2 then (compareList t1 t2)\n        else false\n    |l1,l2 -> false;;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet palindrome w = \n  match w with\n    | _ ->\n        let reverse = listReverse (explode w) in\n        let forward = explode w in\n          compareList forward reverse;;\n\nlet _ = palindrome \"malayalam\"\nlet _ = palindrome \"myxomatosis\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key        = \"\"     (*XXXXXXXX*)\nlet prefix130  = \"130\"  (*XXXXXXXX*)\n\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Printf.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet doTest f = \n  try f () with ex -> \n    Printf.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 sumList\n                 [1;2;3;4]\n                 10\n                 \"sample: sumList 1\"\n    );\n    (fun () -> mkTest \n                 sumList \n                 [1;-2;3;5] \n                 7 \n                 \"sample: sumList 2\"\n    ); \n    (fun () -> mkTest \n                 sumList \n                 [1;3;5;7;9;11]\n                 36 \n                 \"sample: sumList 3\"\n    ); \n    (fun () -> mkTest \n                 digitsOfInt \n                 3124 \n                 [3;1;2;4] \n                 \"sample: digitsOfInt 1\"\n    ); \n    (fun () -> mkTest \n                 digitsOfInt \n                 352663 \n                 [3;5;2;6;6;3] \n                 \"sample: digitsOfInt 2\"\n    ); \n    (fun () -> mkTest \n                 digits\n                 31243\n                 [3;1;2;4;3] \n                 \"sample: digits 1\"\n    ); \n    (fun () -> mkTest \n                 digits\n                 (-23422)\n                 [2;3;4;2;2]\n                 \"sample: digits 2\"\n    ); \n    (fun () -> mkTest \n                 additivePersistence \n                 9876 \n                 2 \n                 \"sample: additivePersistence1\"\n    ); \n    (fun () -> mkTest \n                 digitalRoot \n                 9876 \n                 3 \n                 \"sample: digitalRoot\"\n    ); \n    (fun () -> mkTest \n                 listReverse\n                 [1;2;3;4] \n                 [4;3;2;1]\n                 \"sample: reverse 1\"\n    ); \n    (fun () -> mkTest \n                 listReverse \n                 [\"a\";\"b\";\"c\";\"d\"]\n                 [\"d\";\"c\";\"b\";\"a\"] \n                 \"sample: rev 2\"\n    ); \n    (fun () -> mkTest \n                 palindrome \n                 \"malayalam\" \n                 true\n                 \"sample: palindrome 1\"\n    ); \n    (fun () -> mkTest \n                 palindrome \n                 \"myxomatosis\" \n                 false\n                 \"sample: palindrome 2\"\n    )] \n\nlet _ =\n  let report = List.map doTest (sampleTests) in\n  let _ = List.iter print130 (report@([scoreMsg()])) in\n  let _ = print130 (\"Compiled\\n\") in\n    (!score, !max)\n","file":"hw1.ml"}
{"ocaml":[{"in":"let rec sumList xs = \nmatch xs with \n| [] -> 0\n| x :: tail -> x + sumList tail","min":"\nlet rec sumList xs = match xs with | [] -> 0 | x::tail -> x + (sumList tail);;\n","type":"","out":""},{"in":"let _ = sumList [1; 2; 3; 4]","min":"\nlet rec sumList xs = match xs with | [] -> 0 | x::tail -> x + (sumList tail);;\n\nlet _ = sumList [1; 2; 3; 4];;\n","type":"","out":""},{"in":"let _ = sumList [1; -2; 3; 5]","min":"\nlet rec sumList xs = match xs with | [] -> 0 | x::tail -> x + (sumList tail);;\n\nlet _ = sumList [1; (-2); 3; 5];;\n","type":"","out":""},{"in":"let _ = sumList [1; 3; 5; 7; 9; 11]","min":"\nlet rec sumList xs = match xs with | [] -> 0 | x::tail -> x + (sumList tail);;\n\nlet _ = sumList [1; 3; 5; 7; 9; 11];;\n","type":"","out":""},{"in":"let rec append l e =\nmatch l with \n|[] -> [e]\n| h :: t -> h :: (append t e)","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n","type":"","out":""},{"in":"let rec listReverse l =\nmatch l with\n|[] -> []\n|[x] -> [x]\n| x::t -> append(listReverse t) x","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec listReverse l =\n  match l with | [] -> [] | x::[] -> [x] | x::t -> append (listReverse t) x;;\n","type":"","out":""},{"in":"let _ = listReverse [1; 2; 3; 4]","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec listReverse l =\n  match l with | [] -> [] | x::[] -> [x] | x::t -> append (listReverse t) x;;\n\nlet _ = listReverse [1; 2; 3; 4];;\n","type":"","out":""},{"in":"let _ = listReverse [\"a\"; \"b\"; \"c\"; \"d\"]","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec listReverse l =\n  match l with | [] -> [] | x::[] -> [x] | x::t -> append (listReverse t) x;;\n\nlet _ = listReverse [\"a\"; \"b\"; \"c\"; \"d\"];;\n","type":"","out":""},{"in":"let rec digitsOfInt n = \nif n <= 0 then [] \nelse\nif n < 10 then n::[] else append(digitsOfInt(n / 10)) (n mod 10)","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec digitsOfInt n =\n  if n <= 0\n  then []\n  else if n < 10 then [n] else append (digitsOfInt (n / 10)) (n mod 10);;\n","type":"","out":""},{"in":"let _ = digitsOfInt 3124","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec digitsOfInt n =\n  if n <= 0\n  then []\n  else if n < 10 then [n] else append (digitsOfInt (n / 10)) (n mod 10);;\n\nlet _ = digitsOfInt 3124;;\n","type":"","out":""},{"in":"let _ = digitsOfInt 352663","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec digitsOfInt n =\n  if n <= 0\n  then []\n  else if n < 10 then [n] else append (digitsOfInt (n / 10)) (n mod 10);;\n\nlet _ = digitsOfInt 352663;;\n","type":"","out":""},{"in":"let digits n = digitsOfInt (abs n)","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec digitsOfInt n =\n  if n <= 0\n  then []\n  else if n < 10 then [n] else append (digitsOfInt (n / 10)) (n mod 10);;\n\nlet digits n = digitsOfInt (abs n);;\n","type":"","out":""},{"in":"let _ = digits (31243)","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec digitsOfInt n =\n  if n <= 0\n  then []\n  else if n < 10 then [n] else append (digitsOfInt (n / 10)) (n mod 10);;\n\nlet digits n = digitsOfInt (abs n);;\n\nlet _ = digits 31243;;\n","type":"","out":""},{"in":"let _ = digits (-23422)","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec digitsOfInt n =\n  if n <= 0\n  then []\n  else if n < 10 then [n] else append (digitsOfInt (n / 10)) (n mod 10);;\n\nlet digits n = digitsOfInt (abs n);;\n\nlet _ = digits (-23422);;\n","type":"","out":""},{"in":"let rec add n = \nif n < 0 then failwith \"n cannot be negative\" else\nif n < 10 then n \nelse add(n/10) + (n mod 10)","min":"\nlet rec add n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else if n < 10 then n else (add (n / 10)) + (n mod 10);;\n","type":"","out":""},{"in":"let rec additivePersistence n = \nif n < 0 then failwith \"n cannot be negative\" else\nif n < 10 then 0\nelse let m = add n in\nif m < 10 then 1 else 1 + (additivePersistence m)","min":"\nlet rec add n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else if n < 10 then n else (add (n / 10)) + (n mod 10);;\n\nlet rec additivePersistence n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else\n    if n < 10\n    then 0\n    else (let m = add n in if m < 10 then 1 else 1 + (additivePersistence m));;\n","type":"","out":""},{"in":"let _ = additivePersistence 9876","min":"\nlet rec add n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else if n < 10 then n else (add (n / 10)) + (n mod 10);;\n\nlet rec additivePersistence n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else\n    if n < 10\n    then 0\n    else (let m = add n in if m < 10 then 1 else 1 + (additivePersistence m));;\n\nlet _ = additivePersistence 9876;;\n","type":"","out":""},{"in":"let rec digitalRoot n = \nif n < 0 then failwith \"n cannot be negative\" else\nif n < 10 then n\nelse\nlet m = add n in\nif m < 10 then m else (digitalRoot m)","min":"\nlet rec add n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else if n < 10 then n else (add (n / 10)) + (n mod 10);;\n\nlet rec digitalRoot n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else\n    if n < 10\n    then n\n    else (let m = add n in if m < 10 then m else digitalRoot m);;\n","type":"","out":""},{"in":"let _ = digitalRoot 9876","min":"\nlet rec add n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else if n < 10 then n else (add (n / 10)) + (n mod 10);;\n\nlet rec digitalRoot n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else\n    if n < 10\n    then n\n    else (let m = add n in if m < 10 then m else digitalRoot m);;\n\nlet _ = digitalRoot 9876;;\n","type":"","out":""},{"in":"let explode s = \nlet rec go i = \nif i >= String.length s \nthen [] \nelse (s.[i]) :: (go (i+1)) \nin\ngo 0","min":"\nlet explode s =\n  let rec go i =\n    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in\n  go 0;;\n","type":"","out":""},{"in":"let rec compareList l1 l2 = \nmatch(l1, l2) with \n| [],[] -> true\n| h1::t1, h2::t2 -> \nif h1=h2 then (compareList t1 t2)\nelse false\n|l1,l2 -> false","min":"\nlet rec compareList l1 l2 =\n  match (l1, l2) with\n  | ([],[]) -> true\n  | (h1::t1,h2::t2) -> if h1 = h2 then compareList t1 t2 else false\n  | (l1,l2) -> false;;\n","type":"","out":""},{"in":"let palindrome w = \nmatch w with\n| _ ->\nlet reverse = listReverse (explode w) in\nlet forward = explode w in\ncompareList forward reverse","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec compareList l1 l2 =\n  match (l1, l2) with\n  | ([],[]) -> true\n  | (h1::t1,h2::t2) -> if h1 = h2 then compareList t1 t2 else false\n  | (l1,l2) -> false;;\n\nlet explode s =\n  let rec go i =\n    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in\n  go 0;;\n\nlet rec listReverse l =\n  match l with | [] -> [] | x::[] -> [x] | x::t -> append (listReverse t) x;;\n\nlet palindrome w =\n  match w with\n  | _ ->\n      let reverse = listReverse (explode w) in\n      let forward = explode w in compareList forward reverse;;\n","type":"","out":""},{"in":"let _ = palindrome \"malayalam\"","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec compareList l1 l2 =\n  match (l1, l2) with\n  | ([],[]) -> true\n  | (h1::t1,h2::t2) -> if h1 = h2 then compareList t1 t2 else false\n  | (l1,l2) -> false;;\n\nlet explode s =\n  let rec go i =\n    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in\n  go 0;;\n\nlet rec listReverse l =\n  match l with | [] -> [] | x::[] -> [x] | x::t -> append (listReverse t) x;;\n\nlet palindrome w =\n  match w with\n  | _ ->\n      let reverse = listReverse (explode w) in\n      let forward = explode w in compareList forward reverse;;\n\nlet _ = palindrome \"malayalam\";;\n","type":"","out":""},{"in":"let _ = palindrome \"myxomatosis\"","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec compareList l1 l2 =\n  match (l1, l2) with\n  | ([],[]) -> true\n  | (h1::t1,h2::t2) -> if h1 = h2 then compareList t1 t2 else false\n  | (l1,l2) -> false;;\n\nlet explode s =\n  let rec go i =\n    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in\n  go 0;;\n\nlet rec listReverse l =\n  match l with | [] -> [] | x::[] -> [x] | x::t -> append (listReverse t) x;;\n\nlet palindrome w =\n  match w with\n  | _ ->\n      let reverse = listReverse (explode w) in\n      let forward = explode w in compareList forward reverse;;\n\nlet _ = palindrome \"myxomatosis\";;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key        = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130  = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let scoreMsg () = \nPrintf.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Printf.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":0,"stop":5755},"type":"eval"},"cursor":85,"time":1.397377699513627e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXX\nXXXXXXXXXXXXX\nXXXXXXXXXXXX\nXXXXXXXXXX\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec sumList xs = \n  match xs with \n    | [] -> 0\n    | x :: tail -> x + sumList tail;;\n\nlet _ = sumList [1; 2; 3; 4]\nlet _ = sumList [1; -2; 3; 5]\nlet _ = sumList [1; 3; 5; 7; 9; 11]\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec append l e =\n  match l with \n    |[] -> [e]\n    | h :: t -> h :: (append t e);;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec listReverse l =\n  match l with\n    |[] -> []\n    |[x] -> [x]\n    | x::t -> append(listReverse t) x;;\n\nlet _ = listReverse [1; 2; 3; 4]\nlet _ = listReverse [\"a\"; \"b\"; \"c\"; \"d\"]\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec digitsOfInt n = \n  if n <= 0 then [] \n  else\n  if n < 10 then n::[] else append(digitsOfInt(n / 10)) (n mod 10);;\n\nlet _ = digitsOfInt 3124\nlet _ = digitsOfInt 352663\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet digits n = digitsOfInt (abs n)\nlet _ = digits (31243)\nlet _ = digits (-23422)\n\n\n\n(*XXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec add n = \n  if n < 0 then failwith \"n cannot be negative\" else\n  if n < 10 then n \n  else add(n/10) + (n mod 10);;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec additivePersistence n = \n  if n < 0 then failwith \"n cannot be negative\" else\n  if n < 10 then 0\n  else let m = add n in\n      if m < 10 then 1 else 1 + (additivePersistence m);;\n\nlet _ = additivePersistence 9876\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec digitalRoot n = \n  if n < 0 then failwith \"n cannot be negative\" else\n  if n < 10 then n\n  else\n    let m = add n in\n      if m < 10 then m else (digitalRoot m);;\n\nlet _ = digitalRoot 9876\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet explode s = \n  let rec go i = \n    if i >= String.length s \n    then [] \n    else (s.[i]) :: (go (i+1)) \n  in\n    go 0\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec compareList l1 l2 = \n  match(l1, l2) with \n    | [],[] -> true\n    | h1::t1, h2::t2 -> \n        if h1=h2 then (compareList t1 t2)\n        else false\n    |l1,l2 -> false;;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet palindrome w = \n  match w with\n    | _ ->\n        let reverse = listReverse (explode w) in\n        let forward = explode w in\n          compareList forward reverse;;\n\nlet _ = palindrome \"malayalam\"\nlet _ = palindrome \"myxomatosis\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key        = \"\"     (*XXXXXXXX*)\nlet prefix130  = \"130\"  (*XXXXXXXX*)\n\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Printf.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet doTest f = \n  try f () with ex -> \n    Printf.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 sumList\n                 [1;2;3;4]\n                 10\n                 \"sample: sumList 1\"\n    );\n    (fun () -> mkTest \n                 sumList \n                 [1;-2;3;5] \n                 7 \n                 \"sample: sumList 2\"\n    ); \n    (fun () -> mkTest \n                 sumList \n                 [1;3;5;7;9;11]\n                 36 \n                 \"sample: sumList 3\"\n    ); \n    (fun () -> mkTest \n                 digitsOfInt \n                 3124 \n                 [3;1;2;4] \n                 \"sample: digitsOfInt 1\"\n    ); \n    (fun () -> mkTest \n                 digitsOfInt \n                 352663 \n                 [3;5;2;6;6;3] \n                 \"sample: digitsOfInt 2\"\n    ); \n    (fun () -> mkTest \n                 digits\n                 31243\n                 [3;1;2;4;3] \n                 \"sample: digits 1\"\n    ); \n    (fun () -> mkTest \n                 digits\n                 (-23422)\n                 [2;3;4;2;2]\n                 \"sample: digits 2\"\n    ); \n    (fun () -> mkTest \n                 additivePersistence \n                 9876 \n                 2 \n                 \"sample: additivePersistence1\"\n    ); \n    (fun () -> mkTest \n                 digitalRoot \n                 9876 \n                 3 \n                 \"sample: digitalRoot\"\n    ); \n    (fun () -> mkTest \n                 listReverse\n                 [1;2;3;4] \n                 [4;3;2;1]\n                 \"sample: reverse 1\"\n    ); \n    (fun () -> mkTest \n                 listReverse \n                 [\"a\";\"b\";\"c\";\"d\"]\n                 [\"d\";\"c\";\"b\";\"a\"] \n                 \"sample: rev 2\"\n    ); \n    (fun () -> mkTest \n                 palindrome \n                 \"malayalam\" \n                 true\n                 \"sample: palindrome 1\"\n    ); \n    (fun () -> mkTest \n                 palindrome \n                 \"myxomatosis\" \n                 false\n                 \"sample: palindrome 2\"\n    )] \n\nlet _ =\n  let report = List.map doTest (sampleTests) in\n  let _ = List.iter print130 (report@([scoreMsg()])) in\n  let _ = print130 (\"Compiled\\n\") in\n    (!score, !max)\n","file":"hw1.ml"}
{"ocaml":[{"in":"let rec sumList xs = \nmatch xs with \n| [] -> 0\n| x :: tail -> x + sumList tail","min":"\nlet rec sumList xs = match xs with | [] -> 0 | x::tail -> x + (sumList tail);;\n","type":"","out":""},{"in":"let _ = sumList [1; 2; 3; 4]","min":"\nlet rec sumList xs = match xs with | [] -> 0 | x::tail -> x + (sumList tail);;\n\nlet _ = sumList [1; 2; 3; 4];;\n","type":"","out":""},{"in":"let _ = sumList [1; -2; 3; 5]","min":"\nlet rec sumList xs = match xs with | [] -> 0 | x::tail -> x + (sumList tail);;\n\nlet _ = sumList [1; (-2); 3; 5];;\n","type":"","out":""},{"in":"let _ = sumList [1; 3; 5; 7; 9; 11]","min":"\nlet rec sumList xs = match xs with | [] -> 0 | x::tail -> x + (sumList tail);;\n\nlet _ = sumList [1; 3; 5; 7; 9; 11];;\n","type":"","out":""},{"in":"let rec append l e =\nmatch l with \n|[] -> [e]\n| h :: t -> h :: (append t e)","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n","type":"","out":""},{"in":"let rec listReverse l =\nmatch l with\n|[] -> []\n|[x] -> [x]\n| x::t -> append(listReverse t) x","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec listReverse l =\n  match l with | [] -> [] | x::[] -> [x] | x::t -> append (listReverse t) x;;\n","type":"","out":""},{"in":"let _ = listReverse [1; 2; 3; 4]","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec listReverse l =\n  match l with | [] -> [] | x::[] -> [x] | x::t -> append (listReverse t) x;;\n\nlet _ = listReverse [1; 2; 3; 4];;\n","type":"","out":""},{"in":"let _ = listReverse [\"a\"; \"b\"; \"c\"; \"d\"]","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec listReverse l =\n  match l with | [] -> [] | x::[] -> [x] | x::t -> append (listReverse t) x;;\n\nlet _ = listReverse [\"a\"; \"b\"; \"c\"; \"d\"];;\n","type":"","out":""},{"in":"let rec digitsOfInt n = \nif n <= 0 then [] \nelse\nif n < 10 then n::[] else append(digitsOfInt(n / 10)) (n mod 10)","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec digitsOfInt n =\n  if n <= 0\n  then []\n  else if n < 10 then [n] else append (digitsOfInt (n / 10)) (n mod 10);;\n","type":"","out":""},{"in":"let _ = digitsOfInt 3124","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec digitsOfInt n =\n  if n <= 0\n  then []\n  else if n < 10 then [n] else append (digitsOfInt (n / 10)) (n mod 10);;\n\nlet _ = digitsOfInt 3124;;\n","type":"","out":""},{"in":"let _ = digitsOfInt 352663","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec digitsOfInt n =\n  if n <= 0\n  then []\n  else if n < 10 then [n] else append (digitsOfInt (n / 10)) (n mod 10);;\n\nlet _ = digitsOfInt 352663;;\n","type":"","out":""},{"in":"let digits n = digitsOfInt (abs n)","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec digitsOfInt n =\n  if n <= 0\n  then []\n  else if n < 10 then [n] else append (digitsOfInt (n / 10)) (n mod 10);;\n\nlet digits n = digitsOfInt (abs n);;\n","type":"","out":""},{"in":"let _ = digits (31243)","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec digitsOfInt n =\n  if n <= 0\n  then []\n  else if n < 10 then [n] else append (digitsOfInt (n / 10)) (n mod 10);;\n\nlet digits n = digitsOfInt (abs n);;\n\nlet _ = digits 31243;;\n","type":"","out":""},{"in":"let _ = digits (-23422)","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec digitsOfInt n =\n  if n <= 0\n  then []\n  else if n < 10 then [n] else append (digitsOfInt (n / 10)) (n mod 10);;\n\nlet digits n = digitsOfInt (abs n);;\n\nlet _ = digits (-23422);;\n","type":"","out":""},{"in":"let rec add n = \nif n < 0 then failwith \"n cannot be negative\" else\nif n < 10 then n \nelse add(n/10) + (n mod 10)","min":"\nlet rec add n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else if n < 10 then n else (add (n / 10)) + (n mod 10);;\n","type":"","out":""},{"in":"let rec additivePersistence n = \nif n < 0 then failwith \"n cannot be negative\" else\nif n < 10 then 0\nelse let m = add n in\nif m < 10 then 1 else 1 + (additivePersistence m)","min":"\nlet rec add n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else if n < 10 then n else (add (n / 10)) + (n mod 10);;\n\nlet rec additivePersistence n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else\n    if n < 10\n    then 0\n    else (let m = add n in if m < 10 then 1 else 1 + (additivePersistence m));;\n","type":"","out":""},{"in":"let _ = additivePersistence 9876","min":"\nlet rec add n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else if n < 10 then n else (add (n / 10)) + (n mod 10);;\n\nlet rec additivePersistence n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else\n    if n < 10\n    then 0\n    else (let m = add n in if m < 10 then 1 else 1 + (additivePersistence m));;\n\nlet _ = additivePersistence 9876;;\n","type":"","out":""},{"in":"let rec digitalRoot n = \nif n < 0 then failwith \"n cannot be negative\" else\nif n < 10 then n\nelse\nlet m = add n in\nif m < 10 then m else (digitalRoot m)","min":"\nlet rec add n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else if n < 10 then n else (add (n / 10)) + (n mod 10);;\n\nlet rec digitalRoot n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else\n    if n < 10\n    then n\n    else (let m = add n in if m < 10 then m else digitalRoot m);;\n","type":"","out":""},{"in":"let _ = digitalRoot 9876","min":"\nlet rec add n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else if n < 10 then n else (add (n / 10)) + (n mod 10);;\n\nlet rec digitalRoot n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else\n    if n < 10\n    then n\n    else (let m = add n in if m < 10 then m else digitalRoot m);;\n\nlet _ = digitalRoot 9876;;\n","type":"","out":""},{"in":"let explode s = \nlet rec go i = \nif i >= String.length s \nthen [] \nelse (s.[i]) :: (go (i+1)) \nin\ngo 0","min":"\nlet explode s =\n  let rec go i =\n    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in\n  go 0;;\n","type":"","out":""},{"in":"let rec compareList l1 l2 = \nmatch(l1, l2) with \n| [],[] -> true\n| h1::t1, h2::t2 -> \nif h1=h2 then (compareList t1 t2)\nelse false\n|l1,l2 -> false","min":"\nlet rec compareList l1 l2 =\n  match (l1, l2) with\n  | ([],[]) -> true\n  | (h1::t1,h2::t2) -> if h1 = h2 then compareList t1 t2 else false\n  | (l1,l2) -> false;;\n","type":"","out":""},{"in":"let palindrome w = \nmatch w with\n| _ ->\nlet reverse = listReverse (explode w) in\nlet forward = explode w in\ncompareList forward reverse","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec compareList l1 l2 =\n  match (l1, l2) with\n  | ([],[]) -> true\n  | (h1::t1,h2::t2) -> if h1 = h2 then compareList t1 t2 else false\n  | (l1,l2) -> false;;\n\nlet explode s =\n  let rec go i =\n    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in\n  go 0;;\n\nlet rec listReverse l =\n  match l with | [] -> [] | x::[] -> [x] | x::t -> append (listReverse t) x;;\n\nlet palindrome w =\n  match w with\n  | _ ->\n      let reverse = listReverse (explode w) in\n      let forward = explode w in compareList forward reverse;;\n","type":"","out":""},{"in":"let _ = palindrome \"malayalam\"","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec compareList l1 l2 =\n  match (l1, l2) with\n  | ([],[]) -> true\n  | (h1::t1,h2::t2) -> if h1 = h2 then compareList t1 t2 else false\n  | (l1,l2) -> false;;\n\nlet explode s =\n  let rec go i =\n    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in\n  go 0;;\n\nlet rec listReverse l =\n  match l with | [] -> [] | x::[] -> [x] | x::t -> append (listReverse t) x;;\n\nlet palindrome w =\n  match w with\n  | _ ->\n      let reverse = listReverse (explode w) in\n      let forward = explode w in compareList forward reverse;;\n\nlet _ = palindrome \"malayalam\";;\n","type":"","out":""},{"in":"let _ = palindrome \"myxomatosis\"","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec compareList l1 l2 =\n  match (l1, l2) with\n  | ([],[]) -> true\n  | (h1::t1,h2::t2) -> if h1 = h2 then compareList t1 t2 else false\n  | (l1,l2) -> false;;\n\nlet explode s =\n  let rec go i =\n    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in\n  go 0;;\n\nlet rec listReverse l =\n  match l with | [] -> [] | x::[] -> [x] | x::t -> append (listReverse t) x;;\n\nlet palindrome w =\n  match w with\n  | _ ->\n      let reverse = listReverse (explode w) in\n      let forward = explode w in compareList forward reverse;;\n\nlet _ = palindrome \"myxomatosis\";;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key        = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130  = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let scoreMsg () = \nPrintf.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Printf.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":0,"stop":5755},"type":"eval"},"cursor":5595,"time":1.397378483764407e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXX\nXXXXXXXXXXXXX\nXXXXXXXXXXXX\nXXXXXXXXXX\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec sumList xs = \n  match xs with \n    | [] -> 0\n    | x :: tail -> x + sumList tail;;\n\nlet _ = sumList [1; 2; 3; 4]\nlet _ = sumList [1; -2; 3; 5]\nlet _ = sumList [1; 3; 5; 7; 9; 11]\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec append l e =\n  match l with \n    |[] -> [e]\n    | h :: t -> h :: (append t e);;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec listReverse l =\n  match l with\n    |[] -> []\n    |[x] -> [x]\n    | x::t -> append(listReverse t) x;;\n\nlet _ = listReverse [1; 2; 3; 4]\nlet _ = listReverse [\"a\"; \"b\"; \"c\"; \"d\"]\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec digitsOfInt n = \n  if n <= 0 then [] \n  else\n  if n < 10 then n::[] else append(digitsOfInt(n / 10)) (n mod 10);;\n\nlet _ = digitsOfInt 3124\nlet _ = digitsOfInt 352663\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet digits n = digitsOfInt (abs n)\nlet _ = digits (31243)\nlet _ = digits (-23422)\n\n\n\n(*XXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec add n = \n  if n < 0 then failwith \"n cannot be negative\" else\n  if n < 10 then n \n  else add(n/10) + (n mod 10);;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec additivePersistence n = \n  if n < 0 then failwith \"n cannot be negative\" else\n  if n < 10 then 0\n  else let m = add n in\n      if m < 10 then 1 else 1 + (additivePersistence m);;\n\nlet _ = additivePersistence 9876\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec digitalRoot n = \n  if n < 0 then failwith \"n cannot be negative\" else\n  if n < 10 then n\n  else\n    let m = add n in\n      if m < 10 then m else (digitalRoot m);;\n\nlet _ = digitalRoot 9876\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet explode s = \n  let rec go i = \n    if i >= String.length s \n    then [] \n    else (s.[i]) :: (go (i+1)) \n  in\n    go 0\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec compareList l1 l2 = \n  match(l1, l2) with \n    | [],[] -> true\n    | h1::t1, h2::t2 -> \n        if h1=h2 then (compareList t1 t2)\n        else false\n    |l1,l2 -> false;;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet palindrome w = \n  match w with\n    | _ ->\n        let reverse = listReverse (explode w) in\n        let forward = explode w in\n          compareList forward reverse;;\n\nlet _ = palindrome \"malayalam\"\nlet _ = palindrome \"myxomatosis\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key        = \"\"     (*XXXXXXXX*)\nlet prefix130  = \"130\"  (*XXXXXXXX*)\n\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Printf.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet doTest f = \n  try f () with ex -> \n    Printf.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 sumList\n                 [1;2;3;4]\n                 10\n                 \"sample: sumList 1\"\n    );\n    (fun () -> mkTest \n                 sumList \n                 [1;-2;3;5] \n                 7 \n                 \"sample: sumList 2\"\n    ); \n    (fun () -> mkTest \n                 sumList \n                 [1;3;5;7;9;11]\n                 36 \n                 \"sample: sumList 3\"\n    ); \n    (fun () -> mkTest \n                 digitsOfInt \n                 3124 \n                 [3;1;2;4] \n                 \"sample: digitsOfInt 1\"\n    ); \n    (fun () -> mkTest \n                 digitsOfInt \n                 352663 \n                 [3;5;2;6;6;3] \n                 \"sample: digitsOfInt 2\"\n    ); \n    (fun () -> mkTest \n                 digits\n                 31243\n                 [3;1;2;4;3] \n                 \"sample: digits 1\"\n    ); \n    (fun () -> mkTest \n                 digits\n                 (-23422)\n                 [2;3;4;2;2]\n                 \"sample: digits 2\"\n    ); \n    (fun () -> mkTest \n                 additivePersistence \n                 9876 \n                 2 \n                 \"sample: additivePersistence1\"\n    ); \n    (fun () -> mkTest \n                 digitalRoot \n                 9876 \n                 3 \n                 \"sample: digitalRoot\"\n    ); \n    (fun () -> mkTest \n                 listReverse\n                 [1;2;3;4] \n                 [4;3;2;1]\n                 \"sample: reverse 1\"\n    ); \n    (fun () -> mkTest \n                 listReverse \n                 [\"a\";\"b\";\"c\";\"d\"]\n                 [\"d\";\"c\";\"b\";\"a\"] \n                 \"sample: rev 2\"\n    ); \n    (fun () -> mkTest \n                 palindrome \n                 \"malayalam\" \n                 true\n                 \"sample: palindrome 1\"\n    ); \n    (fun () -> mkTest \n                 palindrome \n                 \"myxomatosis\" \n                 false\n                 \"sample: palindrome 2\"\n    )] \n\nlet _ =\n  let report = List.map doTest (sampleTests) in\n  let _ = List.iter print130 (report@([scoreMsg()])) in\n  let _ = print130 (\"Compiled\\n\") in\n    (!score, !max)\n","file":"hw1.ml"}
{"ocaml":[{"in":"let rec sumList xs = \nmatch xs with \n| [] -> 0\n| x :: tail -> x + sumList tail","min":"\nlet rec sumList xs = match xs with | [] -> 0 | x::tail -> x + (sumList tail);;\n","type":"","out":""},{"in":"let _ = sumList [1; 2; 3; 4]","min":"\nlet rec sumList xs = match xs with | [] -> 0 | x::tail -> x + (sumList tail);;\n\nlet _ = sumList [1; 2; 3; 4];;\n","type":"","out":""},{"in":"let _ = sumList [1; -2; 3; 5]","min":"\nlet rec sumList xs = match xs with | [] -> 0 | x::tail -> x + (sumList tail);;\n\nlet _ = sumList [1; (-2); 3; 5];;\n","type":"","out":""},{"in":"let _ = sumList [1; 3; 5; 7; 9; 11]","min":"\nlet rec sumList xs = match xs with | [] -> 0 | x::tail -> x + (sumList tail);;\n\nlet _ = sumList [1; 3; 5; 7; 9; 11];;\n","type":"","out":""},{"in":"let rec append l e =\nmatch l with \n|[] -> [e]\n| h :: t -> h :: (append t e)","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n","type":"","out":""},{"in":"let rec listReverse l =\nmatch l with\n|[] -> []\n|[x] -> [x]\n| x::t -> append(listReverse t) x","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec listReverse l =\n  match l with | [] -> [] | x::[] -> [x] | x::t -> append (listReverse t) x;;\n","type":"","out":""},{"in":"let _ = listReverse [1; 2; 3; 4]","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec listReverse l =\n  match l with | [] -> [] | x::[] -> [x] | x::t -> append (listReverse t) x;;\n\nlet _ = listReverse [1; 2; 3; 4];;\n","type":"","out":""},{"in":"let _ = listReverse [\"a\"; \"b\"; \"c\"; \"d\"]","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec listReverse l =\n  match l with | [] -> [] | x::[] -> [x] | x::t -> append (listReverse t) x;;\n\nlet _ = listReverse [\"a\"; \"b\"; \"c\"; \"d\"];;\n","type":"","out":""},{"in":"let rec digitsOfInt n = \nif n <= 0 then [] \nelse\nif n < 10 then n::[] else append(digitsOfInt(n / 10)) (n mod 10)","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec digitsOfInt n =\n  if n <= 0\n  then []\n  else if n < 10 then [n] else append (digitsOfInt (n / 10)) (n mod 10);;\n","type":"","out":""},{"in":"let _ = digitsOfInt 3124","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec digitsOfInt n =\n  if n <= 0\n  then []\n  else if n < 10 then [n] else append (digitsOfInt (n / 10)) (n mod 10);;\n\nlet _ = digitsOfInt 3124;;\n","type":"","out":""},{"in":"let _ = digitsOfInt 352663","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec digitsOfInt n =\n  if n <= 0\n  then []\n  else if n < 10 then [n] else append (digitsOfInt (n / 10)) (n mod 10);;\n\nlet _ = digitsOfInt 352663;;\n","type":"","out":""},{"in":"let digits n = digitsOfInt (abs n)","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec digitsOfInt n =\n  if n <= 0\n  then []\n  else if n < 10 then [n] else append (digitsOfInt (n / 10)) (n mod 10);;\n\nlet digits n = digitsOfInt (abs n);;\n","type":"","out":""},{"in":"let _ = digits (31243)","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec digitsOfInt n =\n  if n <= 0\n  then []\n  else if n < 10 then [n] else append (digitsOfInt (n / 10)) (n mod 10);;\n\nlet digits n = digitsOfInt (abs n);;\n\nlet _ = digits 31243;;\n","type":"","out":""},{"in":"let _ = digits (-23422)","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec digitsOfInt n =\n  if n <= 0\n  then []\n  else if n < 10 then [n] else append (digitsOfInt (n / 10)) (n mod 10);;\n\nlet digits n = digitsOfInt (abs n);;\n\nlet _ = digits (-23422);;\n","type":"","out":""},{"in":"let rec add n = \nif n < 0 then failwith \"n cannot be negative\" else\nif n < 10 then n \nelse add(n/10) + (n mod 10)","min":"\nlet rec add n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else if n < 10 then n else (add (n / 10)) + (n mod 10);;\n","type":"","out":""},{"in":"let rec additivePersistence n = \nif n < 0 then failwith \"n cannot be negative\" else\nif n < 10 then 0\nelse let m = add n in\nif m < 10 then 1 else 1 + (additivePersistence m)","min":"\nlet rec add n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else if n < 10 then n else (add (n / 10)) + (n mod 10);;\n\nlet rec additivePersistence n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else\n    if n < 10\n    then 0\n    else (let m = add n in if m < 10 then 1 else 1 + (additivePersistence m));;\n","type":"","out":""},{"in":"let _ = additivePersistence 9876","min":"\nlet rec add n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else if n < 10 then n else (add (n / 10)) + (n mod 10);;\n\nlet rec additivePersistence n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else\n    if n < 10\n    then 0\n    else (let m = add n in if m < 10 then 1 else 1 + (additivePersistence m));;\n\nlet _ = additivePersistence 9876;;\n","type":"","out":""},{"in":"let rec digitalRoot n = \nif n < 0 then failwith \"n cannot be negative\" else\nif n < 10 then n\nelse\nlet m = add n in\nif m < 10 then m else (digitalRoot m)","min":"\nlet rec add n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else if n < 10 then n else (add (n / 10)) + (n mod 10);;\n\nlet rec digitalRoot n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else\n    if n < 10\n    then n\n    else (let m = add n in if m < 10 then m else digitalRoot m);;\n","type":"","out":""},{"in":"let _ = digitalRoot 9876","min":"\nlet rec add n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else if n < 10 then n else (add (n / 10)) + (n mod 10);;\n\nlet rec digitalRoot n =\n  if n < 0\n  then failwith \"n cannot be negative\"\n  else\n    if n < 10\n    then n\n    else (let m = add n in if m < 10 then m else digitalRoot m);;\n\nlet _ = digitalRoot 9876;;\n","type":"","out":""},{"in":"let explode s = \nlet rec go i = \nif i >= String.length s \nthen [] \nelse (s.[i]) :: (go (i+1)) \nin\ngo 0","min":"\nlet explode s =\n  let rec go i =\n    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in\n  go 0;;\n","type":"","out":""},{"in":"let rec compareList l1 l2 = \nmatch(l1, l2) with \n| [],[] -> true\n| h1::t1, h2::t2 -> \nif h1=h2 then (compareList t1 t2)\nelse false\n|l1,l2 -> false","min":"\nlet rec compareList l1 l2 =\n  match (l1, l2) with\n  | ([],[]) -> true\n  | (h1::t1,h2::t2) -> if h1 = h2 then compareList t1 t2 else false\n  | (l1,l2) -> false;;\n","type":"","out":""},{"in":"let palindrome w = \nmatch w with\n| _ ->\nlet reverse = listReverse (explode w) in\nlet forward = explode w in\ncompareList forward reverse","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec compareList l1 l2 =\n  match (l1, l2) with\n  | ([],[]) -> true\n  | (h1::t1,h2::t2) -> if h1 = h2 then compareList t1 t2 else false\n  | (l1,l2) -> false;;\n\nlet explode s =\n  let rec go i =\n    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in\n  go 0;;\n\nlet rec listReverse l =\n  match l with | [] -> [] | x::[] -> [x] | x::t -> append (listReverse t) x;;\n\nlet palindrome w =\n  match w with\n  | _ ->\n      let reverse = listReverse (explode w) in\n      let forward = explode w in compareList forward reverse;;\n","type":"","out":""},{"in":"let _ = palindrome \"malayalam\"","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec compareList l1 l2 =\n  match (l1, l2) with\n  | ([],[]) -> true\n  | (h1::t1,h2::t2) -> if h1 = h2 then compareList t1 t2 else false\n  | (l1,l2) -> false;;\n\nlet explode s =\n  let rec go i =\n    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in\n  go 0;;\n\nlet rec listReverse l =\n  match l with | [] -> [] | x::[] -> [x] | x::t -> append (listReverse t) x;;\n\nlet palindrome w =\n  match w with\n  | _ ->\n      let reverse = listReverse (explode w) in\n      let forward = explode w in compareList forward reverse;;\n\nlet _ = palindrome \"malayalam\";;\n","type":"","out":""},{"in":"let _ = palindrome \"myxomatosis\"","min":"\nlet rec append l e = match l with | [] -> [e] | h::t -> h :: (append t e);;\n\nlet rec compareList l1 l2 =\n  match (l1, l2) with\n  | ([],[]) -> true\n  | (h1::t1,h2::t2) -> if h1 = h2 then compareList t1 t2 else false\n  | (l1,l2) -> false;;\n\nlet explode s =\n  let rec go i =\n    if i >= (String.length s) then [] else (s.[i]) :: (go (i + 1)) in\n  go 0;;\n\nlet rec listReverse l =\n  match l with | [] -> [] | x::[] -> [x] | x::t -> append (listReverse t) x;;\n\nlet palindrome w =\n  match w with\n  | _ ->\n      let reverse = listReverse (explode w) in\n      let forward = explode w in compareList forward reverse;;\n\nlet _ = palindrome \"myxomatosis\";;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key        = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130  = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let scoreMsg () = \nPrintf.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Printf.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":0,"stop":5755},"type":"eval"},"cursor":85,"time":1.397378875837034e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXX\nXXXXXXXXXXXXX\nXXXXXXXXXXXX\nXXXXXXXXXX\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec sumList xs = \n  match xs with \n    | [] -> 0\n    | x :: tail -> x + sumList tail;;\n\nlet _ = sumList [1; 2; 3; 4]\nlet _ = sumList [1; -2; 3; 5]\nlet _ = sumList [1; 3; 5; 7; 9; 11]\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec append l e =\n  match l with \n    |[] -> [e]\n    | h :: t -> h :: (append t e);;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec listReverse l =\n  match l with\n    |[] -> []\n    |[x] -> [x]\n    | x::t -> append(listReverse t) x;;\n\nlet _ = listReverse [1; 2; 3; 4]\nlet _ = listReverse [\"a\"; \"b\"; \"c\"; \"d\"]\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec digitsOfInt n = \n  if n <= 0 then [] \n  else\n  if n < 10 then n::[] else append(digitsOfInt(n / 10)) (n mod 10);;\n\nlet _ = digitsOfInt 3124\nlet _ = digitsOfInt 352663\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet digits n = digitsOfInt (abs n)\nlet _ = digits (31243)\nlet _ = digits (-23422)\n\n\n\n(*XXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec add n = \n  if n < 0 then failwith \"n cannot be negative\" else\n  if n < 10 then n \n  else add(n/10) + (n mod 10);;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec additivePersistence n = \n  if n < 0 then failwith \"n cannot be negative\" else\n  if n < 10 then 0\n  else let m = add n in\n      if m < 10 then 1 else 1 + (additivePersistence m);;\n\nlet _ = additivePersistence 9876\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec digitalRoot n = \n  if n < 0 then failwith \"n cannot be negative\" else\n  if n < 10 then n\n  else\n    let m = add n in\n      if m < 10 then m else (digitalRoot m);;\n\nlet _ = digitalRoot 9876\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet explode s = \n  let rec go i = \n    if i >= String.length s \n    then [] \n    else (s.[i]) :: (go (i+1)) \n  in\n    go 0\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec compareList l1 l2 = \n  match(l1, l2) with \n    | [],[] -> true\n    | h1::t1, h2::t2 -> \n        if h1=h2 then (compareList t1 t2)\n        else false\n    |l1,l2 -> false;;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet palindrome w = \n  match w with\n    | _ ->\n        let reverse = listReverse (explode w) in\n        let forward = explode w in\n          compareList forward reverse;;\n\nlet _ = palindrome \"malayalam\"\nlet _ = palindrome \"myxomatosis\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key        = \"\"     (*XXXXXXXX*)\nlet prefix130  = \"130\"  (*XXXXXXXX*)\n\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Printf.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet doTest f = \n  try f () with ex -> \n    Printf.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 sumList\n                 [1;2;3;4]\n                 10\n                 \"sample: sumList 1\"\n    );\n    (fun () -> mkTest \n                 sumList \n                 [1;-2;3;5] \n                 7 \n                 \"sample: sumList 2\"\n    ); \n    (fun () -> mkTest \n                 sumList \n                 [1;3;5;7;9;11]\n                 36 \n                 \"sample: sumList 3\"\n    ); \n    (fun () -> mkTest \n                 digitsOfInt \n                 3124 \n                 [3;1;2;4] \n                 \"sample: digitsOfInt 1\"\n    ); \n    (fun () -> mkTest \n                 digitsOfInt \n                 352663 \n                 [3;5;2;6;6;3] \n                 \"sample: digitsOfInt 2\"\n    ); \n    (fun () -> mkTest \n                 digits\n                 31243\n                 [3;1;2;4;3] \n                 \"sample: digits 1\"\n    ); \n    (fun () -> mkTest \n                 digits\n                 (-23422)\n                 [2;3;4;2;2]\n                 \"sample: digits 2\"\n    ); \n    (fun () -> mkTest \n                 additivePersistence \n                 9876 \n                 2 \n                 \"sample: additivePersistence1\"\n    ); \n    (fun () -> mkTest \n                 digitalRoot \n                 9876 \n                 3 \n                 \"sample: digitalRoot\"\n    ); \n    (fun () -> mkTest \n                 listReverse\n                 [1;2;3;4] \n                 [4;3;2;1]\n                 \"sample: reverse 1\"\n    ); \n    (fun () -> mkTest \n                 listReverse \n                 [\"a\";\"b\";\"c\";\"d\"]\n                 [\"d\";\"c\";\"b\";\"a\"] \n                 \"sample: rev 2\"\n    ); \n    (fun () -> mkTest \n                 palindrome \n                 \"malayalam\" \n                 true\n                 \"sample: palindrome 1\"\n    ); \n    (fun () -> mkTest \n                 palindrome \n                 \"myxomatosis\" \n                 false\n                 \"sample: palindrome 2\"\n    )] \n\nlet _ =\n  let report = List.map doTest (sampleTests) in\n  let _ = List.iter print130 (report@([scoreMsg()])) in\n  let _ = print130 (\"Compiled\\n\") in\n    (!score, !max)\n","file":"hw1.ml"}
