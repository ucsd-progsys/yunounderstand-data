{"ocaml":[{"in":"let rec assoc (d,k,l) = match l with\n| [] -> d\n| (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)","min":"\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | (k',v)::rest -> if k = k' then v else assoc (d, k, rest);;\n","type":"","out":""},{"in":"let _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)])","min":"\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | (k',v)::rest -> if k = k' then v else assoc (d, k, rest);;\n\nlet _ =\n  assoc ((-1), \"william\", [(\"ranjit\", 85); (\"william\", 23); (\"moose\", 44)]);;\n","type":"","out":""},{"in":"let _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)])","min":"\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | (k',v)::rest -> if k = k' then v else assoc (d, k, rest);;\n\nlet _ = assoc ((-1), \"bob\", [(\"ranjit\", 85); (\"william\", 23); (\"moose\", 44)]);;\n","type":"","out":""},{"in":"let removeDuplicates l = \nlet rec helper (seen,rest) = \nmatch rest with \n[] -> seen\n| h::t -> \nlet seen' =\nlet rec addIfUnique item l' = match l' with \n| [] -> \nitem :: seen\n| h' :: t' -> \nif h' = item then seen else addIfUnique item t' in\naddIfUnique h seen in\nlet rest' = t in\nhelper (seen',rest') \nin\nList.rev (helper ([],l))","min":"\nlet removeDuplicates l =\n  let rec helper (seen,rest) =\n    match rest with\n    | [] -> seen\n    | h::t ->\n        let seen' =\n          let rec addIfUnique item l' =\n            match l' with\n            | [] -> item :: seen\n            | h'::t' -> if h' = item then seen else addIfUnique item t' in\n          addIfUnique h seen in\n        let rest' = t in helper (seen', rest') in\n  List.rev (helper ([], l));;\n","type":"","out":""},{"in":"let _ = removeDuplicates [1;6;2;4;12;2;13;6;9]","min":"\nlet removeDuplicates l =\n  let rec helper (seen,rest) =\n    match rest with\n    | [] -> seen\n    | h::t ->\n        let seen' =\n          let rec addIfUnique item l' =\n            match l' with\n            | [] -> item :: seen\n            | h'::t' -> if h' = item then seen else addIfUnique item t' in\n          addIfUnique h seen in\n        let rest' = t in helper (seen', rest') in\n  List.rev (helper ([], l));;\n\nlet _ = removeDuplicates [1; 6; 2; 4; 12; 2; 13; 6; 9];;\n","type":"","out":""},{"in":"let rec wwhile (f,x) = \nlet (x', b') = f x in\nif b' then wwhile (f, x') else x'","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n","type":"","out":""},{"in":"let f x = let xx = x*x*x in (xx, xx < 100) in\nwwhile (f, 2)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet _ = let f x = let xx = (x * x) * x in (xx, (xx < 100)) in wwhile (f, 2);;\n","type":"","out":""},{"in":"let fixpoint (f,x) = \nlet x' = f x in\nif x' = x then x else fixpoint f x'","min":"\nlet fixpoint (f,x) = let x' = f x in if x' = x then x else fixpoint f x';;\n","type":"scope","out":"Characters 60-68:\n  if x' = x then x else fixpoint f x';;\n                        ^^^^^^^^\nError: Unbound value fixpoint\n"},{"in":"let g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0)","min":"\nlet _ =\n  let g x = truncate (1e6 *. (cos (1e-6 *. (float x)))) in fixpoint (g, 0);;\n","type":"scope","out":"Characters 53-61:\n  let g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);;\n                                                       ^^^^^^^^\nError: Unbound value fixpoint\n"}],"event":{"region":{"start":0,"stop":3184},"type":"eval"},"cursor":3187,"time":1.398057925948935e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let x' = f x in\n    if x' = x then x else fixpoint f x'\n(*XXXXXXXXXXX*)\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec exprToString e = failwith \"to be written\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = failwith \"to be written\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec fixpoint (f,x) = \nlet x' = f x in\nif x' = x then x else fixpoint f x'","min":"\nlet rec fixpoint (f,x) = let x' = f x in if x' = x then x else fixpoint f x';;\n","type":"type","out":"Characters 73-74:\n  if x' = x then x else fixpoint f x';;\n                                 ^\nError: This expression has type ('a -> 'b) -> 'a -> 'b\n       but an expression was expected of type\n         (('a -> 'b) -> 'a -> 'b) * ('a -> 'b)\n"}],"event":{"region":{"start":2614,"stop":3101},"type":"eval"},"cursor":3032,"time":1.398057939101996e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec fixpoint (f,x) = \n  let x' = f x in\n    if x' = x then x else fixpoint f x'\n(*XXXXXXXXXXX*)\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec exprToString e = failwith \"to be written\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = failwith \"to be written\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec fixpoint (f,x) = \nlet x' = f x in\nif x' = x then x else fixpoint (f, x')","min":"\nlet rec fixpoint (f,x) =\n  let x' = f x in if x' = x then x else fixpoint (f, x');;\n","type":"","out":""}],"event":{"region":{"start":2614,"stop":3104},"type":"eval"},"cursor":3104,"time":1.398057964059083e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec fixpoint (f,x) = \n  let x' = f x in\n    if x' = x then x else fixpoint (f, x')\n(*XXXXXXXXXXX*)\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec exprToString e = failwith \"to be written\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = failwith \"to be written\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0)","min":"\nlet rec fixpoint (f,x) =\n  let x' = f x in if x' = x then x else fixpoint (f, x');;\n\nlet _ =\n  let g x = truncate (1e6 *. (cos (1e-6 *. (float x)))) in fixpoint (g, 0);;\n","type":"","out":""}],"event":{"region":{"start":3104,"stop":3191},"type":"eval"},"cursor":3194,"time":1.398057969489548e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec fixpoint (f,x) = \n  let x' = f x in\n    if x' = x then x else fixpoint (f, x')\n(*XXXXXXXXXXX*)\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec exprToString e = failwith \"to be written\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = failwith \"to be written\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec fixpoint (f,x) = \nlet x' = f x in\nlet g x = (f, x' = x) in \nwwhile (g,x)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet rec fixpoint (f,x) =\n  let x' = f x in let g x = (f, (x' = x)) in wwhile (g, x);;\n","type":"type","out":"Characters 76-77:\n  wwhile (g,x);;\n          ^\nError: This expression has type 'a -> ('b -> 'a) * bool\n       but an expression was expected of type 'a -> 'a * bool\n       The type variable 'a occurs inside 'b -> 'a\n"}],"event":{"region":{"start":2614,"stop":3104},"type":"eval"},"cursor":3105,"time":1.3980581814528e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec fixpoint (f,x) = \n  let x' = f x in\n  let g x = (f, x' = x) in \n    wwhile (g,x)\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec exprToString e = failwith \"to be written\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = failwith \"to be written\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec fixpoint (f,x) = \nlet x' = f x in\nlet g x = (x', x' = x) in \nwwhile (g,x)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet rec fixpoint (f,x) =\n  let x' = f x in let g x = (x', (x' = x)) in wwhile (g, x);;\n","type":"","out":""}],"event":{"region":{"start":2614,"stop":3105},"type":"eval"},"cursor":3107,"time":1.398058228724648e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec fixpoint (f,x) = \n  let x' = f x in\n  let g x = (x', x' = x) in \n    wwhile (g,x)\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec exprToString e = failwith \"to be written\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = failwith \"to be written\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet rec fixpoint (f,x) =\n  let x' = f x in let g x = (x', (x' = x)) in wwhile (g, x);;\n\nlet _ =\n  let g x = truncate (1e6 *. (cos (1e-6 *. (float x)))) in fixpoint (g, 0);;\n","type":"","out":""}],"event":{"region":{"start":3105,"stop":3176},"type":"eval"},"cursor":3179,"time":1.398058245463935e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec fixpoint (f,x) = \n  let x' = f x in\n  let g x = (x', x' = x) in \n    wwhile (g,x)\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec exprToString e = failwith \"to be written\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = failwith \"to be written\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec fixpoint (f,x) = \nlet g x = (f x, f x = x) in \nwwhile (g,x)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet rec fixpoint (f,x) = let g x = ((f x), ((f x) = x)) in wwhile (g, x);;\n","type":"","out":""}],"event":{"region":{"start":2614,"stop":3091},"type":"eval"},"cursor":3092,"time":1.398058327922117e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec fixpoint (f,x) = \n  let g x = (f x, f x = x) in \n    wwhile (g,x)\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec exprToString e = failwith \"to be written\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = failwith \"to be written\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet rec fixpoint (f,x) = let g x = ((f x), ((f x) = x)) in wwhile (g, x);;\n\nlet _ =\n  let g x = truncate (1e6 *. (cos (1e-6 *. (float x)))) in fixpoint (g, 0);;\n","type":"","out":""}],"event":{"region":{"start":3091,"stop":3162},"type":"eval"},"cursor":3165,"time":1.398058331450109e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec fixpoint (f,x) = \n  let g x = (f x, f x = x) in \n    wwhile (g,x)\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec exprToString e = failwith \"to be written\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = failwith \"to be written\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec fixpoint (f,x) = \nlet g x = ((f x), (f x) = x) in \nwwhile (g,x)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet rec fixpoint (f,x) = let g x = ((f x), ((f x) = x)) in wwhile (g, x);;\n","type":"","out":""},{"in":"let g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet rec fixpoint (f,x) = let g x = ((f x), ((f x) = x)) in wwhile (g, x);;\n\nlet _ =\n  let g x = truncate (1e6 *. (cos (1e-6 *. (float x)))) in fixpoint (g, 0);;\n","type":"","out":""}],"event":{"region":{"start":2614,"stop":3166},"type":"eval"},"cursor":3169,"time":1.398058383421325e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec fixpoint (f,x) = \n  let g x = ((f x), (f x) = x) in \n    wwhile (g,x)\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec exprToString e = failwith \"to be written\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = failwith \"to be written\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, .2)","min":"","type":"syntax","out":"Characters 66-67:\n  let g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, .2);;\n                                                                    ^\nError: Syntax error: operator expected.\n"}],"event":{"region":{"start":3095,"stop":3167},"type":"eval"},"cursor":3170,"time":1.39805839598314e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec fixpoint (f,x) = \n  let g x = ((f x), (f x) = x) in \n    wwhile (g,x)\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, .2);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec exprToString e = failwith \"to be written\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = failwith \"to be written\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 2)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet rec fixpoint (f,x) = let g x = ((f x), ((f x) = x)) in wwhile (g, x);;\n\nlet _ =\n  let g x = truncate (1e6 *. (cos (1e-6 *. (float x)))) in fixpoint (g, 2);;\n","type":"","out":""}],"event":{"region":{"start":3095,"stop":3166},"type":"eval"},"cursor":3169,"time":1.398058402170349e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec fixpoint (f,x) = \n  let g x = ((f x), (f x) = x) in \n    wwhile (g,x)\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 2);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec exprToString e = failwith \"to be written\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = failwith \"to be written\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec fixpoint (f,x) = \nlet g x = ((f x), (f x) = x) in\nwwhile (g,x)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet rec fixpoint (f,x) = let g x = ((f x), ((f x) = x)) in wwhile (g, x);;\n","type":"","out":""},{"in":"let _ = g","min":"\nlet _ = g;;\n","type":"scope","out":"Characters 8-9:\n  let _ = g;;\n          ^\nError: Unbound value g\n"}],"event":{"region":{"start":2614,"stop":3106},"type":"eval"},"cursor":3108,"time":1.398059033846583e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet rec fixpoint (f,x) = \n  let g x = ((f x), (f x) = x) in\n    wwhile (g,x);;\nlet _ = g;;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec exprToString e = failwith \"to be written\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = failwith \"to be written\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let fixpoint (f,x) = \nlet g x = ((f x), (f x) = x) in\nwwhile (g,x)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) = x)) in wwhile (g, x);;\n","type":"","out":""}],"event":{"region":{"start":2614,"stop":3090},"type":"eval"},"cursor":3027,"time":1.398059129878352e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) = x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec exprToString e = failwith \"to be written\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = failwith \"to be written\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) = x)) in wwhile (g, x);;\n\nlet _ =\n  let g x = truncate (1e6 *. (cos (1e-6 *. (float x)))) in fixpoint (g, 0);;\n","type":"","out":""},{"in":"let g x = truncate (1e6 *. cos (1e-6 *. float x))","min":"\nlet g x = truncate (1e6 *. (cos (1e-6 *. (float x))));;\n","type":"","out":""},{"in":"let g' x = ((g x), (g x) = x)","min":"\nlet g x = truncate (1e6 *. (cos (1e-6 *. (float x))));;\n\nlet g' x = ((g x), ((g x) = x));;\n","type":"","out":""}],"event":{"region":{"start":3090,"stop":3250},"type":"eval"},"cursor":3252,"time":1.398059216602805e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) = x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x));;\nlet g' x = ((g x), (g x) = x);;\n\n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec exprToString e = failwith \"to be written\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = failwith \"to be written\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let _ = g'","min":"\nlet g x = truncate (1e6 *. (cos (1e-6 *. (float x))));;\n\nlet g' x = ((g x), ((g x) = x));;\n\nlet _ = g';;\n","type":"","out":""}],"event":{"region":{"start":3250,"stop":3263},"type":"eval"},"cursor":3263,"time":1.398059234367738e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) = x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x));;\nlet g' x = ((g x), (g x) = x);;\nlet _ = g'\n\n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec exprToString e = failwith \"to be written\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = failwith \"to be written\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let _ = g' 0","min":"\nlet g x = truncate (1e6 *. (cos (1e-6 *. (float x))));;\n\nlet g' x = ((g x), ((g x) = x));;\n\nlet _ = g' 0;;\n","type":"","out":""}],"event":{"region":{"start":3250,"stop":3265},"type":"eval"},"cursor":3265,"time":1.398059248219777e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) = x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x));;\nlet g' x = ((g x), (g x) = x);;\nlet _ = g' 0\n\n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec exprToString e = failwith \"to be written\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = failwith \"to be written\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let fixpoint (f,x) = \nlet g x = ((f x), (f x) != x) in\nwwhile (g,x)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n","type":"","out":""}],"event":{"region":{"start":2614,"stop":3091},"type":"eval"},"cursor":3071,"time":1.398059290512892e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x));;\nlet g' x = ((g x), (g x) = x);;\nlet _ = g' 0\n\n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec exprToString e = failwith \"to be written\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = failwith \"to be written\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ =\n  let g x = truncate (1e6 *. (cos (1e-6 *. (float x)))) in fixpoint (g, 0);;\n","type":"","out":""}],"event":{"region":{"start":3091,"stop":3164},"type":"eval"},"cursor":3167,"time":1.398059297948029e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x));;\nlet g' x = ((g x), (g x) = x);;\nlet _ = g' 0\n\n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec exprToString e = failwith \"to be written\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = failwith \"to be written\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1","min":"\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 1)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 1);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 3)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 3);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 48)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 48);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 107)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 107);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 9001)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 9001);;\n","type":"","out":""}],"event":{"region":{"start":3164,"stop":3418},"type":"eval"},"cursor":3422,"time":1.398059482153423e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec exprToString e = failwith \"to be written\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = failwith \"to be written\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"type expr = \nVarX\n| VarY\n| Sine     of expr\n| Cosine   of expr\n| Average  of expr * expr\n| Times    of expr * expr\n| Thresh   of expr * expr * expr * expr","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n","type":"","out":""},{"in":"let _ = Sine VarX","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet _ = Sine VarX;;\n","type":"","out":""}],"event":{"region":{"start":3418,"stop":4000},"type":"eval"},"cursor":4000,"time":1.398059580239363e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet _ = Sine VarX\n\nlet rec exprToString e = failwith \"to be written\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = failwith \"to be written\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let _ = VarX","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet _ = VarX;;\n","type":"","out":""}],"event":{"region":{"start":3889,"stop":3995},"type":"eval"},"cursor":3991,"time":1.398059591889501e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet _ = VarX\n\nlet rec exprToString e = failwith \"to be written\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = failwith \"to be written\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let _ = Zeroaoeaoe","min":"\nlet _ = Zeroaoeaoe;;\n","type":"scope","out":"Characters 8-18:\n  let _ = Zeroaoeaoe;;\n          ^^^^^^^^^^\nError: Unbound constructor Zeroaoeaoe\n"}],"event":{"region":{"start":3889,"stop":4001},"type":"eval"},"cursor":4001,"time":1.398059604101222e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet _ = Zeroaoeaoe\n\nlet rec exprToString e = failwith \"to be written\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = failwith \"to be written\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let _ = fixpoint (collatz, 9001)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 9001);;\n","type":"","out":""}],"event":{"region":{"start":3386,"stop":3418},"type":"eval"},"cursor":3453,"time":1.398059609310206e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet _ = Zero\n\nlet rec exprToString e = failwith \"to be written\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = failwith \"to be written\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"type expr = \nVarX\n| VarY\n| Sine     of expr\n| Cosine   of expr\n| Average  of expr * expr\n| Times    of expr * expr\n| Thresh   of expr * expr * expr * expr","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n","type":"","out":""},{"in":"let _ = Zero","min":"\nlet _ = Zero;;\n","type":"scope","out":"Characters 8-12:\n  let _ = Zero;;\n          ^^^^\nError: Unbound constructor Zero\n"}],"event":{"region":{"start":3418,"stop":3995},"type":"eval"},"cursor":3995,"time":1.398059613485649e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet _ = Zero\n\nlet rec exprToString e = failwith \"to be written\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = failwith \"to be written\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec assoc (d,k,l) = match l with\n| [] -> d\n| (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)","min":"\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | (k',v)::rest -> if k = k' then v else assoc (d, k, rest);;\n","type":"","out":""},{"in":"let _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)])","min":"\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | (k',v)::rest -> if k = k' then v else assoc (d, k, rest);;\n\nlet _ =\n  assoc ((-1), \"william\", [(\"ranjit\", 85); (\"william\", 23); (\"moose\", 44)]);;\n","type":"","out":""},{"in":"let _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)])","min":"\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | (k',v)::rest -> if k = k' then v else assoc (d, k, rest);;\n\nlet _ = assoc ((-1), \"bob\", [(\"ranjit\", 85); (\"william\", 23); (\"moose\", 44)]);;\n","type":"","out":""},{"in":"let removeDuplicates l = \nlet rec helper (seen,rest) = \nmatch rest with \n[] -> seen\n| h::t -> \nlet seen' =\nlet rec addIfUnique item l' = match l' with \n| [] -> \nitem :: seen\n| h' :: t' -> \nif h' = item then seen else addIfUnique item t' in\naddIfUnique h seen in\nlet rest' = t in\nhelper (seen',rest') \nin\nList.rev (helper ([],l))","min":"\nlet removeDuplicates l =\n  let rec helper (seen,rest) =\n    match rest with\n    | [] -> seen\n    | h::t ->\n        let seen' =\n          let rec addIfUnique item l' =\n            match l' with\n            | [] -> item :: seen\n            | h'::t' -> if h' = item then seen else addIfUnique item t' in\n          addIfUnique h seen in\n        let rest' = t in helper (seen', rest') in\n  List.rev (helper ([], l));;\n","type":"","out":""},{"in":"let _ = removeDuplicates [1;6;2;4;12;2;13;6;9]","min":"\nlet removeDuplicates l =\n  let rec helper (seen,rest) =\n    match rest with\n    | [] -> seen\n    | h::t ->\n        let seen' =\n          let rec addIfUnique item l' =\n            match l' with\n            | [] -> item :: seen\n            | h'::t' -> if h' = item then seen else addIfUnique item t' in\n          addIfUnique h seen in\n        let rest' = t in helper (seen', rest') in\n  List.rev (helper ([], l));;\n\nlet _ = removeDuplicates [1; 6; 2; 4; 12; 2; 13; 6; 9];;\n","type":"","out":""},{"in":"let rec wwhile (f,x) = \nlet (x', b') = f x in\nif b' then wwhile (f, x') else x'","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n","type":"","out":""},{"in":"let f x = let xx = x*x*x in (xx, xx < 100) in\nwwhile (f, 2)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet _ = let f x = let xx = (x * x) * x in (xx, (xx < 100)) in wwhile (f, 2);;\n","type":"","out":""},{"in":"let fixpoint (f,x) = \nlet g x = ((f x), (f x) != x) in\nwwhile (g,x)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n","type":"","out":""},{"in":"let g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ =\n  let g x = truncate (1e6 *. (cos (1e-6 *. (float x)))) in fixpoint (g, 0);;\n","type":"","out":""},{"in":"let collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1","min":"\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 1)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 1);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 3)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 3);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 48)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 48);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 107)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 107);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 9001)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 9001);;\n","type":"","out":""},{"in":"type expr = \nVarX\n| VarY\n| Sine     of expr\n| Cosine   of expr\n| Average  of expr * expr\n| Times    of expr * expr\n| Thresh   of expr * expr * expr * expr","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n","type":"","out":""},{"in":"let rec exprToString e = match e with\n| VarX -> \"VarX\"\n| VarY -> \"VarY\"\n| Sine     (e1) -> \"Sine(\" ^ (exprToString e1) ^ \")\"\n| Cosine   (e1) -> \"Cosine(\" ^ (exprToString e1) ^ \")\"\n| Average  (e1, e2) -> \"Average(\" ^ (exprToString e1) ^ \", \"\n^ (exprToString e2) ^ \")\"\n| Times    (e1, e2) -> \"Times(\" ^ (exprToString e1) ^ \", \"\n^ (exprToString e2) ^ \")\"\n| Thresh   (e1, e2, e3, e4) -> \"Thresh(\" ^ (exprToString e1) ^ \", \"\n^ (exprToString e2) ^ \", \"\n^ (exprToString e3) ^ \", \"\n^ (exprToString e4) ^ \")\"","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"VarX\"\n  | VarY  -> \"VarY\"\n  | Sine e1 -> \"Sine(\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"Cosine(\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"Average(\" ^ ((exprToString e1) ^ (\", \" ^ ((exprToString e2) ^ \")\")))\n  | Times (e1,e2) ->\n      \"Times(\" ^ ((exprToString e1) ^ (\", \" ^ ((exprToString e2) ^ \")\")))\n  | Thresh (e1,e2,e3,e4) ->\n      \"Thresh(\" ^\n        ((exprToString e1) ^\n           (\", \" ^\n              ((exprToString e2) ^\n                 (\", \" ^\n                    ((exprToString e3) ^ (\", \" ^ ((exprToString e4) ^ \")\")))))));;\n","type":"","out":""}],"event":{"region":{"start":0,"stop":4483},"type":"eval"},"cursor":4483,"time":1.398060857940948e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"VarX\"\n  | VarY -> \"VarY\"\n  | Sine     (e1) -> \"Sine(\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"Cosine(\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"Average(\" ^ (exprToString e1) ^ \", \"\n                         ^ (exprToString e2) ^ \")\"\n  | Times    (e1, e2) -> \"Times(\" ^ (exprToString e1) ^ \", \"\n                         ^ (exprToString e2) ^ \")\"\n  | Thresh   (e1, e2, e3, e4) -> \"Thresh(\" ^ (exprToString e1) ^ \", \"\n                                 ^ (exprToString e2) ^ \", \"\n                                 ^ (exprToString e3) ^ \", \"\n                                 ^ (exprToString e4) ^ \")\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = failwith \"to be written\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n","type":"","out":""},{"in":"let _ = exprToString sampleExpr1","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"VarX\"\n  | VarY  -> \"VarY\"\n  | Sine e1 -> \"Sine(\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"Cosine(\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"Average(\" ^ ((exprToString e1) ^ (\", \" ^ ((exprToString e2) ^ \")\")))\n  | Times (e1,e2) ->\n      \"Times(\" ^ ((exprToString e1) ^ (\", \" ^ ((exprToString e2) ^ \")\")))\n  | Thresh (e1,e2,e3,e4) ->\n      \"Thresh(\" ^\n        ((exprToString e1) ^\n           (\", \" ^\n              ((exprToString e2) ^\n                 (\", \" ^\n                    ((exprToString e3) ^ (\", \" ^ ((exprToString e4) ^ \")\")))))));;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n\nlet _ = exprToString sampleExpr1;;\n","type":"","out":""},{"in":"let buildX()                       = VarX","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet buildX () = VarX;;\n","type":"","out":""},{"in":"let buildY()                       = VarY","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet buildY () = VarY;;\n","type":"","out":""},{"in":"let buildSine(e)                   = Sine(e)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet buildSine e = Sine e;;\n","type":"","out":""},{"in":"let buildCosine(e)                 = Cosine(e)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet buildCosine e = Cosine e;;\n","type":"","out":""},{"in":"let buildAverage(e1,e2)            = Average(e1,e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n","type":"","out":""},{"in":"let buildTimes(e1,e2)              = Times(e1,e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n","type":"","out":""},{"in":"let buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n","type":"","out":""},{"in":"let pi = 4.0 *. atan 1.0","min":"\nlet pi = 4.0 *. (atan 1.0);;\n","type":"","out":""},{"in":"let rec eval (e,x,y) = failwith \"to be written\"","min":"\nlet rec eval (e,x,y) = failwith \"to be written\";;\n","type":"","out":""},{"in":"let eval_fn e (x,y) = \nlet rv = eval (e,x,y) in\nassert (-1.0 <= rv && rv <= 1.0);\nrv","min":"\nlet rec eval (e,x,y) = failwith \"to be written\";;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n","type":"","out":""},{"in":"let sampleExpr =\nbuildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\nbuildX()),buildTimes(buildCosine (buildCosine (buildAverage\n(buildTimes (buildY(),buildY()),buildCosine (buildX())))),\nbuildCosine (buildTimes (buildSine (buildCosine\n(buildY())),buildAverage (buildSine (buildX()), buildTimes\n(buildX(),buildX()))))))),buildY())))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet sampleExpr =\n  buildCosine\n    (buildSine\n       (buildTimes\n          ((buildCosine\n              (buildAverage\n                 ((buildCosine (buildX ())),\n                   (buildTimes\n                      ((buildCosine\n                          (buildCosine\n                             (buildAverage\n                                ((buildTimes ((buildY ()), (buildY ()))),\n                                  (buildCosine (buildX ())))))),\n                        (buildCosine\n                           (buildTimes\n                              ((buildSine (buildCosine (buildY ()))),\n                                (buildAverage\n                                   ((buildSine (buildX ())),\n                                     (buildTimes ((buildX ()), (buildX ()))))))))))))),\n            (buildY ()))));;\n","type":"","out":""},{"in":"let sampleExpr2 =\nbuildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet sampleExpr2 =\n  buildThresh\n    ((buildX ()), (buildY ()), (buildSine (buildX ())),\n      (buildCosine (buildY ())));;\n","type":"","out":""},{"in":"let rec build (rand, depth) = failwith \"to be implemented\"","min":"\nlet rec build (rand,depth) = failwith \"to be implemented\";;\n","type":"","out":""},{"in":"let g1 () = failwith \"to be implemented\"","min":"\nlet g1 () = failwith \"to be implemented\";;\n","type":"","out":""},{"in":"let g2 () = failwith \"to be implemented\"","min":"\nlet g2 () = failwith \"to be implemented\";;\n","type":"","out":""},{"in":"let g3 () = failwith \"to be implemented\"","min":"\nlet g3 () = failwith \"to be implemented\";;\n","type":"","out":""},{"in":"let c1 () = failwith \"to be implemented\"","min":"\nlet c1 () = failwith \"to be implemented\";;\n","type":"","out":""},{"in":"let c2 () = failwith \"to be implemented\"","min":"\nlet c2 () = failwith \"to be implemented\";;\n","type":"","out":""},{"in":"let c3 () = failwith \"to be implemented\"","min":"\nlet c3 () = failwith \"to be implemented\";;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet rec eval (e,x,y) = failwith \"to be written\";;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet rec build (rand,depth) = failwith \"to be implemented\";;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"VarX\"\n  | VarY  -> \"VarY\"\n  | Sine e1 -> \"Sine(\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"Cosine(\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"Average(\" ^ ((exprToString e1) ^ (\", \" ^ ((exprToString e2) ^ \")\")))\n  | Times (e1,e2) ->\n      \"Times(\" ^ ((exprToString e1) ^ (\", \" ^ ((exprToString e2) ^ \")\")))\n  | Thresh (e1,e2,e3,e4) ->\n      \"Thresh(\" ^\n        ((exprToString e1) ^\n           (\", \" ^\n              ((exprToString e2) ^\n                 (\", \" ^\n                    ((exprToString e3) ^ (\", \" ^ ((exprToString e4) ^ \")\")))))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet rec eval (e,x,y) = failwith \"to be written\";;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet rec build (rand,depth) = failwith \"to be implemented\";;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"VarX\"\n  | VarY  -> \"VarY\"\n  | Sine e1 -> \"Sine(\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"Cosine(\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"Average(\" ^ ((exprToString e1) ^ (\", \" ^ ((exprToString e2) ^ \")\")))\n  | Times (e1,e2) ->\n      \"Times(\" ^ ((exprToString e1) ^ (\", \" ^ ((exprToString e2) ^ \")\")))\n  | Thresh (e1,e2,e3,e4) ->\n      \"Thresh(\" ^\n        ((exprToString e1) ^\n           (\", \" ^\n              ((exprToString e2) ^\n                 (\", \" ^\n                    ((exprToString e3) ^ (\", \" ^ ((exprToString e4) ^ \")\")))))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":4483,"stop":16082},"type":"eval"},"cursor":4613,"time":1.398060932705752e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"VarX\"\n  | VarY -> \"VarY\"\n  | Sine     (e1) -> \"Sine(\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"Cosine(\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"Average(\" ^ (exprToString e1) ^ \", \"\n                         ^ (exprToString e2) ^ \")\"\n  | Times    (e1, e2) -> \"Times(\" ^ (exprToString e1) ^ \", \"\n                         ^ (exprToString e2) ^ \")\"\n  | Thresh   (e1, e2, e3, e4) -> \"Thresh(\" ^ (exprToString e1) ^ \", \"\n                                 ^ (exprToString e2) ^ \", \"\n                                 ^ (exprToString e3) ^ \", \"\n                                 ^ (exprToString e4) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet _ = exprToString sampleExpr1 \n\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = failwith \"to be written\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec assoc (d,k,l) = match l with\n| [] -> d\n| (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)","min":"\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | (k',v)::rest -> if k = k' then v else assoc (d, k, rest);;\n","type":"","out":""},{"in":"let _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)])","min":"\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | (k',v)::rest -> if k = k' then v else assoc (d, k, rest);;\n\nlet _ =\n  assoc ((-1), \"william\", [(\"ranjit\", 85); (\"william\", 23); (\"moose\", 44)]);;\n","type":"","out":""},{"in":"let _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)])","min":"\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | (k',v)::rest -> if k = k' then v else assoc (d, k, rest);;\n\nlet _ = assoc ((-1), \"bob\", [(\"ranjit\", 85); (\"william\", 23); (\"moose\", 44)]);;\n","type":"","out":""},{"in":"let removeDuplicates l = \nlet rec helper (seen,rest) = \nmatch rest with \n[] -> seen\n| h::t -> \nlet seen' =\nlet rec addIfUnique item l' = match l' with \n| [] -> \nitem :: seen\n| h' :: t' -> \nif h' = item then seen else addIfUnique item t' in\naddIfUnique h seen in\nlet rest' = t in\nhelper (seen',rest') \nin\nList.rev (helper ([],l))","min":"\nlet removeDuplicates l =\n  let rec helper (seen,rest) =\n    match rest with\n    | [] -> seen\n    | h::t ->\n        let seen' =\n          let rec addIfUnique item l' =\n            match l' with\n            | [] -> item :: seen\n            | h'::t' -> if h' = item then seen else addIfUnique item t' in\n          addIfUnique h seen in\n        let rest' = t in helper (seen', rest') in\n  List.rev (helper ([], l));;\n","type":"","out":""},{"in":"let _ = removeDuplicates [1;6;2;4;12;2;13;6;9]","min":"\nlet removeDuplicates l =\n  let rec helper (seen,rest) =\n    match rest with\n    | [] -> seen\n    | h::t ->\n        let seen' =\n          let rec addIfUnique item l' =\n            match l' with\n            | [] -> item :: seen\n            | h'::t' -> if h' = item then seen else addIfUnique item t' in\n          addIfUnique h seen in\n        let rest' = t in helper (seen', rest') in\n  List.rev (helper ([], l));;\n\nlet _ = removeDuplicates [1; 6; 2; 4; 12; 2; 13; 6; 9];;\n","type":"","out":""},{"in":"let rec wwhile (f,x) = \nlet (x', b') = f x in\nif b' then wwhile (f, x') else x'","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n","type":"","out":""},{"in":"let f x = let xx = x*x*x in (xx, xx < 100) in\nwwhile (f, 2)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet _ = let f x = let xx = (x * x) * x in (xx, (xx < 100)) in wwhile (f, 2);;\n","type":"","out":""},{"in":"let fixpoint (f,x) = \nlet g x = ((f x), (f x) != x) in\nwwhile (g,x)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n","type":"","out":""},{"in":"let g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ =\n  let g x = truncate (1e6 *. (cos (1e-6 *. (float x)))) in fixpoint (g, 0);;\n","type":"","out":""},{"in":"let collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1","min":"\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 1)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 1);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 3)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 3);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 48)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 48);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 107)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 107);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 9001)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 9001);;\n","type":"","out":""},{"in":"type expr = \nVarX\n| VarY\n| Sine     of expr\n| Cosine   of expr\n| Average  of expr * expr\n| Times    of expr * expr\n| Thresh   of expr * expr * expr * expr","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n","type":"","out":""},{"in":"let rec exprToString e = match e with\n| VarX -> \"VarX\"\n| VarY -> \"VarY\"\n| Sine     (e1) -> \"Sine(\" ^ (exprToString e1) ^ \")\"\n| Cosine   (e1) -> \"Cosine(\" ^ (exprToString e1) ^ \")\"\n| Average  (e1, e2) -> \"Average(\" ^ (exprToString e1) ^ \", \"\n^ (exprToString e2) ^ \")\"\n| Times    (e1, e2) -> \"Times(\" ^ (exprToString e1) ^ \", \"\n^ (exprToString e2) ^ \")\"\n| Thresh   (e1, e2, e3, e4) -> \"Thresh(\" ^ (exprToString e1) ^ \", \"\n^ (exprToString e2) ^ \", \"\n^ (exprToString e3) ^ \", \"\n^ (exprToString e4) ^ \")\"","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"VarX\"\n  | VarY  -> \"VarY\"\n  | Sine e1 -> \"Sine(\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"Cosine(\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"Average(\" ^ ((exprToString e1) ^ (\", \" ^ ((exprToString e2) ^ \")\")))\n  | Times (e1,e2) ->\n      \"Times(\" ^ ((exprToString e1) ^ (\", \" ^ ((exprToString e2) ^ \")\")))\n  | Thresh (e1,e2,e3,e4) ->\n      \"Thresh(\" ^\n        ((exprToString e1) ^\n           (\", \" ^\n              ((exprToString e2) ^\n                 (\", \" ^\n                    ((exprToString e3) ^ (\", \" ^ ((exprToString e4) ^ \")\")))))));;\n","type":"","out":""},{"in":"let sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n","type":"","out":""},{"in":"let _ = exprToString sampleExpr1","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"VarX\"\n  | VarY  -> \"VarY\"\n  | Sine e1 -> \"Sine(\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"Cosine(\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"Average(\" ^ ((exprToString e1) ^ (\", \" ^ ((exprToString e2) ^ \")\")))\n  | Times (e1,e2) ->\n      \"Times(\" ^ ((exprToString e1) ^ (\", \" ^ ((exprToString e2) ^ \")\")))\n  | Thresh (e1,e2,e3,e4) ->\n      \"Thresh(\" ^\n        ((exprToString e1) ^\n           (\", \" ^\n              ((exprToString e2) ^\n                 (\", \" ^\n                    ((exprToString e3) ^ (\", \" ^ ((exprToString e4) ^ \")\")))))));;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n\nlet _ = exprToString sampleExpr1;;\n","type":"","out":""},{"in":"let buildX()                       = VarX","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet buildX () = VarX;;\n","type":"","out":""},{"in":"let buildY()                       = VarY","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet buildY () = VarY;;\n","type":"","out":""},{"in":"let buildSine(e)                   = Sine(e)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet buildSine e = Sine e;;\n","type":"","out":""},{"in":"let buildCosine(e)                 = Cosine(e)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet buildCosine e = Cosine e;;\n","type":"","out":""},{"in":"let buildAverage(e1,e2)            = Average(e1,e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n","type":"","out":""},{"in":"let buildTimes(e1,e2)              = Times(e1,e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n","type":"","out":""},{"in":"let buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n","type":"","out":""}],"event":{"region":{"start":0,"stop":5162},"type":"eval"},"cursor":5135,"time":1.398060949147111e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"VarX\"\n  | VarY -> \"VarY\"\n  | Sine     (e1) -> \"Sine(\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"Cosine(\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"Average(\" ^ (exprToString e1) ^ \", \"\n                         ^ (exprToString e2) ^ \")\"\n  | Times    (e1, e2) -> \"Times(\" ^ (exprToString e1) ^ \", \"\n                         ^ (exprToString e2) ^ \")\"\n  | Thresh   (e1, e2, e3, e4) -> \"Thresh(\" ^ (exprToString e1) ^ \", \"\n                                 ^ (exprToString e2) ^ \", \"\n                                 ^ (exprToString e3) ^ \", \"\n                                 ^ (exprToString e4) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet _ = exprToString sampleExpr1 \n\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = failwith \"to be written\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec exprToString e = match e with\n| VarX -> \"x\"\n| VarY -> \"x\"\n| Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n| Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n| Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n^ (exprToString e2) ^ \")/2)\"\n| Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n^ (exprToString e2)\n| Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n^ (exprToString e2) ^ \"?\"\n^ (exprToString e3) ^ \":\"\n^ (exprToString e4) ^ \")\"","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"x\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))));;\n","type":"","out":""}],"event":{"region":{"start":3889,"stop":4448},"type":"eval"},"cursor":4448,"time":1.398061512435971e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"x\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet _ = exprToString sampleExpr1 \n\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = failwith \"to be written\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n","type":"","out":""},{"in":"let _ = exprToString sampleExpr1","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"x\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))));;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n\nlet _ = exprToString sampleExpr1;;\n","type":"","out":""}],"event":{"region":{"start":4448,"stop":4574},"type":"eval"},"cursor":4575,"time":1.398061519967044e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"x\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet _ = exprToString sampleExpr1 \n\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = failwith \"to be written\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec exprToString e = match e with\n| VarX -> \"x\"\n| VarY -> \"y\"\n| Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n| Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n| Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n^ (exprToString e2) ^ \")/2)\"\n| Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n^ (exprToString e2)\n| Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n^ (exprToString e2) ^ \"?\"\n^ (exprToString e3) ^ \":\"\n^ (exprToString e4) ^ \")\"","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))));;\n","type":"","out":""},{"in":"let sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n","type":"","out":""},{"in":"let _ = exprToString sampleExpr1","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))));;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n\nlet _ = exprToString sampleExpr1;;\n","type":"","out":""}],"event":{"region":{"start":3889,"stop":4574},"type":"eval"},"cursor":4575,"time":1.398061532074096e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet _ = exprToString sampleExpr1 \n\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = failwith \"to be written\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let test = exprToString sampleExpr1","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))));;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n\nlet test = exprToString sampleExpr1;;\n","type":"","out":""},{"in":"let test2 = \"(x<y?x:sin(pi*x)*cos(pi*((x+y)/2)))\"","min":"\nlet test2 = \"(x<y?x:sin(pi*x)*cos(pi*((x+y)/2)))\";;\n","type":"","out":""},{"in":"let _ = test = test2","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))));;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n\nlet test = exprToString sampleExpr1;;\n\nlet test2 = \"(x<y?x:sin(pi*x)*cos(pi*((x+y)/2)))\";;\n\nlet _ = test = test2;;\n","type":"","out":""}],"event":{"region":{"start":4538,"stop":4649},"type":"eval"},"cursor":4649,"time":1.398061664268521e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet test = exprToString sampleExpr1 \nlet test2 = \"(x<y?x:sin(pi*x)*cos(pi*((x+y)/2)))\"\nlet _ = test = test2\n\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = failwith \"to be written\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let buildX()                       = VarX","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet buildX () = VarX;;\n","type":"","out":""},{"in":"let buildY()                       = VarY","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet buildY () = VarY;;\n","type":"","out":""},{"in":"let buildSine(e)                   = Sine(e)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet buildSine e = Sine e;;\n","type":"","out":""},{"in":"let buildCosine(e)                 = Cosine(e)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet buildCosine e = Cosine e;;\n","type":"","out":""},{"in":"let buildAverage(e1,e2)            = Average(e1,e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n","type":"","out":""},{"in":"let buildTimes(e1,e2)              = Times(e1,e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n","type":"","out":""},{"in":"let buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n","type":"","out":""},{"in":"let pi = 4.0 *. atan 1.0","min":"\nlet pi = 4.0 *. (atan 1.0);;\n","type":"","out":""},{"in":"let rec eval (e,x,y) = match e with\n| VarX -> x\n| VarY -> y\n| Sine     (e1) -> sin(pi * (exprToString e1))\n| Cosine   (e1) -> cos(pi * (exprToString e1))\n| Average  (e1, e2) -> ((exprToString e1) + (exprToString e2))/2\n| Times    (e1, e2) -> (exprToString e1) * (exprToString e2)\n| Thresh   (e1, e2, e3, e4) \n-> if (exprToString e1) < (exprToString e2) then\n(exprToString e3) else\n(exprToString e4)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))));;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi * (exprToString e1))\n  | Cosine e1 -> cos (pi * (exprToString e1))\n  | Average (e1,e2) -> ((exprToString e1) + (exprToString e2)) / 2\n  | Times (e1,e2) -> (exprToString e1) * (exprToString e2)\n  | Thresh (e1,e2,e3,e4) ->\n      if (exprToString e1) < (exprToString e2)\n      then exprToString e3\n      else exprToString e4;;\n","type":"type","out":"Characters 83-85:\n  | Sine     (e1) -> sin(pi * (exprToString e1))\n                         ^^\nError: This expression has type float but an expression was expected of type\n         int\n"}],"event":{"region":{"start":4538,"stop":5601},"type":"eval"},"cursor":5601,"time":1.398062113200467e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi * (exprToString e1))\n  | Cosine   (e1) -> cos(pi * (exprToString e1))\n  | Average  (e1, e2) -> ((exprToString e1) + (exprToString e2))/2\n  | Times    (e1, e2) -> (exprToString e1) * (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) \n    -> if (exprToString e1) < (exprToString e2) then\n        (exprToString e3) else\n        (exprToString e4)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec eval (e,x,y) = match e with\n| VarX -> x\n| VarY -> y\n| Sine     (e1) -> sin(pi *. (exprToString e1))\n| Cosine   (e1) -> cos(pi *. (exprToString e1))\n| Average  (e1, e2) -> ((exprToString e1) +. (exprToString e2))/.2.\n| Times    (e1, e2) -> (exprToString e1) *. (exprToString e2)\n| Thresh   (e1, e2, e3, e4) \n-> if (exprToString e1) < (exprToString e2) then\n(exprToString e3) else\n(exprToString e4)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))));;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (exprToString e1))\n  | Cosine e1 -> cos (pi *. (exprToString e1))\n  | Average (e1,e2) -> ((exprToString e1) +. (exprToString e2)) /. 2.\n  | Times (e1,e2) -> (exprToString e1) *. (exprToString e2)\n  | Thresh (e1,e2,e3,e4) ->\n      if (exprToString e1) < (exprToString e2)\n      then exprToString e3\n      else exprToString e4;;\n","type":"type","out":"Characters 89-106:\n  | Sine     (e1) -> sin(pi *. (exprToString e1))\n                               ^^^^^^^^^^^^^^^^^\nError: This expression has type string but an expression was expected of type\n         float\n"}],"event":{"region":{"start":5118,"stop":5607},"type":"eval"},"cursor":5339,"time":1.398062154046741e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (exprToString e1))\n  | Cosine   (e1) -> cos(pi *. (exprToString e1))\n  | Average  (e1, e2) -> ((exprToString e1) +. (exprToString e2))/.2.\n  | Times    (e1, e2) -> (exprToString e1) *. (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) \n    -> if (exprToString e1) < (exprToString e2) then\n        (exprToString e3) else\n        (exprToString e4)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec eval (e,x,y) = match e with\n| VarX -> x\n| VarY -> y\n| Sine     (e1) -> sin(pi *. (eval e1))\n| Cosine   (e1) -> cos(pi *. (eval e1))\n| Average  (e1, e2) -> ((eeval e1) +. (eval e2))/.2.\n| Times    (e1, e2) -> (eval e1) *. (eval e2)\n| Thresh   (e1, e2, e3, e4) \n-> if (eval e1) < (eval e2) then\n(eval e3) else\n(eval e4)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval e1))\n  | Cosine e1 -> cos (pi *. (eval e1))\n  | Average (e1,e2) -> ((eeval e1) +. (eval e2)) /. 2.\n  | Times (e1,e2) -> (eval e1) *. (eval e2)\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval e1) < (eval e2) then eval e3 else eval e4;;\n","type":"type","out":"Characters 95-97:\n  | Sine     (e1) -> sin(pi *. (eval e1))\n                                     ^^\nError: This expression has type expr but an expression was expected of type\n         expr * 'a * 'a\n"}],"event":{"region":{"start":5118,"stop":5528},"type":"eval"},"cursor":5528,"time":1.398062215818302e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval e1))\n  | Cosine   (e1) -> cos(pi *. (eval e1))\n  | Average  (e1, e2) -> ((eeval e1) +. (eval e2))/.2.\n  | Times    (e1, e2) -> (eval e1) *. (eval e2)\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval e1) < (eval e2) then\n        (eval e3) else\n        (eval e4)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec eval (e,x,y) = match e with\n| VarX -> x\n| VarY -> y\n| Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n| Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n| Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n| Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n| Thresh   (e1, e2, e3, e4) \n-> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n(eval (e3, x, y)) else\n(eval (e4, x, y))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y);;\n","type":"","out":""}],"event":{"region":{"start":5118,"stop":5607},"type":"eval"},"cursor":5607,"time":1.39806233984066e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y);;\n\nlet _ = eval ((Sine (Average (VarX, VarY))), 0.5, (-0.5));;\n","type":"","out":""},{"in":"let _ = eval (Sine(Average(VarX,VarY)),0.3,0.3)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y);;\n\nlet _ = eval ((Sine (Average (VarX, VarY))), 0.3, 0.3);;\n","type":"","out":""},{"in":"let _ = eval (sampleExpr,0.5,0.2)","min":"","type":"type","out":"Error: This expression has type expr/1191\n       but an expression was expected of type expr/1406\nError: This expression has type expr/1639\n       but an expression was expected of type expr/1659\nMINIMAL PROGRAM DIFFERENT ERROR!!!!!!\nCharacters 14-24:\n  let _ = eval (sampleExpr,0.5,0.2);;\n                ^^^^^^^^^^\nError: This expression has type expr/1191\n       but an expression was expected of type expr/1406\n"}],"event":{"region":{"start":5607,"stop":5744},"type":"eval"},"cursor":5746,"time":1.398062358870091e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let _ = eval (sampleExpr1,0.5,0.2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y);;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n\nlet _ = eval (sampleExpr1, 0.5, 0.2);;\n","type":"","out":""}],"event":{"region":{"start":5708,"stop":5745},"type":"eval"},"cursor":5736,"time":1.398062402064701e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\nlet _ = eval (sampleExpr1,0.5,0.2);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let eval_fn e (x,y) = \nlet rv = eval (e,x,y) in\nassert (-1.0 <= rv && rv <= 1.0);\nrv","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y);;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n","type":"","out":""},{"in":"let sampleExpr =\nbuildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\nbuildX()),buildTimes(buildCosine (buildCosine (buildAverage\n(buildTimes (buildY(),buildY()),buildCosine (buildX())))),\nbuildCosine (buildTimes (buildSine (buildCosine\n(buildY())),buildAverage (buildSine (buildX()), buildTimes\n(buildX(),buildX()))))))),buildY())))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet sampleExpr =\n  buildCosine\n    (buildSine\n       (buildTimes\n          ((buildCosine\n              (buildAverage\n                 ((buildCosine (buildX ())),\n                   (buildTimes\n                      ((buildCosine\n                          (buildCosine\n                             (buildAverage\n                                ((buildTimes ((buildY ()), (buildY ()))),\n                                  (buildCosine (buildX ())))))),\n                        (buildCosine\n                           (buildTimes\n                              ((buildSine (buildCosine (buildY ()))),\n                                (buildAverage\n                                   ((buildSine (buildX ())),\n                                     (buildTimes ((buildX ()), (buildX ()))))))))))))),\n            (buildY ()))));;\n","type":"","out":""},{"in":"let sampleExpr2 =\nbuildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet sampleExpr2 =\n  buildThresh\n    ((buildX ()), (buildY ()), (buildSine (buildX ())),\n      (buildCosine (buildY ())));;\n","type":"","out":""},{"in":"let _ = eval (sampleExpr,0.5,0.2)","min":"\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y);;\n\nlet sampleExpr =\n  buildCosine\n    (buildSine\n       (buildTimes\n          ((buildCosine\n              (buildAverage\n                 ((buildCosine (buildX ())),\n                   (buildTimes\n                      ((buildCosine\n                          (buildCosine\n                             (buildAverage\n                                ((buildTimes ((buildY ()), (buildY ()))),\n                                  (buildCosine (buildX ())))))),\n                        (buildCosine\n                           (buildTimes\n                              ((buildSine (buildCosine (buildY ()))),\n                                (buildAverage\n                                   ((buildSine (buildX ())),\n                                     (buildTimes ((buildX ()), (buildX ()))))))))))))),\n            (buildY ()))));;\n\nlet _ = eval (sampleExpr, 0.5, 0.2);;\n","type":"","out":""}],"event":{"region":{"start":5708,"stop":6277},"type":"eval"},"cursor":6280,"time":1.398063042828044e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec build (rand, depth) = failwith \"to be implemented\"","min":"\nlet rec build (rand,depth) = failwith \"to be implemented\";;\n","type":"","out":""},{"in":"let g1 () = failwith \"to be implemented\"","min":"\nlet g1 () = failwith \"to be implemented\";;\n","type":"","out":""},{"in":"let g2 () = failwith \"to be implemented\"","min":"\nlet g2 () = failwith \"to be implemented\";;\n","type":"","out":""},{"in":"let g3 () = failwith \"to be implemented\"","min":"\nlet g3 () = failwith \"to be implemented\";;\n","type":"","out":""},{"in":"let c1 () = failwith \"to be implemented\"","min":"\nlet c1 () = failwith \"to be implemented\";;\n","type":"","out":""},{"in":"let c2 () = failwith \"to be implemented\"","min":"\nlet c2 () = failwith \"to be implemented\";;\n","type":"","out":""},{"in":"let c3 () = failwith \"to be implemented\"","min":"\nlet c3 () = failwith \"to be implemented\";;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet rec build (rand,depth) = failwith \"to be implemented\";;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet rec build (rand,depth) = failwith \"to be implemented\";;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":6277,"stop":15997},"type":"eval"},"cursor":15467,"time":1.398063160380692e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[],"event":{"region":{"start":15997,"stop":16328},"type":"eval"},"cursor":16328,"time":1.398063209436529e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec assoc (d,k,l) = match l with\n| [] -> d\n| (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)","min":"\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | (k',v)::rest -> if k = k' then v else assoc (d, k, rest);;\n","type":"","out":""},{"in":"let _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)])","min":"\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | (k',v)::rest -> if k = k' then v else assoc (d, k, rest);;\n\nlet _ =\n  assoc ((-1), \"william\", [(\"ranjit\", 85); (\"william\", 23); (\"moose\", 44)]);;\n","type":"","out":""},{"in":"let _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)])","min":"\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | (k',v)::rest -> if k = k' then v else assoc (d, k, rest);;\n\nlet _ = assoc ((-1), \"bob\", [(\"ranjit\", 85); (\"william\", 23); (\"moose\", 44)]);;\n","type":"","out":""},{"in":"let removeDuplicates l = \nlet rec helper (seen,rest) = \nmatch rest with \n[] -> seen\n| h::t -> \nlet seen' =\nlet rec addIfUnique item l' = match l' with \n| [] -> \nitem :: seen\n| h' :: t' -> \nif h' = item then seen else addIfUnique item t' in\naddIfUnique h seen in\nlet rest' = t in\nhelper (seen',rest') \nin\nList.rev (helper ([],l))","min":"\nlet removeDuplicates l =\n  let rec helper (seen,rest) =\n    match rest with\n    | [] -> seen\n    | h::t ->\n        let seen' =\n          let rec addIfUnique item l' =\n            match l' with\n            | [] -> item :: seen\n            | h'::t' -> if h' = item then seen else addIfUnique item t' in\n          addIfUnique h seen in\n        let rest' = t in helper (seen', rest') in\n  List.rev (helper ([], l));;\n","type":"","out":""},{"in":"let _ = removeDuplicates [1;6;2;4;12;2;13;6;9]","min":"\nlet removeDuplicates l =\n  let rec helper (seen,rest) =\n    match rest with\n    | [] -> seen\n    | h::t ->\n        let seen' =\n          let rec addIfUnique item l' =\n            match l' with\n            | [] -> item :: seen\n            | h'::t' -> if h' = item then seen else addIfUnique item t' in\n          addIfUnique h seen in\n        let rest' = t in helper (seen', rest') in\n  List.rev (helper ([], l));;\n\nlet _ = removeDuplicates [1; 6; 2; 4; 12; 2; 13; 6; 9];;\n","type":"","out":""},{"in":"let rec wwhile (f,x) = \nlet (x', b') = f x in\nif b' then wwhile (f, x') else x'","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n","type":"","out":""},{"in":"let f x = let xx = x*x*x in (xx, xx < 100) in\nwwhile (f, 2)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet _ = let f x = let xx = (x * x) * x in (xx, (xx < 100)) in wwhile (f, 2);;\n","type":"","out":""},{"in":"let fixpoint (f,x) = \nlet g x = ((f x), (f x) != x) in\nwwhile (g,x)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n","type":"","out":""},{"in":"let g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ =\n  let g x = truncate (1e6 *. (cos (1e-6 *. (float x)))) in fixpoint (g, 0);;\n","type":"","out":""},{"in":"let collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1","min":"\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 1)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 1);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 3)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 3);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 48)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 48);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 107)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 107);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 9001)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 9001);;\n","type":"","out":""},{"in":"type expr = \nVarX\n| VarY\n| Sine     of expr\n| Cosine   of expr\n| Average  of expr * expr\n| Times    of expr * expr\n| Thresh   of expr * expr * expr * expr\t\n| AbsThresh of expr * expr * expr\n| ModThresh of expr * expr * expr","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n","type":"","out":""},{"in":"let rec exprToString e = match e with\n| VarX -> \"x\"\n| VarY -> \"y\"\n| Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n| Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n| Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n^ (exprToString e2) ^ \")/2)\"\n| Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n^ (exprToString e2)\n| Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n^ (exprToString e2) ^ \"?\"\n^ (exprToString e3) ^ \":\"\n^ (exprToString e4) ^ \")\"\n| AbsTresh (e1, e2, e3) -> let s = exprToString e3 in\n\"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n^ (exprToString e2) ^ \"?\"\n^ s ^ \":abs(\"\n^ (exprToString e4) ^ \"))\"","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsTresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^ (s ^ (\":abs(\" ^ ((exprToString e4) ^ \"))\")))))));;\n","type":"type","out":"Characters 467-475:\n  | AbsTresh (e1, e2, e3) -> let s = exprToString e3 in\n    ^^^^^^^^\nError: This variant pattern is expected to have type expr\n       The constructor AbsTresh does not belong to type expr\n"},{"in":"let sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n","type":"","out":""},{"in":"let sampleExpr10 = AbsThresh(VarX,VarY,VarX)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet sampleExpr10 = AbsThresh (VarX, VarY, VarX);;\n","type":"","out":""}],"event":{"region":{"start":0,"stop":4814},"type":"eval"},"cursor":4816,"time":1.398065342836067e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsTresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \"?\"\n        ^ s ^ \":abs(\"\n        ^ (exprToString e4) ^ \"))\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = AbsThresh(VarX,VarY,VarX);;\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec exprToString e = match e with\n| VarX -> \"x\"\n| VarY -> \"y\"\n| Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n| Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n| Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n^ (exprToString e2) ^ \")/2)\"\n| Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n^ (exprToString e2)\n| Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n^ (exprToString e2) ^ \"?\"\n^ (exprToString e3) ^ \":\"\n^ (exprToString e4) ^ \")\"\n| AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n\"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n^ (exprToString e2) ^ \"?\"\n^ s ^ \":abs(\"\n^ (exprToString e4) ^ \"))\"","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^ (s ^ (\":abs(\" ^ ((exprToString e4) ^ \"))\")))))));;\n","type":"scope","out":"Characters 615-617:\n  ^ (exprToString e4) ^ \"))\";;\n                  ^^\nError: Unbound value e4\n"},{"in":"let sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n","type":"","out":""},{"in":"let sampleExpr10 = AbsThresh(VarX,VarY,VarX)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet sampleExpr10 = AbsThresh (VarX, VarY, VarX);;\n","type":"","out":""}],"event":{"region":{"start":3958,"stop":4815},"type":"eval"},"cursor":4817,"time":1.398065369320468e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \"?\"\n        ^ s ^ \":abs(\"\n        ^ (exprToString e4) ^ \"))\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = AbsThresh(VarX,VarY,VarX);;\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec exprToString e = match e with\n| VarX -> \"x\"\n| VarY -> \"y\"\n| Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n| Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n| Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n^ (exprToString e2) ^ \")/2)\"\n| Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n^ (exprToString e2)\n| Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n^ (exprToString e2) ^ \"?\"\n^ (exprToString e3) ^ \":\"\n^ (exprToString e4) ^ \")\"\n| AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n\"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n^ (exprToString e2) ^ \"?\"\n^ s ^ \":abs(\"\n^ s ^ \"))\"","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\"?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))));;\n","type":"","out":""},{"in":"let sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n","type":"","out":""},{"in":"let sampleExpr10 = AbsThresh(VarX,VarY,VarX)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet sampleExpr10 = AbsThresh (VarX, VarY, VarX);;\n","type":"","out":""}],"event":{"region":{"start":3958,"stop":4799},"type":"eval"},"cursor":4802,"time":1.398065385210081e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \"?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = AbsThresh(VarX,VarY,VarX);;\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let _ = exprToString sampleExpr10","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\"?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))));;\n\nlet sampleExpr10 = AbsThresh (VarX, VarY, VarX);;\n\nlet _ = exprToString sampleExpr10;;\n","type":"","out":""}],"event":{"region":{"start":4799,"stop":4836},"type":"eval"},"cursor":4836,"time":1.39806542869921e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \"?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = AbsThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec exprToString e = match e with\n| VarX -> \"x\"\n| VarY -> \"y\"\n| Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n| Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n| Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n^ (exprToString e2) ^ \")/2)\"\n| Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n^ (exprToString e2)\n| Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n^ (exprToString e2) ^ \")?\"\n^ (exprToString e3) ^ \":\"\n^ (exprToString e4) ^ \")\"\n| AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n\"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n^ (exprToString e2) ^ \"?\"\n^ s ^ \":abs(\"\n^ s ^ \"))\"","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\")?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\"?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))));;\n","type":"","out":""},{"in":"let sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n","type":"","out":""},{"in":"let sampleExpr10 = AbsThresh(VarX,VarY,VarX)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet sampleExpr10 = AbsThresh (VarX, VarY, VarX);;\n","type":"","out":""},{"in":"let _ = exprToString sampleExpr10","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\")?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\"?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))));;\n\nlet sampleExpr10 = AbsThresh (VarX, VarY, VarX);;\n\nlet _ = exprToString sampleExpr10;;\n","type":"","out":""}],"event":{"region":{"start":3958,"stop":4837},"type":"eval"},"cursor":4837,"time":1.398065444486521e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \")?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \"?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = AbsThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec exprToString e = match e with\n| VarX -> \"x\"\n| VarY -> \"y\"\n| Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n| Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n| Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n^ (exprToString e2) ^ \")/2)\"\n| Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n^ (exprToString e2)\n| Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n^ (exprToString e2) ^ \"?\"\n^ (exprToString e3) ^ \":\"\n^ (exprToString e4) ^ \")\"\n| AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n\"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n^ (exprToString e2) ^ \")?\"\n^ s ^ \":abs(\"\n^ s ^ \"))\"","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))));;\n","type":"","out":""},{"in":"let sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n","type":"","out":""}],"event":{"region":{"start":3958,"stop":4752},"type":"eval"},"cursor":4754,"time":1.398065473133392e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = AbsThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let sampleExpr10 = AbsThresh(VarX,VarY,VarX)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet sampleExpr10 = AbsThresh (VarX, VarY, VarX);;\n","type":"","out":""},{"in":"let _ = exprToString sampleExpr10","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))));;\n\nlet sampleExpr10 = AbsThresh (VarX, VarY, VarX);;\n\nlet _ = exprToString sampleExpr10;;\n","type":"","out":""}],"event":{"region":{"start":4752,"stop":4837},"type":"eval"},"cursor":4837,"time":1.398065478913877e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = AbsThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec exprToString e = match e with\n| VarX -> \"x\"\n| VarY -> \"y\"\n| Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n| Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n| Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n^ (exprToString e2) ^ \")/2)\"\n| Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n^ (exprToString e2)\n| Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n^ (exprToString e2) ^ \"?\"\n^ (exprToString e3) ^ \":\"\n^ (exprToString e4) ^ \")\"\n| AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n\"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n^ (exprToString e2) ^ \")?\"\n^ s ^ \":abs(\"\n^ s ^ \"))\"\n| ModThresh (e1, e2, e3) -> \n\"((truncate 1000*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n^ (exprToString e2) ^ \":\"\n^ (exprToString e3) ^ \")\"","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 1000*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n","type":"","out":""}],"event":{"region":{"start":3958,"stop":4799},"type":"eval"},"cursor":4799,"time":1.398065969619068e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 1000*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = AbsThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n","type":"","out":""},{"in":"let sampleExpr10 = ModThresh(VarX,VarY,VarX)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet sampleExpr10 = ModThresh (VarX, VarY, VarX);;\n","type":"","out":""},{"in":"let _ = exprToString sampleExpr10","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 1000*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet sampleExpr10 = ModThresh (VarX, VarY, VarX);;\n\nlet _ = exprToString sampleExpr10;;\n","type":"","out":""}],"event":{"region":{"start":4799,"stop":4974},"type":"eval"},"cursor":4974,"time":1.39806598208513e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 1000*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec exprToString e = match e with\n| VarX -> \"x\"\n| VarY -> \"y\"\n| Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n| Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n| Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n^ (exprToString e2) ^ \")/2)\"\n| Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n^ (exprToString e2)\n| Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n^ (exprToString e2) ^ \"?\"\n^ (exprToString e3) ^ \":\"\n^ (exprToString e4) ^ \")\"\n| AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n\"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n^ (exprToString e2) ^ \")?\"\n^ s ^ \":abs(\"\n^ s ^ \"))\"\n| ModThresh (e1, e2, e3) -> \n\"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n^ (exprToString e2) ^ \":\"\n^ (exprToString e3) ^ \")\"","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n","type":"","out":""},{"in":"let sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n","type":"","out":""},{"in":"let sampleExpr10 = ModThresh(VarX,VarY,VarX)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet sampleExpr10 = ModThresh (VarX, VarY, VarX);;\n","type":"","out":""},{"in":"let _ = exprToString sampleExpr10","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet sampleExpr10 = ModThresh (VarX, VarY, VarX);;\n\nlet _ = exprToString sampleExpr10;;\n","type":"","out":""},{"in":"let buildX()                       = VarX","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildX () = VarX;;\n","type":"","out":""},{"in":"let buildY()                       = VarY","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildY () = VarY;;\n","type":"","out":""},{"in":"let buildSine(e)                   = Sine(e)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildSine e = Sine e;;\n","type":"","out":""},{"in":"let buildCosine(e)                 = Cosine(e)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildCosine e = Cosine e;;\n","type":"","out":""},{"in":"let buildAverage(e1,e2)            = Average(e1,e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n","type":"","out":""},{"in":"let buildTimes(e1,e2)              = Times(e1,e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n","type":"","out":""},{"in":"let buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n","type":"","out":""},{"in":"let pi = 4.0 *. atan 1.0","min":"\nlet pi = 4.0 *. (atan 1.0);;\n","type":"","out":""},{"in":"let rec eval (e,x,y) = match e with\n| VarX -> x\n| VarY -> y\n| Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n| Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n| Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n| Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n| Thresh   (e1, e2, e3, e4) \n-> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n(eval (e3, x, y)) else\n(eval (e4, x, y))\n| AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\nif abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\ns else\nabs_float s\n| ModThresh (e1, e2, e3) -> \nif ((truncate (100 *. (eval (e1, x, y)))) mod 5 = 0 then\n(eval (e2, x, y)) else\n(eval (e3, x, y))","min":"","type":"syntax","out":"Characters 577-578:\n  if ((truncate (100 *. (eval (e1, x, y)))) mod 5 = 0 then\n     ^\nSyntax error: ')' expected, the highlighted '(' might be unmatched\n"}],"event":{"region":{"start":3958,"stop":6306},"type":"eval"},"cursor":6306,"time":1.398066528215637e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if ((truncate (100 *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec eval (e,x,y) = match e with\n| VarX -> x\n| VarY -> y\n| Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n| Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n| Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n| Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n| Thresh   (e1, e2, e3, e4) \n-> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n(eval (e3, x, y)) else\n(eval (e4, x, y))\n| AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\nif abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\ns else\nabs_float s\n| ModThresh (e1, e2, e3) -> \nif (truncate (100 *. (eval (e1, x, y)))) mod 5 = 0 then\n(eval (e2, x, y)) else\n(eval (e3, x, y))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100 *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n","type":"type","out":"Characters 588-591:\n  if (truncate (100 *. (eval (e1, x, y)))) mod 5 = 0 then\n                ^^^\nError: This expression has type int but an expression was expected of type\n         float\n"}],"event":{"region":{"start":5550,"stop":6305},"type":"eval"},"cursor":6305,"time":1.398066561765211e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100 *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec eval (e,x,y) = match e with\n| VarX -> x\n| VarY -> y\n| Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n| Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n| Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n| Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n| Thresh   (e1, e2, e3, e4) \n-> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n(eval (e3, x, y)) else\n(eval (e4, x, y))\n| AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\nif abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\ns else\nabs_float s\n| ModThresh (e1, e2, e3) -> \nif (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n(eval (e2, x, y)) else\n(eval (e3, x, y))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n","type":"","out":""}],"event":{"region":{"start":5550,"stop":6306},"type":"eval"},"cursor":6227,"time":1.398066570228387e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = failwith \"to be implemented\"\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n","type":"","out":""},{"in":"let buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n","type":"","out":""}],"event":{"region":{"start":5460,"stop":5571},"type":"eval"},"cursor":5571,"time":1.39806702742716e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = \n  if depth = 0 then\n    if (rand (0,9) < 5) then\n\n\n\n      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXX*)\n\n      let g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let buildX()                       = VarX","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildX () = VarX;;\n","type":"","out":""},{"in":"let buildY()                       = VarY","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildY () = VarY;;\n","type":"","out":""},{"in":"let buildSine(e)                   = Sine(e)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildSine e = Sine e;;\n","type":"","out":""},{"in":"let buildCosine(e)                 = Cosine(e)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildCosine e = Cosine e;;\n","type":"","out":""},{"in":"let buildAverage(e1,e2)            = Average(e1,e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n","type":"","out":""},{"in":"let buildTimes(e1,e2)              = Times(e1,e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n","type":"","out":""},{"in":"let buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n","type":"","out":""},{"in":"let buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n","type":"","out":""},{"in":"let buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n","type":"","out":""},{"in":"let pi = 4.0 *. atan 1.0","min":"\nlet pi = 4.0 *. (atan 1.0);;\n","type":"","out":""},{"in":"let rec eval (e,x,y) = match e with\n| VarX -> x\n| VarY -> y\n| Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n| Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n| Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n| Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n| Thresh   (e1, e2, e3, e4) \n-> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n(eval (e3, x, y)) else\n(eval (e4, x, y))\n| AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\nif abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\ns else\nabs_float s\n| ModThresh (e1, e2, e3) -> \nif (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n(eval (e2, x, y)) else\n(eval (e3, x, y))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n","type":"","out":""},{"in":"let _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet _ = eval ((Sine (Average (VarX, VarY))), 0.5, (-0.5));;\n","type":"","out":""},{"in":"let _ = eval (Sine(Average(VarX,VarY)),0.3,0.3)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet _ = eval ((Sine (Average (VarX, VarY))), 0.3, 0.3);;\n","type":"","out":""},{"in":"let eval_fn e (x,y) = \nlet rv = eval (e,x,y) in\nassert (-1.0 <= rv && rv <= 1.0);\nrv","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n","type":"","out":""},{"in":"let sampleExpr =\nbuildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\nbuildX()),buildTimes(buildCosine (buildCosine (buildAverage\n(buildTimes (buildY(),buildY()),buildCosine (buildX())))),\nbuildCosine (buildTimes (buildSine (buildCosine\n(buildY())),buildAverage (buildSine (buildX()), buildTimes\n(buildX(),buildX()))))))),buildY())))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet sampleExpr =\n  buildCosine\n    (buildSine\n       (buildTimes\n          ((buildCosine\n              (buildAverage\n                 ((buildCosine (buildX ())),\n                   (buildTimes\n                      ((buildCosine\n                          (buildCosine\n                             (buildAverage\n                                ((buildTimes ((buildY ()), (buildY ()))),\n                                  (buildCosine (buildX ())))))),\n                        (buildCosine\n                           (buildTimes\n                              ((buildSine (buildCosine (buildY ()))),\n                                (buildAverage\n                                   ((buildSine (buildX ())),\n                                     (buildTimes ((buildX ()), (buildX ()))))))))))))),\n            (buildY ()))));;\n","type":"","out":""},{"in":"let sampleExpr2 =\nbuildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet sampleExpr2 =\n  buildThresh\n    ((buildX ()), (buildY ()), (buildSine (buildX ())),\n      (buildCosine (buildY ())));;\n","type":"","out":""},{"in":"let _ = eval (sampleExpr,0.5,0.2)","min":"\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet sampleExpr =\n  buildCosine\n    (buildSine\n       (buildTimes\n          ((buildCosine\n              (buildAverage\n                 ((buildCosine (buildX ())),\n                   (buildTimes\n                      ((buildCosine\n                          (buildCosine\n                             (buildAverage\n                                ((buildTimes ((buildY ()), (buildY ()))),\n                                  (buildCosine (buildX ())))))),\n                        (buildCosine\n                           (buildTimes\n                              ((buildSine (buildCosine (buildY ()))),\n                                (buildAverage\n                                   ((buildSine (buildX ())),\n                                     (buildTimes ((buildX ()), (buildX ()))))))))))))),\n            (buildY ()))));;\n\nlet _ = eval (sampleExpr, 0.5, 0.2);;\n","type":"","out":""},{"in":"let rec build (rand, depth) = \nlet r = rand (0,99) in\nif depth = 0 then\nif (r < 50) then\nbuildX()\nelse\nbuildY()\nelse\nif (r < 5) then\nbuildX()\nelse if (r < 10) then\nbuildY()\nelse if (r < 30) then \nbuildSine (build (rand, depth - 1))\nelse if (r < 50) then \nbuildCosine (build (rand, depth - 1))\nelse if (r < 60) then \nbuildAverage (build (rand, depth - 1), build (rand, depth - 1))\nelse if (r < 70) then \nbuildTimes (build (rand, depth - 1), build (rand, depth - 1))\nelse if (r < 80) then \nbuildThresh (build (rand, depth - 1), build (rand, depth - 1),\nbuild (rand, depth - 1), build (rand, depth - 1))\nelse if (r < 90) then \nbuildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\nbuild (rand, depth - 1))\nelse if (r < 90) then \nbuildModThresh (build (rand, depth - 1), build (rand, depth - 1),\nbuild (rand, depth - 1))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    if r < 90\n                    then\n                      buildModThresh\n                        ((build (rand, (depth - 1))),\n                          (build (rand, (depth - 1))),\n                          (build (rand, (depth - 1))));;\n","type":"type","out":"Characters 738-828:\n  buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n  build (rand, depth - 1))..\nError: This expression has type expr but an expression was expected of type\n         unit\n"}],"event":{"region":{"start":4973,"stop":8709},"type":"eval"},"cursor":8709,"time":1.398067625347377e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else if (r < 90) then \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec build (rand, depth) = \nlet r = rand (0,99) in\nif depth = 0 then\nif (r < 50) then\nbuildX\nelse\nbuildY\nelse\nif (r < 5) then\nbuildX()\nelse if (r < 10) then\nbuildY()\nelse if (r < 30) then \nbuildSine (build (rand, depth - 1))\nelse if (r < 50) then \nbuildCosine (build (rand, depth - 1))\nelse if (r < 60) then \nbuildAverage (build (rand, depth - 1), build (rand, depth - 1))\nelse if (r < 70) then \nbuildTimes (build (rand, depth - 1), build (rand, depth - 1))\nelse if (r < 80) then \nbuildThresh (build (rand, depth - 1), build (rand, depth - 1),\nbuild (rand, depth - 1), build (rand, depth - 1))\nelse if (r < 90) then \nbuildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\nbuild (rand, depth - 1))\nelse if (r < 90) then \nbuildModThresh (build (rand, depth - 1), build (rand, depth - 1),\nbuild (rand, depth - 1))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX else buildY)\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    if r < 90\n                    then\n                      buildModThresh\n                        ((build (rand, (depth - 1))),\n                          (build (rand, (depth - 1))),\n                          (build (rand, (depth - 1))));;\n","type":"type","out":"Characters 129-137:\n  buildX()\n  ^^^^^^^^\nError: This expression has type expr but an expression was expected of type\n         unit -> expr\n"}],"event":{"region":{"start":7081,"stop":8705},"type":"eval"},"cursor":8705,"time":1.398067660219727e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX\n      else\n        buildY\n    else\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else if (r < 90) then \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec build (rand, depth) = \nlet r = rand (0,99) in\nif depth = 0 then\nif (r < 50) then\nbuildX()\nelse\nbuildY()\nelse\nif (r < 5) then\nbuildX()\nelse if (r < 10) then\nbuildY()\nelse if (r < 30) then \nbuildSine (build (rand, depth - 1))\nelse if (r < 50) then \nbuildCosine (build (rand, depth - 1))\nelse if (r < 60) then \nbuildAverage (build (rand, depth - 1), build (rand, depth - 1))\nelse if (r < 70) then \nbuildTimes (build (rand, depth - 1), build (rand, depth - 1))\nelse if (r < 80) then \nbuildThresh (build (rand, depth - 1), build (rand, depth - 1),\nbuild (rand, depth - 1), build (rand, depth - 1))\nelse if (r < 90) then \nbuildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\nbuild (rand, depth - 1))\nelse if (r < 90) then \nbuildModThresh (build (rand, depth - 1), build (rand, depth - 1),\nbuild (rand, depth - 1))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    if r < 90\n                    then\n                      buildModThresh\n                        ((build (rand, (depth - 1))),\n                          (build (rand, (depth - 1))),\n                          (build (rand, (depth - 1))));;\n","type":"type","out":"Characters 738-828:\n  buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n  build (rand, depth - 1))..\nError: This expression has type expr but an expression was expected of type\n         unit\n"}],"event":{"region":{"start":7081,"stop":8709},"type":"eval"},"cursor":7978,"time":1.398067686388805e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else if (r < 90) then \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let _ = buildY()","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildY () = VarY;;\n\nlet _ = buildY ();;\n","type":"","out":""}],"event":{"region":{"start":7081,"stop":7897},"type":"eval"},"cursor":7899,"time":1.398067745776336e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else if (r < 90) then \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec build (rand, depth) = \nlet r = rand (0,99) in\nif depth = 0 then\nif (r < 50) then\nbuildX() : expr\nelse\nbuildY()\nelse\nif (r < 5) then\nbuildX()\nelse if (r < 10) then\nbuildY()\nelse if (r < 30) then \nbuildSine (build (rand, depth - 1))\nelse if (r < 50) then \nbuildCosine (build (rand, depth - 1))\nelse if (r < 60) then \nbuildAverage (build (rand, depth - 1), build (rand, depth - 1))\nelse if (r < 70) then \nbuildTimes (build (rand, depth - 1), build (rand, depth - 1))\nelse if (r < 80) then \nbuildThresh (build (rand, depth - 1), build (rand, depth - 1),\nbuild (rand, depth - 1), build (rand, depth - 1))\nelse if (r < 90) then \nbuildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\nbuild (rand, depth - 1))\nelse if (r < 90) then \nbuildModThresh (build (rand, depth - 1), build (rand, depth - 1),\nbuild (rand, depth - 1))","min":"","type":"syntax","out":"Characters 98-99:\n  buildX() : expr\n           ^\nError: Syntax error\n"}],"event":{"region":{"start":7897,"stop":8736},"type":"eval"},"cursor":8005,"time":1.398067765121611e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX() : expr\n      else\n        buildY()\n    else\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else if (r < 90) then \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec build (rand, depth) = \nlet r = rand (0,99) in\nif depth = 0 then\nif (r < 50) then\nbuildX() :: expr\nelse\nbuildY()\nelse\nif (r < 5) then\nbuildX()\nelse if (r < 10) then\nbuildY()\nelse if (r < 30) then \nbuildSine (build (rand, depth - 1))\nelse if (r < 50) then \nbuildCosine (build (rand, depth - 1))\nelse if (r < 60) then \nbuildAverage (build (rand, depth - 1), build (rand, depth - 1))\nelse if (r < 70) then \nbuildTimes (build (rand, depth - 1), build (rand, depth - 1))\nelse if (r < 80) then \nbuildThresh (build (rand, depth - 1), build (rand, depth - 1),\nbuild (rand, depth - 1), build (rand, depth - 1))\nelse if (r < 90) then \nbuildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\nbuild (rand, depth - 1))\nelse if (r < 90) then \nbuildModThresh (build (rand, depth - 1), build (rand, depth - 1),\nbuild (rand, depth - 1))","min":"","type":"scope","out":"Error: Unbound value expr\nError: Unbound constructor AbsThresh\nMINIMAL PROGRAM DIFFERENT ERROR!!!!!!\nCharacters 101-105:\n  buildX() :: expr\n              ^^^^\nError: Unbound value expr\n"}],"event":{"region":{"start":7897,"stop":8737},"type":"eval"},"cursor":8006,"time":1.398067773908285e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX() :: expr\n      else\n        buildY()\n    else\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else if (r < 90) then \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec build (rand, depth) = \nlet r = rand (0,99) in\nif depth = 0 then\nif (r < 50) then\nbuildX()\nelse\nbuildY()\nelse\nbuildY()","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0 then (if r < 50 then buildX () else buildY ()) else buildY ();;\n","type":"","out":""}],"event":{"region":{"start":7897,"stop":8026},"type":"eval"},"cursor":8026,"time":1.398067852030656e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n      buildY()\n(*\nXXXXXXXXXXXXXXX\nXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec build (rand, depth) = \nlet r = rand (0,99) in\nif depth = 0 then\nif (r < 50) then\nbuildX()\nelse\nbuildY()\nelse\n\nif (r < 5) then\nbuildX()\nelse if (r < 10) then\nbuildY()\nelse if (r < 30) then \nbuildSine (build (rand, depth - 1))\nelse if (r < 50) then \nbuildCosine (build (rand, depth - 1))\nelse if (r < 60) then \nbuildAverage (build (rand, depth - 1), build (rand, depth - 1))\nelse if (r < 70) then \nbuildTimes (build (rand, depth - 1), build (rand, depth - 1))\nelse if (r < 80) then \nbuildThresh (build (rand, depth - 1), build (rand, depth - 1),\nbuild (rand, depth - 1), build (rand, depth - 1))\nelse if (r < 90) then \nbuildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\nbuild (rand, depth - 1))\nelse \nbuildModThresh (build (rand, depth - 1), build (rand, depth - 1),\nbuild (rand, depth - 1))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n","type":"","out":""}],"event":{"region":{"start":7897,"stop":8713},"type":"eval"},"cursor":8622,"time":1.39806788737935e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = failwith \"to be implemented\"  \nlet g2 () = failwith \"to be implemented\"  \nlet g3 () = failwith \"to be implemented\"  \n\nlet c1 () = failwith \"to be implemented\"\nlet c2 () = failwith \"to be implemented\" \nlet c3 () = failwith \"to be implemented\" \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let g1 () = (8,.5,-.5)","min":"","type":"syntax","out":"Characters 15-16:\n  let g1 () = (8,.5,-.5);;\n                 ^\nError: Syntax error: operator expected.\n"},{"in":"let g2 () = (9,.7,-.9)","min":"","type":"syntax","out":"Characters 15-16:\n  let g2 () = (9,.7,-.9);;\n                 ^\nError: Syntax error: operator expected.\n"},{"in":"let g3 () = (10,.5,.5)","min":"","type":"syntax","out":"Characters 16-17:\n  let g3 () = (10,.5,.5);;\n                  ^\nError: Syntax error: operator expected.\n"},{"in":"let c1 () = (8,-.3,-.2)","min":"\nlet c1 () = (8, (-. 3), (-. 2));;\n","type":"type","out":"Characters 17-18:\n  let c1 () = (8,-.3,-.2);;\n                   ^\nError: This expression has type int but an expression was expected of type\n         float\n"},{"in":"let c2 () = (9,.7,-.7)","min":"","type":"syntax","out":"Characters 15-16:\n  let c2 () = (9,.7,-.7);;\n                 ^\nError: Syntax error: operator expected.\n"},{"in":"let c3 () = (11,.99,.8)","min":"","type":"syntax","out":"Characters 16-17:\n  let c3 () = (11,.99,.8);;\n                  ^\nError: Syntax error: operator expected.\n"},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":8713,"stop":18244},"type":"eval"},"cursor":9052,"time":1.398068084212798e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (8,.5,-.5)\nlet g2 () = (9,.7,-.9) \nlet g3 () = (10,.5,.5)\n\nlet c1 () = (8,-.3,-.2)\nlet c2 () = (9,.7,-.7) \nlet c3 () = (11,.99,.8) \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let g1 () = (8,0.5,-0.5)","min":"\nlet g1 () = (8, 0.5, (-0.5));;\n","type":"","out":""},{"in":"let g2 () = (9,0.7,-0.9)","min":"\nlet g2 () = (9, 0.7, (-0.9));;\n","type":"","out":""},{"in":"let g3 () = (10,0.5,0.5)","min":"\nlet g3 () = (10, 0.5, 0.5);;\n","type":"","out":""},{"in":"let c1 () = (8,-0.3,-0.2)","min":"\nlet c1 () = (8, (-0.3), (-0.2));;\n","type":"","out":""},{"in":"let c2 () = (9,0.7,-0.7)","min":"\nlet c2 () = (9, 0.7, (-0.7));;\n","type":"","out":""},{"in":"let c3 () = (11,0.99,0.8)","min":"\nlet c3 () = (11, 0.99, 0.8);;\n","type":"","out":""}],"event":{"region":{"start":8713,"stop":9072},"type":"eval"},"cursor":9064,"time":1.398068111456794e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (8,0.5,-0.5)\nlet g2 () = (9,0.7,-0.9) \nlet g3 () = (10,0.5,0.5)\n\nlet c1 () = (8,-0.3,-0.2)\nlet c2 () = (9,0.7,-0.7) \nlet c3 () = (11,0.99,0.8) \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let c3 () = (11,0.99,0.8)","min":"\nlet c3 () = (11, 0.99, 0.8);;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":9047,"stop":18256},"type":"eval"},"cursor":9064,"time":1.398068116583759e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (8,0.5,-0.5)\nlet g2 () = (9,0.7,-0.9) \nlet g3 () = (10,0.5,0.5)\n\nlet c1 () = (8,-0.3,-0.2)\nlet c2 () = (9,0.7,-0.7) \nlet c3 () = (11,0.99,0.8) \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let g1 () = (8,5,-5)","min":"\nlet g1 () = (8, 5, (-5));;\n","type":"","out":""},{"in":"let g2 () = (9,7,-9)","min":"\nlet g2 () = (9, 7, (-9));;\n","type":"","out":""},{"in":"let g3 () = (10,5,5)","min":"\nlet g3 () = (10, 5, 5);;\n","type":"","out":""},{"in":"let c1 () = (8,-3,-3)","min":"\nlet c1 () = (8, (-3), (-3));;\n","type":"","out":""},{"in":"let c2 () = (9,8,-8)","min":"\nlet c2 () = (9, 8, (-8));;\n","type":"","out":""},{"in":"let c3 () = (11,999,8)","min":"\nlet c3 () = (11, 999, 8);;\n","type":"","out":""}],"event":{"region":{"start":8713,"stop":9049},"type":"eval"},"cursor":9048,"time":1.398068198472349e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (8,5,-5)\nlet g2 () = (9,7,-9) \nlet g3 () = (10,5,5)\n\nlet c1 () = (8,-3,-3)\nlet c2 () = (9,8,-8) \nlet c3 () = (11,999,8) \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let c3 () = (11,999,8)","min":"\nlet c3 () = (11, 999, 8);;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":9027,"stop":18233},"type":"eval"},"cursor":9048,"time":1.398068206311015e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (8,5,-5)\nlet g2 () = (9,7,-9) \nlet g3 () = (10,5,5)\n\nlet c1 () = (8,-3,-3)\nlet c2 () = (9,8,-8) \nlet c3 () = (11,999,8) \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let g1 () = (5,5,-5)","min":"\nlet g1 () = (5, 5, (-5));;\n","type":"","out":""},{"in":"let g2 () = (6,7,-9)","min":"\nlet g2 () = (6, 7, (-9));;\n","type":"","out":""},{"in":"let g3 () = (7,5,5)","min":"\nlet g3 () = (7, 5, 5);;\n","type":"","out":""},{"in":"let c1 () = (5,-3,-3)","min":"\nlet c1 () = (5, (-3), (-3));;\n","type":"","out":""},{"in":"let c2 () = (6,8,-8)","min":"\nlet c2 () = (6, 8, (-8));;\n","type":"","out":""},{"in":"let c3 () = (8,99,8)","min":"\nlet c3 () = (8, 99, 8);;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":8713,"stop":18230},"type":"eval"},"cursor":9047,"time":1.398068740244127e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5)\nlet g2 () = (6,7,-9) \nlet g3 () = (7,5,5)\n\nlet c1 () = (5,-3,-3)\nlet c2 () = (6,8,-8) \nlet c3 () = (8,99,8) \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let g2 () = (6,7,-9)","min":"\nlet g2 () = (6, 7, (-9));;\n","type":"","out":""},{"in":"let g3 () = (7,5,5)","min":"\nlet g3 () = (7, 5, 5);;\n","type":"","out":""},{"in":"let c1 () = (5,-3,-3)","min":"\nlet c1 () = (5, (-3), (-3));;\n","type":"","out":""},{"in":"let c2 () = (6,8,-8)","min":"\nlet c2 () = (6, 8, (-8));;\n","type":"","out":""},{"in":"let c3 () = (8,99,8)","min":"\nlet c3 () = (8, 99, 8);;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":8939,"stop":18230},"type":"eval"},"cursor":8960,"time":1.398068821163389e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5)\nlet g2 () = (6,7,-9) \nlet g3 () = (7,5,5)\n\nlet c1 () = (5,-3,-3)\nlet c2 () = (6,8,-8) \nlet c3 () = (8,99,8) \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let g2 () = (6,7,-9)","min":"\nlet g2 () = (6, 7, (-9));;\n","type":"","out":""},{"in":"let g3 () = (4,-59,20)","min":"\nlet g3 () = (4, (-59), 20);;\n","type":"","out":""},{"in":"let c1 () = (8,-3,-3)","min":"\nlet c1 () = (8, (-3), (-3));;\n","type":"","out":""},{"in":"let c2 () = (7,8,-8)","min":"\nlet c2 () = (7, 8, (-8));;\n","type":"","out":""},{"in":"let c3 () = (6,99,8)","min":"\nlet c3 () = (6, 99, 8);;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":8938,"stop":18255},"type":"eval"},"cursor":9006,"time":1.398069163877129e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (4,-59,20)\n\nlet c1 () = (8,-3,-3)\nlet c2 () = (7,8,-8) \nlet c3 () = (6,99,8) \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let g2 () = (6,7,-9)","min":"\nlet g2 () = (6, 7, (-9));;\n","type":"","out":""},{"in":"let g3 () = (3,-59,20)","min":"\nlet g3 () = (3, (-59), 20);;\n","type":"","out":""},{"in":"let c1 () = (4,-3,-3)","min":"\nlet c1 () = (4, (-3), (-3));;\n","type":"","out":""},{"in":"let c2 () = (7,0,-8)","min":"\nlet c2 () = (7, 0, (-8));;\n","type":"","out":""},{"in":"let c3 () = (5,99,8)","min":"\nlet c3 () = (5, 99, 8);;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":8938,"stop":18259},"type":"eval"},"cursor":9054,"time":1.398069349367684e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (3,-59,20)\n\nlet c1 () = (4,-3,-3)\nlet c2 () = (7,0,-8) \nlet c3 () = (5,99,8) \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let g3 () = (7,-59,20)","min":"\nlet g3 () = (7, (-59), 20);;\n","type":"","out":""},{"in":"let c1 () = (10,0,0)","min":"\nlet c1 () = (10, 0, 0);;\n","type":"","out":""},{"in":"let c2 () = (11,0,0)","min":"\nlet c2 () = (11, 0, 0);;\n","type":"","out":""},{"in":"let c3 () = (8,0,0)","min":"\nlet c3 () = (8, 0, 0);;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":8972,"stop":18257},"type":"eval"},"cursor":9068,"time":1.398069557658611e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (7,-59,20)\n\nlet c1 () = (10,0,0)\nlet c2 () = (11,0,0) \nlet c3 () = (8,0,0) \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec assoc (d,k,l) = match l with\n| [] -> d\n| (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)","min":"\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | (k',v)::rest -> if k = k' then v else assoc (d, k, rest);;\n","type":"","out":""},{"in":"let _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)])","min":"\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | (k',v)::rest -> if k = k' then v else assoc (d, k, rest);;\n\nlet _ =\n  assoc ((-1), \"william\", [(\"ranjit\", 85); (\"william\", 23); (\"moose\", 44)]);;\n","type":"","out":""},{"in":"let _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)])","min":"\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | (k',v)::rest -> if k = k' then v else assoc (d, k, rest);;\n\nlet _ = assoc ((-1), \"bob\", [(\"ranjit\", 85); (\"william\", 23); (\"moose\", 44)]);;\n","type":"","out":""},{"in":"let removeDuplicates l = \nlet rec helper (seen,rest) = \nmatch rest with \n[] -> seen\n| h::t -> \nlet seen' =\nlet rec addIfUnique item l' = match l' with \n| [] -> \nitem :: seen\n| h' :: t' -> \nif h' = item then seen else addIfUnique item t' in\naddIfUnique h seen in\nlet rest' = t in\nhelper (seen',rest') \nin\nList.rev (helper ([],l))","min":"\nlet removeDuplicates l =\n  let rec helper (seen,rest) =\n    match rest with\n    | [] -> seen\n    | h::t ->\n        let seen' =\n          let rec addIfUnique item l' =\n            match l' with\n            | [] -> item :: seen\n            | h'::t' -> if h' = item then seen else addIfUnique item t' in\n          addIfUnique h seen in\n        let rest' = t in helper (seen', rest') in\n  List.rev (helper ([], l));;\n","type":"","out":""},{"in":"let _ = removeDuplicates [1;6;2;4;12;2;13;6;9]","min":"\nlet removeDuplicates l =\n  let rec helper (seen,rest) =\n    match rest with\n    | [] -> seen\n    | h::t ->\n        let seen' =\n          let rec addIfUnique item l' =\n            match l' with\n            | [] -> item :: seen\n            | h'::t' -> if h' = item then seen else addIfUnique item t' in\n          addIfUnique h seen in\n        let rest' = t in helper (seen', rest') in\n  List.rev (helper ([], l));;\n\nlet _ = removeDuplicates [1; 6; 2; 4; 12; 2; 13; 6; 9];;\n","type":"","out":""},{"in":"let rec wwhile (f,x) = \nlet (x', b') = f x in\nif b' then wwhile (f, x') else x'","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n","type":"","out":""},{"in":"let f x = let xx = x*x*x in (xx, xx < 100) in\nwwhile (f, 2)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet _ = let f x = let xx = (x * x) * x in (xx, (xx < 100)) in wwhile (f, 2);;\n","type":"","out":""},{"in":"let fixpoint (f,x) = \nlet g x = ((f x), (f x) != x) in\nwwhile (g,x)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n","type":"","out":""},{"in":"let g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ =\n  let g x = truncate (1e6 *. (cos (1e-6 *. (float x)))) in fixpoint (g, 0);;\n","type":"","out":""},{"in":"let collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1","min":"\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 1)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 1);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 3)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 3);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 48)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 48);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 107)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 107);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 9001)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 9001);;\n","type":"","out":""},{"in":"type expr = \nVarX\n| VarY\n| Sine     of expr\n| Cosine   of expr\n| Average  of expr * expr\n| Times    of expr * expr\n| Thresh   of expr * expr * expr * expr\t\n| AbsThresh of expr * expr * expr\n| ModThresh of expr * expr * expr","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n","type":"","out":""},{"in":"let rec exprToString e = match e with\n| VarX -> \"x\"\n| VarY -> \"y\"\n| Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n| Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n| Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n^ (exprToString e2) ^ \")/2)\"\n| Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n^ (exprToString e2)\n| Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n^ (exprToString e2) ^ \"?\"\n^ (exprToString e3) ^ \":\"\n^ (exprToString e4) ^ \")\"\n| AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n\"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n^ (exprToString e2) ^ \")?\"\n^ s ^ \":abs(\"\n^ s ^ \"))\"\n| ModThresh (e1, e2, e3) -> \n\"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n^ (exprToString e2) ^ \":\"\n^ (exprToString e3) ^ \")\"","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n","type":"","out":""},{"in":"let sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n","type":"","out":""},{"in":"let sampleExpr10 = ModThresh(VarX,VarY,VarX)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet sampleExpr10 = ModThresh (VarX, VarY, VarX);;\n","type":"","out":""},{"in":"let _ = exprToString sampleExpr10","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet sampleExpr10 = ModThresh (VarX, VarY, VarX);;\n\nlet _ = exprToString sampleExpr10;;\n","type":"","out":""},{"in":"let buildX()                       = VarX","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildX () = VarX;;\n","type":"","out":""},{"in":"let buildY()                       = VarY","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildY () = VarY;;\n","type":"","out":""},{"in":"let buildSine(e)                   = Sine(e)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildSine e = Sine e;;\n","type":"","out":""},{"in":"let buildCosine(e)                 = Cosine(e)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildCosine e = Cosine e;;\n","type":"","out":""},{"in":"let buildAverage(e1,e2)            = Average(e1,e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n","type":"","out":""},{"in":"let buildTimes(e1,e2)              = Times(e1,e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n","type":"","out":""},{"in":"let buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n","type":"","out":""},{"in":"let buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n","type":"","out":""},{"in":"let buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n","type":"","out":""},{"in":"let pi = 4.0 *. atan 1.0","min":"\nlet pi = 4.0 *. (atan 1.0);;\n","type":"","out":""},{"in":"let rec eval (e,x,y) = match e with\n| VarX -> x\n| VarY -> y\n| Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n| Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n| Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n| Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n| Thresh   (e1, e2, e3, e4) \n-> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n(eval (e3, x, y)) else\n(eval (e4, x, y))\n| AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\nif abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\ns else\nabs_float s\n| ModThresh (e1, e2, e3) -> \nif (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n(eval (e2, x, y)) else\n(eval (e3, x, y))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n","type":"","out":""},{"in":"let _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet _ = eval ((Sine (Average (VarX, VarY))), 0.5, (-0.5));;\n","type":"","out":""},{"in":"let _ = eval (Sine(Average(VarX,VarY)),0.3,0.3)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet _ = eval ((Sine (Average (VarX, VarY))), 0.3, 0.3);;\n","type":"","out":""},{"in":"let eval_fn e (x,y) = \nlet rv = eval (e,x,y) in\nassert (-1.0 <= rv && rv <= 1.0);\nrv","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n","type":"","out":""},{"in":"let sampleExpr =\nbuildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\nbuildX()),buildTimes(buildCosine (buildCosine (buildAverage\n(buildTimes (buildY(),buildY()),buildCosine (buildX())))),\nbuildCosine (buildTimes (buildSine (buildCosine\n(buildY())),buildAverage (buildSine (buildX()), buildTimes\n(buildX(),buildX()))))))),buildY())))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet sampleExpr =\n  buildCosine\n    (buildSine\n       (buildTimes\n          ((buildCosine\n              (buildAverage\n                 ((buildCosine (buildX ())),\n                   (buildTimes\n                      ((buildCosine\n                          (buildCosine\n                             (buildAverage\n                                ((buildTimes ((buildY ()), (buildY ()))),\n                                  (buildCosine (buildX ())))))),\n                        (buildCosine\n                           (buildTimes\n                              ((buildSine (buildCosine (buildY ()))),\n                                (buildAverage\n                                   ((buildSine (buildX ())),\n                                     (buildTimes ((buildX ()), (buildX ()))))))))))))),\n            (buildY ()))));;\n","type":"","out":""},{"in":"let sampleExpr2 =\nbuildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet sampleExpr2 =\n  buildThresh\n    ((buildX ()), (buildY ()), (buildSine (buildX ())),\n      (buildCosine (buildY ())));;\n","type":"","out":""},{"in":"let _ = eval (sampleExpr,0.5,0.2)","min":"\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet sampleExpr =\n  buildCosine\n    (buildSine\n       (buildTimes\n          ((buildCosine\n              (buildAverage\n                 ((buildCosine (buildX ())),\n                   (buildTimes\n                      ((buildCosine\n                          (buildCosine\n                             (buildAverage\n                                ((buildTimes ((buildY ()), (buildY ()))),\n                                  (buildCosine (buildX ())))))),\n                        (buildCosine\n                           (buildTimes\n                              ((buildSine (buildCosine (buildY ()))),\n                                (buildAverage\n                                   ((buildSine (buildX ())),\n                                     (buildTimes ((buildX ()), (buildX ()))))))))))))),\n            (buildY ()))));;\n\nlet _ = eval (sampleExpr, 0.5, 0.2);;\n","type":"","out":""},{"in":"let _ = buildY()","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildY () = VarY;;\n\nlet _ = buildY ();;\n","type":"","out":""},{"in":"let rec build (rand, depth) = \nlet r = rand (0,99) in\nif depth = 0 then\nif (r < 50) then\nbuildX()\nelse\nbuildY()\nelse\n\nif (r < 5) then\nbuildX()\nelse if (r < 10) then\nbuildY()\nelse if (r < 30) then \nbuildSine (build (rand, depth - 1))\nelse if (r < 50) then \nbuildCosine (build (rand, depth - 1))\nelse if (r < 60) then \nbuildAverage (build (rand, depth - 1), build (rand, depth - 1))\nelse if (r < 70) then \nbuildTimes (build (rand, depth - 1), build (rand, depth - 1))\nelse if (r < 80) then \nbuildThresh (build (rand, depth - 1), build (rand, depth - 1),\nbuild (rand, depth - 1), build (rand, depth - 1))\nelse if (r < 90) then \nbuildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\nbuild (rand, depth - 1))\nelse \nbuildModThresh (build (rand, depth - 1), build (rand, depth - 1),\nbuild (rand, depth - 1))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n","type":"","out":""},{"in":"let g1 () = (5,5,-5)","min":"\nlet g1 () = (5, 5, (-5));;\n","type":"","out":""},{"in":"let g2 () = (6,7,-9)","min":"\nlet g2 () = (6, 7, (-9));;\n","type":"","out":""},{"in":"let g3 () = (7,-59,20)","min":"\nlet g3 () = (7, (-59), 20);;\n","type":"","out":""},{"in":"let c1 () = (4,0,0)","min":"\nlet c1 () = (4, 0, 0);;\n","type":"","out":""},{"in":"let c2 () = (5,10,0)","min":"\nlet c2 () = (5, 10, 0);;\n","type":"","out":""},{"in":"let c3 () = (5,0,-20)","min":"\nlet c3 () = (5, 0, (-20));;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":0,"stop":18258},"type":"eval"},"cursor":9075,"time":1.398069857374935e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (7,-59,20)\n\nlet c1 () = (4,0,0)\nlet c2 () = (5,10,0) \nlet c3 () = (5,0,-20) \n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec assoc (d,k,l) = match l with\n| [] -> d\n| (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)","min":"\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | (k',v)::rest -> if k = k' then v else assoc (d, k, rest);;\n","type":"","out":""},{"in":"let _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)])","min":"\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | (k',v)::rest -> if k = k' then v else assoc (d, k, rest);;\n\nlet _ =\n  assoc ((-1), \"william\", [(\"ranjit\", 85); (\"william\", 23); (\"moose\", 44)]);;\n","type":"","out":""},{"in":"let _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)])","min":"\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | (k',v)::rest -> if k = k' then v else assoc (d, k, rest);;\n\nlet _ = assoc ((-1), \"bob\", [(\"ranjit\", 85); (\"william\", 23); (\"moose\", 44)]);;\n","type":"","out":""},{"in":"let removeDuplicates l = \nlet rec helper (seen,rest) = \nmatch rest with \n[] -> seen\n| h::t -> \nlet seen' =\nlet rec addIfUnique item l' = match l' with \n| [] -> \nitem :: seen\n| h' :: t' -> \nif h' = item then seen else addIfUnique item t' in\naddIfUnique h seen in\nlet rest' = t in\nhelper (seen',rest') \nin\nList.rev (helper ([],l))","min":"\nlet removeDuplicates l =\n  let rec helper (seen,rest) =\n    match rest with\n    | [] -> seen\n    | h::t ->\n        let seen' =\n          let rec addIfUnique item l' =\n            match l' with\n            | [] -> item :: seen\n            | h'::t' -> if h' = item then seen else addIfUnique item t' in\n          addIfUnique h seen in\n        let rest' = t in helper (seen', rest') in\n  List.rev (helper ([], l));;\n","type":"","out":""},{"in":"let _ = removeDuplicates [1;6;2;4;12;2;13;6;9]","min":"\nlet removeDuplicates l =\n  let rec helper (seen,rest) =\n    match rest with\n    | [] -> seen\n    | h::t ->\n        let seen' =\n          let rec addIfUnique item l' =\n            match l' with\n            | [] -> item :: seen\n            | h'::t' -> if h' = item then seen else addIfUnique item t' in\n          addIfUnique h seen in\n        let rest' = t in helper (seen', rest') in\n  List.rev (helper ([], l));;\n\nlet _ = removeDuplicates [1; 6; 2; 4; 12; 2; 13; 6; 9];;\n","type":"","out":""},{"in":"let rec wwhile (f,x) = \nlet (x', b') = f x in\nif b' then wwhile (f, x') else x'","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n","type":"","out":""},{"in":"let f x = let xx = x*x*x in (xx, xx < 100) in\nwwhile (f, 2)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet _ = let f x = let xx = (x * x) * x in (xx, (xx < 100)) in wwhile (f, 2);;\n","type":"","out":""},{"in":"let fixpoint (f,x) = \nlet g x = ((f x), (f x) != x) in\nwwhile (g,x)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n","type":"","out":""},{"in":"let g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ =\n  let g x = truncate (1e6 *. (cos (1e-6 *. (float x)))) in fixpoint (g, 0);;\n","type":"","out":""},{"in":"let collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1","min":"\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 1)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 1);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 3)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 3);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 48)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 48);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 107)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 107);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 9001)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 9001);;\n","type":"","out":""},{"in":"type expr = \nVarX\n| VarY\n| Sine     of expr\n| Cosine   of expr\n| Average  of expr * expr\n| Times    of expr * expr\n| Thresh   of expr * expr * expr * expr\t\n| AbsThresh of expr * expr * expr\n| ModThresh of expr * expr * expr","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n","type":"","out":""},{"in":"let rec exprToString e = match e with\n| VarX -> \"x\"\n| VarY -> \"y\"\n| Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n| Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n| Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n^ (exprToString e2) ^ \")/2)\"\n| Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n^ (exprToString e2)\n| Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n^ (exprToString e2) ^ \"?\"\n^ (exprToString e3) ^ \":\"\n^ (exprToString e4) ^ \")\"\n| AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n\"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n^ (exprToString e2) ^ \")?\"\n^ s ^ \":abs(\"\n^ s ^ \"))\"\n| ModThresh (e1, e2, e3) -> \n\"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n^ (exprToString e2) ^ \":\"\n^ (exprToString e3) ^ \")\"","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n","type":"","out":""},{"in":"let sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n","type":"","out":""},{"in":"let sampleExpr10 = ModThresh(VarX,VarY,VarX)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet sampleExpr10 = ModThresh (VarX, VarY, VarX);;\n","type":"","out":""},{"in":"let _ = exprToString sampleExpr10","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet sampleExpr10 = ModThresh (VarX, VarY, VarX);;\n\nlet _ = exprToString sampleExpr10;;\n","type":"","out":""},{"in":"let buildX()                       = VarX","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildX () = VarX;;\n","type":"","out":""},{"in":"let buildY()                       = VarY","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildY () = VarY;;\n","type":"","out":""},{"in":"let buildSine(e)                   = Sine(e)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildSine e = Sine e;;\n","type":"","out":""},{"in":"let buildCosine(e)                 = Cosine(e)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildCosine e = Cosine e;;\n","type":"","out":""},{"in":"let buildAverage(e1,e2)            = Average(e1,e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n","type":"","out":""},{"in":"let buildTimes(e1,e2)              = Times(e1,e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n","type":"","out":""},{"in":"let buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n","type":"","out":""},{"in":"let buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n","type":"","out":""},{"in":"let buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n","type":"","out":""},{"in":"let pi = 4.0 *. atan 1.0","min":"\nlet pi = 4.0 *. (atan 1.0);;\n","type":"","out":""},{"in":"let rec eval (e,x,y) = match e with\n| VarX -> x\n| VarY -> y\n| Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n| Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n| Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n| Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n| Thresh   (e1, e2, e3, e4) \n-> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n(eval (e3, x, y)) else\n(eval (e4, x, y))\n| AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\nif abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\ns else\nabs_float s\n| ModThresh (e1, e2, e3) -> \nif (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n(eval (e2, x, y)) else\n(eval (e3, x, y))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n","type":"","out":""},{"in":"let _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet _ = eval ((Sine (Average (VarX, VarY))), 0.5, (-0.5));;\n","type":"","out":""},{"in":"let _ = eval (Sine(Average(VarX,VarY)),0.3,0.3)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet _ = eval ((Sine (Average (VarX, VarY))), 0.3, 0.3);;\n","type":"","out":""},{"in":"let eval_fn e (x,y) = \nlet rv = eval (e,x,y) in\nassert (-1.0 <= rv && rv <= 1.0);\nrv","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n","type":"","out":""},{"in":"let sampleExpr =\nbuildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\nbuildX()),buildTimes(buildCosine (buildCosine (buildAverage\n(buildTimes (buildY(),buildY()),buildCosine (buildX())))),\nbuildCosine (buildTimes (buildSine (buildCosine\n(buildY())),buildAverage (buildSine (buildX()), buildTimes\n(buildX(),buildX()))))))),buildY())))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet sampleExpr =\n  buildCosine\n    (buildSine\n       (buildTimes\n          ((buildCosine\n              (buildAverage\n                 ((buildCosine (buildX ())),\n                   (buildTimes\n                      ((buildCosine\n                          (buildCosine\n                             (buildAverage\n                                ((buildTimes ((buildY ()), (buildY ()))),\n                                  (buildCosine (buildX ())))))),\n                        (buildCosine\n                           (buildTimes\n                              ((buildSine (buildCosine (buildY ()))),\n                                (buildAverage\n                                   ((buildSine (buildX ())),\n                                     (buildTimes ((buildX ()), (buildX ()))))))))))))),\n            (buildY ()))));;\n","type":"","out":""},{"in":"let sampleExpr2 =\nbuildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet sampleExpr2 =\n  buildThresh\n    ((buildX ()), (buildY ()), (buildSine (buildX ())),\n      (buildCosine (buildY ())));;\n","type":"","out":""},{"in":"let _ = eval (sampleExpr,0.5,0.2)","min":"\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet sampleExpr =\n  buildCosine\n    (buildSine\n       (buildTimes\n          ((buildCosine\n              (buildAverage\n                 ((buildCosine (buildX ())),\n                   (buildTimes\n                      ((buildCosine\n                          (buildCosine\n                             (buildAverage\n                                ((buildTimes ((buildY ()), (buildY ()))),\n                                  (buildCosine (buildX ())))))),\n                        (buildCosine\n                           (buildTimes\n                              ((buildSine (buildCosine (buildY ()))),\n                                (buildAverage\n                                   ((buildSine (buildX ())),\n                                     (buildTimes ((buildX ()), (buildX ()))))))))))))),\n            (buildY ()))));;\n\nlet _ = eval (sampleExpr, 0.5, 0.2);;\n","type":"","out":""},{"in":"let _ = buildY()","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildY () = VarY;;\n\nlet _ = buildY ();;\n","type":"","out":""},{"in":"let rec build (rand, depth) = \nlet r = rand (0,99) in\nif depth = 0 then\nif (r < 50) then\nbuildX()\nelse\nbuildY()\nelse\n\nif (r < 5) then\nbuildX()\nelse if (r < 10) then\nbuildY()\nelse if (r < 30) then \nbuildSine (build (rand, depth - 1))\nelse if (r < 50) then \nbuildCosine (build (rand, depth - 1))\nelse if (r < 60) then \nbuildAverage (build (rand, depth - 1), build (rand, depth - 1))\nelse if (r < 70) then \nbuildTimes (build (rand, depth - 1), build (rand, depth - 1))\nelse if (r < 80) then \nbuildThresh (build (rand, depth - 1), build (rand, depth - 1),\nbuild (rand, depth - 1), build (rand, depth - 1))\nelse if (r < 90) then \nbuildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\nbuild (rand, depth - 1))\nelse \nbuildModThresh (build (rand, depth - 1), build (rand, depth - 1),\nbuild (rand, depth - 1))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n","type":"","out":""},{"in":"let g1 () = (5,5,-5)","min":"\nlet g1 () = (5, 5, (-5));;\n","type":"","out":""},{"in":"let g2 () = (6,7,-9)","min":"\nlet g2 () = (6, 7, (-9));;\n","type":"","out":""},{"in":"let g3 () = (7,-59,20)","min":"\nlet g3 () = (7, (-59), 20);;\n","type":"","out":""},{"in":"let c1 () = (6,-7,0)","min":"\nlet c1 () = (6, (-7), 0);;\n","type":"","out":""},{"in":"let c2 () = (5,10,0)","min":"\nlet c2 () = (5, 10, 0);;\n","type":"","out":""},{"in":"let c3 () = (5,0,-20)","min":"\nlet c3 () = (5, 0, (-20));;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":0,"stop":18298},"type":"eval"},"cursor":8017,"time":1.398119242388446e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (7,-59,20)\n\nlet c1 () = (6,-7,0)\nlet c2 () = (5,10,0) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec assoc (d,k,l) = match l with\n| [] -> d\n| (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)","min":"\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | (k',v)::rest -> if k = k' then v else assoc (d, k, rest);;\n","type":"","out":""},{"in":"let _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)])","min":"\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | (k',v)::rest -> if k = k' then v else assoc (d, k, rest);;\n\nlet _ =\n  assoc ((-1), \"william\", [(\"ranjit\", 85); (\"william\", 23); (\"moose\", 44)]);;\n","type":"","out":""},{"in":"let _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)])","min":"\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | (k',v)::rest -> if k = k' then v else assoc (d, k, rest);;\n\nlet _ = assoc ((-1), \"bob\", [(\"ranjit\", 85); (\"william\", 23); (\"moose\", 44)]);;\n","type":"","out":""},{"in":"let removeDuplicates l = \nlet rec helper (seen,rest) = \nmatch rest with \n[] -> seen\n| h::t -> \nlet seen' =\nlet rec addIfUnique item l' = match l' with \n| [] -> \nitem :: seen\n| h' :: t' -> \nif h' = item then seen else addIfUnique item t' in\naddIfUnique h seen in\nlet rest' = t in\nhelper (seen',rest') \nin\nList.rev (helper ([],l))","min":"\nlet removeDuplicates l =\n  let rec helper (seen,rest) =\n    match rest with\n    | [] -> seen\n    | h::t ->\n        let seen' =\n          let rec addIfUnique item l' =\n            match l' with\n            | [] -> item :: seen\n            | h'::t' -> if h' = item then seen else addIfUnique item t' in\n          addIfUnique h seen in\n        let rest' = t in helper (seen', rest') in\n  List.rev (helper ([], l));;\n","type":"","out":""},{"in":"let _ = removeDuplicates [1;6;2;4;12;2;13;6;9]","min":"\nlet removeDuplicates l =\n  let rec helper (seen,rest) =\n    match rest with\n    | [] -> seen\n    | h::t ->\n        let seen' =\n          let rec addIfUnique item l' =\n            match l' with\n            | [] -> item :: seen\n            | h'::t' -> if h' = item then seen else addIfUnique item t' in\n          addIfUnique h seen in\n        let rest' = t in helper (seen', rest') in\n  List.rev (helper ([], l));;\n\nlet _ = removeDuplicates [1; 6; 2; 4; 12; 2; 13; 6; 9];;\n","type":"","out":""},{"in":"let rec wwhile (f,x) = \nlet (x', b') = f x in\nif b' then wwhile (f, x') else x'","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n","type":"","out":""},{"in":"let f x = let xx = x*x*x in (xx, xx < 100) in\nwwhile (f, 2)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet _ = let f x = let xx = (x * x) * x in (xx, (xx < 100)) in wwhile (f, 2);;\n","type":"","out":""},{"in":"let fixpoint (f,x) = \nlet g x = ((f x), (f x) != x) in\nwwhile (g,x)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n","type":"","out":""},{"in":"let g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ =\n  let g x = truncate (1e6 *. (cos (1e-6 *. (float x)))) in fixpoint (g, 0);;\n","type":"","out":""},{"in":"let collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1","min":"\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 1)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 1);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 3)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 3);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 48)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 48);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 107)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 107);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 9001)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 9001);;\n","type":"","out":""},{"in":"type expr = \nVarX\n| VarY\n| Sine     of expr\n| Cosine   of expr\n| Average  of expr * expr\n| Times    of expr * expr\n| Thresh   of expr * expr * expr * expr\t\n| AbsThresh of expr * expr * expr\n| ModThresh of expr * expr * expr","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n","type":"","out":""},{"in":"let rec exprToString e = match e with\n| VarX -> \"x\"\n| VarY -> \"y\"\n| Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n| Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n| Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n^ (exprToString e2) ^ \")/2)\"\n| Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n^ (exprToString e2)\n| Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n^ (exprToString e2) ^ \"?\"\n^ (exprToString e3) ^ \":\"\n^ (exprToString e4) ^ \")\"\n| AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n\"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n^ (exprToString e2) ^ \")?\"\n^ s ^ \":abs(\"\n^ s ^ \"))\"\n| ModThresh (e1, e2, e3) -> \n\"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n^ (exprToString e2) ^ \":\"\n^ (exprToString e3) ^ \")\"","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n","type":"","out":""},{"in":"let sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n","type":"","out":""},{"in":"let sampleExpr10 = ModThresh(VarX,VarY,VarX)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet sampleExpr10 = ModThresh (VarX, VarY, VarX);;\n","type":"","out":""},{"in":"let _ = exprToString sampleExpr10","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet sampleExpr10 = ModThresh (VarX, VarY, VarX);;\n\nlet _ = exprToString sampleExpr10;;\n","type":"","out":""},{"in":"let buildX()                       = VarX","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildX () = VarX;;\n","type":"","out":""},{"in":"let buildY()                       = VarY","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildY () = VarY;;\n","type":"","out":""},{"in":"let buildSine(e)                   = Sine(e)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildSine e = Sine e;;\n","type":"","out":""},{"in":"let buildCosine(e)                 = Cosine(e)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildCosine e = Cosine e;;\n","type":"","out":""},{"in":"let buildAverage(e1,e2)            = Average(e1,e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n","type":"","out":""},{"in":"let buildTimes(e1,e2)              = Times(e1,e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n","type":"","out":""},{"in":"let buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n","type":"","out":""},{"in":"let buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n","type":"","out":""},{"in":"let buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n","type":"","out":""},{"in":"let pi = 4.0 *. atan 1.0","min":"\nlet pi = 4.0 *. (atan 1.0);;\n","type":"","out":""},{"in":"let rec eval (e,x,y) = match e with\n| VarX -> x\n| VarY -> y\n| Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n| Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n| Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n| Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n| Thresh   (e1, e2, e3, e4) \n-> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n(eval (e3, x, y)) else\n(eval (e4, x, y))\n| AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\nif abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\ns else\nabs_float s\n| ModThresh (e1, e2, e3) -> \nif (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n(eval (e2, x, y)) else\n(eval (e3, x, y))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n","type":"","out":""},{"in":"let _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet _ = eval ((Sine (Average (VarX, VarY))), 0.5, (-0.5));;\n","type":"","out":""},{"in":"let _ = eval (Sine(Average(VarX,VarY)),0.3,0.3)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet _ = eval ((Sine (Average (VarX, VarY))), 0.3, 0.3);;\n","type":"","out":""},{"in":"let eval_fn e (x,y) = \nlet rv = eval (e,x,y) in\nassert (-1.0 <= rv && rv <= 1.0);\nrv","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n","type":"","out":""},{"in":"let sampleExpr =\nbuildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\nbuildX()),buildTimes(buildCosine (buildCosine (buildAverage\n(buildTimes (buildY(),buildY()),buildCosine (buildX())))),\nbuildCosine (buildTimes (buildSine (buildCosine\n(buildY())),buildAverage (buildSine (buildX()), buildTimes\n(buildX(),buildX()))))))),buildY())))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet sampleExpr =\n  buildCosine\n    (buildSine\n       (buildTimes\n          ((buildCosine\n              (buildAverage\n                 ((buildCosine (buildX ())),\n                   (buildTimes\n                      ((buildCosine\n                          (buildCosine\n                             (buildAverage\n                                ((buildTimes ((buildY ()), (buildY ()))),\n                                  (buildCosine (buildX ())))))),\n                        (buildCosine\n                           (buildTimes\n                              ((buildSine (buildCosine (buildY ()))),\n                                (buildAverage\n                                   ((buildSine (buildX ())),\n                                     (buildTimes ((buildX ()), (buildX ()))))))))))))),\n            (buildY ()))));;\n","type":"","out":""},{"in":"let sampleExpr2 =\nbuildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet sampleExpr2 =\n  buildThresh\n    ((buildX ()), (buildY ()), (buildSine (buildX ())),\n      (buildCosine (buildY ())));;\n","type":"","out":""},{"in":"let _ = eval (sampleExpr,0.5,0.2)","min":"\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet sampleExpr =\n  buildCosine\n    (buildSine\n       (buildTimes\n          ((buildCosine\n              (buildAverage\n                 ((buildCosine (buildX ())),\n                   (buildTimes\n                      ((buildCosine\n                          (buildCosine\n                             (buildAverage\n                                ((buildTimes ((buildY ()), (buildY ()))),\n                                  (buildCosine (buildX ())))))),\n                        (buildCosine\n                           (buildTimes\n                              ((buildSine (buildCosine (buildY ()))),\n                                (buildAverage\n                                   ((buildSine (buildX ())),\n                                     (buildTimes ((buildX ()), (buildX ()))))))))))))),\n            (buildY ()))));;\n\nlet _ = eval (sampleExpr, 0.5, 0.2);;\n","type":"","out":""},{"in":"let _ = buildY()","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildY () = VarY;;\n\nlet _ = buildY ();;\n","type":"","out":""},{"in":"let rec build (rand, depth) = \nlet r = rand (0,99) in\nif depth = 0 then\nif (r < 50) then\nbuildX()\nelse\nbuildY()\nelse\n\nif (r < 5) then\nbuildX()\nelse if (r < 10) then\nbuildY()\nelse if (r < 30) then \nbuildSine (build (rand, depth - 1))\nelse if (r < 50) then \nbuildCosine (build (rand, depth - 1))\nelse if (r < 60) then \nbuildAverage (build (rand, depth - 1), build (rand, depth - 1))\nelse if (r < 70) then \nbuildTimes (build (rand, depth - 1), build (rand, depth - 1))\nelse if (r < 80) then \nbuildThresh (build (rand, depth - 1), build (rand, depth - 1),\nbuild (rand, depth - 1), build (rand, depth - 1))\nelse if (r < 90) then \nbuildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\nbuild (rand, depth - 1))\nelse \nbuildModThresh (build (rand, depth - 1), build (rand, depth - 1),\nbuild (rand, depth - 1))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n","type":"","out":""},{"in":"let g1 () = (5,5,-5)","min":"\nlet g1 () = (5, 5, (-5));;\n","type":"","out":""},{"in":"let g2 () = (6,7,-9)","min":"\nlet g2 () = (6, 7, (-9));;\n","type":"","out":""},{"in":"let g3 () = (7,-59,202)","min":"\nlet g3 () = (7, (-59), 202);;\n","type":"","out":""},{"in":"let c1 () = (6,-7,0)","min":"\nlet c1 () = (6, (-7), 0);;\n","type":"","out":""},{"in":"let c2 () = (5,10,0)","min":"\nlet c2 () = (5, 10, 0);;\n","type":"","out":""},{"in":"let c3 () = (5,0,-20)","min":"\nlet c3 () = (5, 0, (-20));;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":0,"stop":18328},"type":"eval"},"cursor":9009,"time":1.398122624164393e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (7,-59,202)\n\nlet c1 () = (6,-7,0)\nlet c2 () = (5,10,0) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let g3 () = (5,-59,202)","min":"\nlet g3 () = (5, (-59), 202);;\n","type":"","out":""},{"in":"let c1 () = (6,-7,0)","min":"\nlet c1 () = (6, (-7), 0);;\n","type":"","out":""},{"in":"let c2 () = (5,10,0)","min":"\nlet c2 () = (5, 10, 0);;\n","type":"","out":""},{"in":"let c3 () = (5,0,-20)","min":"\nlet c3 () = (5, 0, (-20));;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":8972,"stop":18352},"type":"eval"},"cursor":9158,"time":1.398122688244083e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,-59,202)\n\nlet c1 () = (6,-7,0)\nlet c2 () = (5,10,0) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let g3 () = (14,-59,202)","min":"\nlet g3 () = (14, (-59), 202);;\n","type":"","out":""}],"event":{"region":{"start":8972,"stop":9011},"type":"eval"},"cursor":9002,"time":1.398122736642611e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (14,-59,202)\n\nlet c1 () = (6,-7,0)\nlet c2 () = (5,10,0) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let g3 () = (14,-59,202)","min":"\nlet g3 () = (14, (-59), 202);;\n","type":"","out":""},{"in":"let c1 () = (6,-7,0)","min":"\nlet c1 () = (6, (-7), 0);;\n","type":"","out":""},{"in":"let c2 () = (5,10,0)","min":"\nlet c2 () = (5, 10, 0);;\n","type":"","out":""},{"in":"let c3 () = (5,0,-20)","min":"\nlet c3 () = (5, 0, (-20));;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":8987,"stop":18353},"type":"eval"},"cursor":9002,"time":1.398122738554174e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (14,-59,202)\n\nlet c1 () = (6,-7,0)\nlet c2 () = (5,10,0) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let g3 () = (4,-59,202)","min":"\nlet g3 () = (4, (-59), 202);;\n","type":"","out":""},{"in":"let c1 () = (6,-7,0)","min":"\nlet c1 () = (6, (-7), 0);;\n","type":"","out":""},{"in":"let c2 () = (5,10,0)","min":"\nlet c2 () = (5, 10, 0);;\n","type":"","out":""},{"in":"let c3 () = (5,0,-20)","min":"\nlet c3 () = (5, 0, (-20));;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":8972,"stop":18352},"type":"eval"},"cursor":9001,"time":1.398122786083788e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (4,-59,202)\n\nlet c1 () = (6,-7,0)\nlet c2 () = (5,10,0) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let g3 () = (5,-59,202)","min":"\nlet g3 () = (5, (-59), 202);;\n","type":"","out":""}],"event":{"region":{"start":8972,"stop":9010},"type":"eval"},"cursor":9001,"time":1.398122817440886e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,-59,202)\n\nlet c1 () = (6,-7,0)\nlet c2 () = (5,10,0) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let g3 () = (5,-59,202)","min":"\nlet g3 () = (5, (-59), 202);;\n","type":"","out":""},{"in":"let c1 () = (6,-7,0)","min":"\nlet c1 () = (6, (-7), 0);;\n","type":"","out":""},{"in":"let c2 () = (5,10,0)","min":"\nlet c2 () = (5, 10, 0);;\n","type":"","out":""},{"in":"let c3 () = (5,0,-20)","min":"\nlet c3 () = (5, 0, (-20));;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":8987,"stop":18352},"type":"eval"},"cursor":9001,"time":1.398122821924384e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,-59,202)\n\nlet c1 () = (6,-7,0)\nlet c2 () = (5,10,0) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let g3 () = (6,-59,202)","min":"\nlet g3 () = (6, (-59), 202);;\n","type":"","out":""},{"in":"let c1 () = (6,-7,0)","min":"\nlet c1 () = (6, (-7), 0);;\n","type":"","out":""},{"in":"let c2 () = (5,10,0)","min":"\nlet c2 () = (5, 10, 0);;\n","type":"","out":""},{"in":"let c3 () = (5,0,-20)","min":"\nlet c3 () = (5, 0, (-20));;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":8972,"stop":18352},"type":"eval"},"cursor":9001,"time":1.398122863505586e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (6,-59,202)\n\nlet c1 () = (6,-7,0)\nlet c2 () = (5,10,0) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let g3 () = (6,-598,202)","min":"\nlet g3 () = (6, (-598), 202);;\n","type":"","out":""},{"in":"let c1 () = (6,-7,0)","min":"\nlet c1 () = (6, (-7), 0);;\n","type":"","out":""},{"in":"let c2 () = (5,10,0)","min":"\nlet c2 () = (5, 10, 0);;\n","type":"","out":""},{"in":"let c3 () = (5,0,-20)","min":"\nlet c3 () = (5, 0, (-20));;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":8972,"stop":18353},"type":"eval"},"cursor":9006,"time":1.398122924025778e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (6,-598,202)\n\nlet c1 () = (6,-7,0)\nlet c2 () = (5,10,0) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let g3 () = (5,-598,202)","min":"\nlet g3 () = (5, (-598), 202);;\n","type":"","out":""},{"in":"let c1 () = (6,-7,0)","min":"\nlet c1 () = (6, (-7), 0);;\n","type":"","out":""},{"in":"let c2 () = (5,10,0)","min":"\nlet c2 () = (5, 10, 0);;\n","type":"","out":""},{"in":"let c3 () = (5,0,-20)","min":"\nlet c3 () = (5, 0, (-20));;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":8972,"stop":18353},"type":"eval"},"cursor":9001,"time":1.39812296578956e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,-598,202)\n\nlet c1 () = (6,-7,0)\nlet c2 () = (5,10,0) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let g3 () = (5,88,202)","min":"\nlet g3 () = (5, 88, 202);;\n","type":"","out":""},{"in":"let c1 () = (6,-7,0)","min":"\nlet c1 () = (6, (-7), 0);;\n","type":"","out":""},{"in":"let c2 () = (5,10,0)","min":"\nlet c2 () = (5, 10, 0);;\n","type":"","out":""},{"in":"let c3 () = (5,0,-20)","min":"\nlet c3 () = (5, 0, (-20));;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":8972,"stop":18351},"type":"eval"},"cursor":9004,"time":1.398122992635693e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,88,202)\n\nlet c1 () = (6,-7,0)\nlet c2 () = (5,10,0) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let c1 () = (5,88,202)","min":"\nlet c1 () = (5, 88, 202);;\n","type":"","out":""},{"in":"let c2 () = (5,10,0)","min":"\nlet c2 () = (5, 10, 0);;\n","type":"","out":""},{"in":"let c3 () = (5,0,-20)","min":"\nlet c3 () = (5, 0, (-20));;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":9009,"stop":18362},"type":"eval"},"cursor":9042,"time":1.398123046947753e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,88,202) (*XXXX*)\n\nlet c1 () = (5,88,202)\nlet c2 () = (5,10,0) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let c1 () = (5,5,-5)","min":"\nlet c1 () = (5, 5, (-5));;\n","type":"","out":""},{"in":"let c2 () = (6,7,-9)","min":"\nlet c2 () = (6, 7, (-9));;\n","type":"","out":""},{"in":"let c3 () = (5,88,202)","min":"\nlet c3 () = (5, 88, 202);;\n","type":"","out":""}],"event":{"region":{"start":9009,"stop":18517},"type":"eval"},"cursor":9102,"time":1.398123156589804e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,88,202) (*XXXX*)\n\nlet c1 () = (5,5,-5)\nlet c2 () = (6,7,-9) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,88,202) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g2 () = (6,7,-9) (*XXXXXXXXX*)\n  let g3 () = (5,88,202) (*XXXX*)\n\n  let c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXX\n\nXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXX*)\n  *)\n\n  let makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n  (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\n  let rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n  (*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX*)\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX*)\n\n  let rec ffor (low,high,f) = \n  if low > high then () else \n  let _ = f low in \n  ffor (low+1,high,f)\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX*)\n\n  let emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n  ffor (-n, n, \n  fun ix ->\n  ffor (-n, n, \n  fun iy ->\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let x = toReal(ix,n) in\n  let y = toReal(iy,n) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let z = f (x,y) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let iz = toIntensity(z) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  output_char chan (char_of_int iz))) in \n  close_out chan;\n  ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n  ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n  let doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f,n,name)\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXX*)\n\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX*)\n  let emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n  ffor (-n, n, \n  fun ix ->\n  ffor (-n, n, \n  fun iy ->\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let x = toReal(ix,n) in\n  let y = toReal(iy,n) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let z1 = f1 (x,y) in\n  let z2 = f2 (x,y) in\n  let z3 = f3 (x,y) in\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let iz1 = toIntensity(z1) in\n  let iz2 = toIntensity(z2) in\n  let iz3 = toIntensity(z3) in\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  output_char chan (char_of_int iz1);\n  output_char chan (char_of_int iz2);\n  output_char chan (char_of_int iz3);\n  )) in  \n  close_out chan;\n  ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n  ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXX*)\n  let doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1,f2,f3,n,name)\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n  type test = unit -> string\n\n  let key = \"\" (*XXXXXXXX*)\n  let prefix130 = \"130\" (*XXXXXXXX*)\n  let print130 s = print_string (prefix130^\">>\"^s)\n\n  exception ErrorCode of string\n\n  exception TestException\n\n  type result = Pass | Fail | ErrorCode of string\n\n  let score = ref 0\n  let max = ref 0\n  let timeout = 300\n\n  let runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\n  let testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n  runWTimeout(testGood,0,1,5) = Pass &&  \n  runWTimeout(testBad,0,1,5) = Fail &&  \n  runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n  runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\n  let runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n  match runWTimeout(f,arg,out,timeout) with \n  Pass -> (score := !score + points; \"[pass]\")\n  | Fail -> \"[fail]\"\n  | ErrorCode e -> \"[error: \"^e^\"]\"  in\n  name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let explode s = \n  let rec _exp i = \n  if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n  _exp 0\n\n  let implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\n  let drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\n  let eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\n  let mkTest f x y name = runTest ((f, x, y), 1, name)\n\n  let badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\n  let scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\n  let sampleTests =\n  [\n  (fun () -> mkTest\n  assoc\n  (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n  23\n  \"sample: assoc 1\"\n  );\n  (fun () -> mkTest \n  assoc\n  (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n  (-1)\n  \"sample: assoc 2\"\n  ); \n  (fun () -> mkTest \n  removeDuplicates\n  [1;6;2;4;12;2;13;6;9]\n  [1;6;2;4;12;13;9]\n  \"sample: removeDuplicates 2\"\n  );\n  (fun () -> mkTest \n  removeDuplicates\n  [1;1;1]\n  [1]\n  \"sample: removeDuplicates 2\"\n  );\n\n  (fun () -> mkTest \n  wwhile \n  ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n  512 \n  \"sample: wwhile 1\"\n  ); \n  (fun () -> mkTest \n  fixpoint\n  ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n  739085\n  \"sample: fixpoint 1\"\n  ); \n\n  (fun () -> mkTest \n  emitGrayscale\n  (eval_fn sampleExpr, 150,\"sample\")\n  ()\n  \"sample: eval_fn 1: manual\"\n  ); \n  (fun () -> mkTest \n  emitGrayscale\n  (eval_fn sampleExpr2, 150,\"sample2\")\n  ()\n  \"sample: eval_fn 2: manual\"\n  );\n\n  (fun () -> mkTest \n  (fun () -> doRandomGray (g1 ()))\n  ()\n  ()\n  \"sample: gray 1 : manual\"\n  );\n  (fun () -> mkTest \n  (fun () -> doRandomGray (g2 ()))\n  ()\n  ()\n  \"sample: gray 2 : manual\"\n  );\n  (fun () -> mkTest \n  (fun () -> doRandomGray (g3 ()))\n  ()\n  ()\n  \"sample: gray 3 : manual\"\n  );\n\n  (fun () -> mkTest \n  (fun () -> doRandomColor (c1 ()))\n  ()\n  ()\n  \"sample: color 1 : manual\"\n  );\n  (fun () -> mkTest \n  (fun () -> doRandomColor (c2 ()))\n  ()\n  ()\n  \"sample: color 2 : manual\"\n  );\n  (fun () -> mkTest \n  (fun () -> doRandomColor (c3 ()))\n  ()\n  ()\n  \"sample: color 3 : manual\"\n  )] \n\n  let doTest f = \n  try f () with ex -> \n  Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n  (Printexc.to_string ex)\n\n  let _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n  (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let c3 () = (5,88,202)","min":"\nlet c3 () = (5, 88, 202);;\n","type":"","out":""}],"event":{"region":{"start":9081,"stop":18517},"type":"eval"},"cursor":9102,"time":1.398123161255231e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,88,202) (*XXXX*)\n\nlet c1 () = (5,5,-5)\nlet c2 () = (6,7,-9) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,88,202) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g2 () = (6,7,-9) (*XXXXXXXXX*)\n  let g3 () = (5,88,202) (*XXXX*)\n\n  let c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXX\n\nXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXX*)\n  *)\n\n  let makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n  (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\n  let rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n  (*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX*)\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX*)\n\n  let rec ffor (low,high,f) = \n  if low > high then () else \n  let _ = f low in \n  ffor (low+1,high,f)\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX*)\n\n  let emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n  ffor (-n, n, \n  fun ix ->\n  ffor (-n, n, \n  fun iy ->\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let x = toReal(ix,n) in\n  let y = toReal(iy,n) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let z = f (x,y) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let iz = toIntensity(z) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  output_char chan (char_of_int iz))) in \n  close_out chan;\n  ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n  ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n  let doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f,n,name)\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXX*)\n\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX*)\n  let emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n  ffor (-n, n, \n  fun ix ->\n  ffor (-n, n, \n  fun iy ->\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let x = toReal(ix,n) in\n  let y = toReal(iy,n) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let z1 = f1 (x,y) in\n  let z2 = f2 (x,y) in\n  let z3 = f3 (x,y) in\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let iz1 = toIntensity(z1) in\n  let iz2 = toIntensity(z2) in\n  let iz3 = toIntensity(z3) in\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  output_char chan (char_of_int iz1);\n  output_char chan (char_of_int iz2);\n  output_char chan (char_of_int iz3);\n  )) in  \n  close_out chan;\n  ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n  ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXX*)\n  let doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1,f2,f3,n,name)\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n  type test = unit -> string\n\n  let key = \"\" (*XXXXXXXX*)\n  let prefix130 = \"130\" (*XXXXXXXX*)\n  let print130 s = print_string (prefix130^\">>\"^s)\n\n  exception ErrorCode of string\n\n  exception TestException\n\n  type result = Pass | Fail | ErrorCode of string\n\n  let score = ref 0\n  let max = ref 0\n  let timeout = 300\n\n  let runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\n  let testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n  runWTimeout(testGood,0,1,5) = Pass &&  \n  runWTimeout(testBad,0,1,5) = Fail &&  \n  runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n  runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\n  let runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n  match runWTimeout(f,arg,out,timeout) with \n  Pass -> (score := !score + points; \"[pass]\")\n  | Fail -> \"[fail]\"\n  | ErrorCode e -> \"[error: \"^e^\"]\"  in\n  name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let explode s = \n  let rec _exp i = \n  if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n  _exp 0\n\n  let implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\n  let drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\n  let eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\n  let mkTest f x y name = runTest ((f, x, y), 1, name)\n\n  let badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\n  let scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\n  let sampleTests =\n  [\n  (fun () -> mkTest\n  assoc\n  (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n  23\n  \"sample: assoc 1\"\n  );\n  (fun () -> mkTest \n  assoc\n  (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n  (-1)\n  \"sample: assoc 2\"\n  ); \n  (fun () -> mkTest \n  removeDuplicates\n  [1;6;2;4;12;2;13;6;9]\n  [1;6;2;4;12;13;9]\n  \"sample: removeDuplicates 2\"\n  );\n  (fun () -> mkTest \n  removeDuplicates\n  [1;1;1]\n  [1]\n  \"sample: removeDuplicates 2\"\n  );\n\n  (fun () -> mkTest \n  wwhile \n  ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n  512 \n  \"sample: wwhile 1\"\n  ); \n  (fun () -> mkTest \n  fixpoint\n  ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n  739085\n  \"sample: fixpoint 1\"\n  ); \n\n  (fun () -> mkTest \n  emitGrayscale\n  (eval_fn sampleExpr, 150,\"sample\")\n  ()\n  \"sample: eval_fn 1: manual\"\n  ); \n  (fun () -> mkTest \n  emitGrayscale\n  (eval_fn sampleExpr2, 150,\"sample2\")\n  ()\n  \"sample: eval_fn 2: manual\"\n  );\n\n  (fun () -> mkTest \n  (fun () -> doRandomGray (g1 ()))\n  ()\n  ()\n  \"sample: gray 1 : manual\"\n  );\n  (fun () -> mkTest \n  (fun () -> doRandomGray (g2 ()))\n  ()\n  ()\n  \"sample: gray 2 : manual\"\n  );\n  (fun () -> mkTest \n  (fun () -> doRandomGray (g3 ()))\n  ()\n  ()\n  \"sample: gray 3 : manual\"\n  );\n\n  (fun () -> mkTest \n  (fun () -> doRandomColor (c1 ()))\n  ()\n  ()\n  \"sample: color 1 : manual\"\n  );\n  (fun () -> mkTest \n  (fun () -> doRandomColor (c2 ()))\n  ()\n  ()\n  \"sample: color 2 : manual\"\n  );\n  (fun () -> mkTest \n  (fun () -> doRandomColor (c3 ()))\n  ()\n  ()\n  \"sample: color 3 : manual\"\n  )] \n\n  let doTest f = \n  try f () with ex -> \n  Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n  (Printexc.to_string ex)\n\n  let _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n  (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let c3 () = (5,88,202)","min":"\nlet c3 () = (5, 88, 202);;\n","type":"","out":""}],"event":{"region":{"start":9081,"stop":18517},"type":"eval"},"cursor":9102,"time":1.398123162349306e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,88,202) (*XXXX*)\n\nlet c1 () = (5,5,-5)\nlet c2 () = (6,7,-9) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,88,202) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g2 () = (6,7,-9) (*XXXXXXXXX*)\n  let g3 () = (5,88,202) (*XXXX*)\n\n  let c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXX\n\nXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXX*)\n  *)\n\n  let makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n  (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\n  let rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n  (*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX*)\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX*)\n\n  let rec ffor (low,high,f) = \n  if low > high then () else \n  let _ = f low in \n  ffor (low+1,high,f)\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX*)\n\n  let emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n  ffor (-n, n, \n  fun ix ->\n  ffor (-n, n, \n  fun iy ->\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let x = toReal(ix,n) in\n  let y = toReal(iy,n) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let z = f (x,y) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let iz = toIntensity(z) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  output_char chan (char_of_int iz))) in \n  close_out chan;\n  ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n  ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n  let doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f,n,name)\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXX*)\n\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX*)\n  let emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n  ffor (-n, n, \n  fun ix ->\n  ffor (-n, n, \n  fun iy ->\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let x = toReal(ix,n) in\n  let y = toReal(iy,n) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let z1 = f1 (x,y) in\n  let z2 = f2 (x,y) in\n  let z3 = f3 (x,y) in\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let iz1 = toIntensity(z1) in\n  let iz2 = toIntensity(z2) in\n  let iz3 = toIntensity(z3) in\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  output_char chan (char_of_int iz1);\n  output_char chan (char_of_int iz2);\n  output_char chan (char_of_int iz3);\n  )) in  \n  close_out chan;\n  ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n  ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXX*)\n  let doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1,f2,f3,n,name)\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n  type test = unit -> string\n\n  let key = \"\" (*XXXXXXXX*)\n  let prefix130 = \"130\" (*XXXXXXXX*)\n  let print130 s = print_string (prefix130^\">>\"^s)\n\n  exception ErrorCode of string\n\n  exception TestException\n\n  type result = Pass | Fail | ErrorCode of string\n\n  let score = ref 0\n  let max = ref 0\n  let timeout = 300\n\n  let runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\n  let testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n  runWTimeout(testGood,0,1,5) = Pass &&  \n  runWTimeout(testBad,0,1,5) = Fail &&  \n  runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n  runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\n  let runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n  match runWTimeout(f,arg,out,timeout) with \n  Pass -> (score := !score + points; \"[pass]\")\n  | Fail -> \"[fail]\"\n  | ErrorCode e -> \"[error: \"^e^\"]\"  in\n  name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let explode s = \n  let rec _exp i = \n  if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n  _exp 0\n\n  let implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\n  let drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\n  let eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\n  let mkTest f x y name = runTest ((f, x, y), 1, name)\n\n  let badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\n  let scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\n  let sampleTests =\n  [\n  (fun () -> mkTest\n  assoc\n  (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n  23\n  \"sample: assoc 1\"\n  );\n  (fun () -> mkTest \n  assoc\n  (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n  (-1)\n  \"sample: assoc 2\"\n  ); \n  (fun () -> mkTest \n  removeDuplicates\n  [1;6;2;4;12;2;13;6;9]\n  [1;6;2;4;12;13;9]\n  \"sample: removeDuplicates 2\"\n  );\n  (fun () -> mkTest \n  removeDuplicates\n  [1;1;1]\n  [1]\n  \"sample: removeDuplicates 2\"\n  );\n\n  (fun () -> mkTest \n  wwhile \n  ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n  512 \n  \"sample: wwhile 1\"\n  ); \n  (fun () -> mkTest \n  fixpoint\n  ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n  739085\n  \"sample: fixpoint 1\"\n  ); \n\n  (fun () -> mkTest \n  emitGrayscale\n  (eval_fn sampleExpr, 150,\"sample\")\n  ()\n  \"sample: eval_fn 1: manual\"\n  ); \n  (fun () -> mkTest \n  emitGrayscale\n  (eval_fn sampleExpr2, 150,\"sample2\")\n  ()\n  \"sample: eval_fn 2: manual\"\n  );\n\n  (fun () -> mkTest \n  (fun () -> doRandomGray (g1 ()))\n  ()\n  ()\n  \"sample: gray 1 : manual\"\n  );\n  (fun () -> mkTest \n  (fun () -> doRandomGray (g2 ()))\n  ()\n  ()\n  \"sample: gray 2 : manual\"\n  );\n  (fun () -> mkTest \n  (fun () -> doRandomGray (g3 ()))\n  ()\n  ()\n  \"sample: gray 3 : manual\"\n  );\n\n  (fun () -> mkTest \n  (fun () -> doRandomColor (c1 ()))\n  ()\n  ()\n  \"sample: color 1 : manual\"\n  );\n  (fun () -> mkTest \n  (fun () -> doRandomColor (c2 ()))\n  ()\n  ()\n  \"sample: color 2 : manual\"\n  );\n  (fun () -> mkTest \n  (fun () -> doRandomColor (c3 ()))\n  ()\n  ()\n  \"sample: color 3 : manual\"\n  )] \n\n  let doTest f = \n  try f () with ex -> \n  Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n  (Printexc.to_string ex)\n\n  let _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n  (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let c3 () = (5,88,202)","min":"\nlet c3 () = (5, 88, 202);;\n","type":"","out":""}],"event":{"region":{"start":9081,"stop":18517},"type":"eval"},"cursor":9176,"time":1.398123165061383e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,88,202) (*XXXX*)\n\nlet c1 () = (5,5,-5)\nlet c2 () = (6,7,-9) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,88,202) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g2 () = (6,7,-9) (*XXXXXXXXX*)\n  let g3 () = (5,88,202) (*XXXX*)\n\n  let c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXX\n\nXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXX*)\n  *)\n\n  let makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n  (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\n  let rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n  (*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX*)\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX*)\n\n  let rec ffor (low,high,f) = \n  if low > high then () else \n  let _ = f low in \n  ffor (low+1,high,f)\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX*)\n\n  let emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n  ffor (-n, n, \n  fun ix ->\n  ffor (-n, n, \n  fun iy ->\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let x = toReal(ix,n) in\n  let y = toReal(iy,n) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let z = f (x,y) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let iz = toIntensity(z) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  output_char chan (char_of_int iz))) in \n  close_out chan;\n  ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n  ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n  let doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f,n,name)\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXX*)\n\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX*)\n  let emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n  ffor (-n, n, \n  fun ix ->\n  ffor (-n, n, \n  fun iy ->\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let x = toReal(ix,n) in\n  let y = toReal(iy,n) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let z1 = f1 (x,y) in\n  let z2 = f2 (x,y) in\n  let z3 = f3 (x,y) in\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let iz1 = toIntensity(z1) in\n  let iz2 = toIntensity(z2) in\n  let iz3 = toIntensity(z3) in\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  output_char chan (char_of_int iz1);\n  output_char chan (char_of_int iz2);\n  output_char chan (char_of_int iz3);\n  )) in  \n  close_out chan;\n  ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n  ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXX*)\n  let doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1,f2,f3,n,name)\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n  type test = unit -> string\n\n  let key = \"\" (*XXXXXXXX*)\n  let prefix130 = \"130\" (*XXXXXXXX*)\n  let print130 s = print_string (prefix130^\">>\"^s)\n\n  exception ErrorCode of string\n\n  exception TestException\n\n  type result = Pass | Fail | ErrorCode of string\n\n  let score = ref 0\n  let max = ref 0\n  let timeout = 300\n\n  let runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\n  let testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n  runWTimeout(testGood,0,1,5) = Pass &&  \n  runWTimeout(testBad,0,1,5) = Fail &&  \n  runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n  runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\n  let runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n  match runWTimeout(f,arg,out,timeout) with \n  Pass -> (score := !score + points; \"[pass]\")\n  | Fail -> \"[fail]\"\n  | ErrorCode e -> \"[error: \"^e^\"]\"  in\n  name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let explode s = \n  let rec _exp i = \n  if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n  _exp 0\n\n  let implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\n  let drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\n  let eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\n  let mkTest f x y name = runTest ((f, x, y), 1, name)\n\n  let badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\n  let scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\n  let sampleTests =\n  [\n  (fun () -> mkTest\n  assoc\n  (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n  23\n  \"sample: assoc 1\"\n  );\n  (fun () -> mkTest \n  assoc\n  (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n  (-1)\n  \"sample: assoc 2\"\n  ); \n  (fun () -> mkTest \n  removeDuplicates\n  [1;6;2;4;12;2;13;6;9]\n  [1;6;2;4;12;13;9]\n  \"sample: removeDuplicates 2\"\n  );\n  (fun () -> mkTest \n  removeDuplicates\n  [1;1;1]\n  [1]\n  \"sample: removeDuplicates 2\"\n  );\n\n  (fun () -> mkTest \n  wwhile \n  ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n  512 \n  \"sample: wwhile 1\"\n  ); \n  (fun () -> mkTest \n  fixpoint\n  ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n  739085\n  \"sample: fixpoint 1\"\n  ); \n\n  (fun () -> mkTest \n  emitGrayscale\n  (eval_fn sampleExpr, 150,\"sample\")\n  ()\n  \"sample: eval_fn 1: manual\"\n  ); \n  (fun () -> mkTest \n  emitGrayscale\n  (eval_fn sampleExpr2, 150,\"sample2\")\n  ()\n  \"sample: eval_fn 2: manual\"\n  );\n\n  (fun () -> mkTest \n  (fun () -> doRandomGray (g1 ()))\n  ()\n  ()\n  \"sample: gray 1 : manual\"\n  );\n  (fun () -> mkTest \n  (fun () -> doRandomGray (g2 ()))\n  ()\n  ()\n  \"sample: gray 2 : manual\"\n  );\n  (fun () -> mkTest \n  (fun () -> doRandomGray (g3 ()))\n  ()\n  ()\n  \"sample: gray 3 : manual\"\n  );\n\n  (fun () -> mkTest \n  (fun () -> doRandomColor (c1 ()))\n  ()\n  ()\n  \"sample: color 1 : manual\"\n  );\n  (fun () -> mkTest \n  (fun () -> doRandomColor (c2 ()))\n  ()\n  ()\n  \"sample: color 2 : manual\"\n  );\n  (fun () -> mkTest \n  (fun () -> doRandomColor (c3 ()))\n  ()\n  ()\n  \"sample: color 3 : manual\"\n  )] \n\n  let doTest f = \n  try f () with ex -> \n  Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n  (Printexc.to_string ex)\n\n  let _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n  (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let c3 () = (5,88,202)","min":"\nlet c3 () = (5, 88, 202);;\n","type":"","out":""}],"event":{"region":{"start":9081,"stop":18517},"type":"eval"},"cursor":9176,"time":1.398123166060845e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,88,202) (*XXXX*)\n\nlet c1 () = (5,5,-5)\nlet c2 () = (6,7,-9) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,88,202) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g2 () = (6,7,-9) (*XXXXXXXXX*)\n  let g3 () = (5,88,202) (*XXXX*)\n\n  let c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXX\n\nXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXX*)\n  *)\n\n  let makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n  (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\n  let rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n  (*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX*)\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX*)\n\n  let rec ffor (low,high,f) = \n  if low > high then () else \n  let _ = f low in \n  ffor (low+1,high,f)\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX*)\n\n  let emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n  ffor (-n, n, \n  fun ix ->\n  ffor (-n, n, \n  fun iy ->\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let x = toReal(ix,n) in\n  let y = toReal(iy,n) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let z = f (x,y) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let iz = toIntensity(z) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  output_char chan (char_of_int iz))) in \n  close_out chan;\n  ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n  ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n  let doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f,n,name)\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXX*)\n\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX*)\n  let emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n  ffor (-n, n, \n  fun ix ->\n  ffor (-n, n, \n  fun iy ->\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let x = toReal(ix,n) in\n  let y = toReal(iy,n) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let z1 = f1 (x,y) in\n  let z2 = f2 (x,y) in\n  let z3 = f3 (x,y) in\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let iz1 = toIntensity(z1) in\n  let iz2 = toIntensity(z2) in\n  let iz3 = toIntensity(z3) in\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  output_char chan (char_of_int iz1);\n  output_char chan (char_of_int iz2);\n  output_char chan (char_of_int iz3);\n  )) in  \n  close_out chan;\n  ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n  ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXX*)\n  let doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1,f2,f3,n,name)\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n  type test = unit -> string\n\n  let key = \"\" (*XXXXXXXX*)\n  let prefix130 = \"130\" (*XXXXXXXX*)\n  let print130 s = print_string (prefix130^\">>\"^s)\n\n  exception ErrorCode of string\n\n  exception TestException\n\n  type result = Pass | Fail | ErrorCode of string\n\n  let score = ref 0\n  let max = ref 0\n  let timeout = 300\n\n  let runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\n  let testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n  runWTimeout(testGood,0,1,5) = Pass &&  \n  runWTimeout(testBad,0,1,5) = Fail &&  \n  runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n  runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\n  let runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n  match runWTimeout(f,arg,out,timeout) with \n  Pass -> (score := !score + points; \"[pass]\")\n  | Fail -> \"[fail]\"\n  | ErrorCode e -> \"[error: \"^e^\"]\"  in\n  name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let explode s = \n  let rec _exp i = \n  if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n  _exp 0\n\n  let implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\n  let drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\n  let eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\n  let mkTest f x y name = runTest ((f, x, y), 1, name)\n\n  let badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\n  let scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\n  let sampleTests =\n  [\n  (fun () -> mkTest\n  assoc\n  (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n  23\n  \"sample: assoc 1\"\n  );\n  (fun () -> mkTest \n  assoc\n  (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n  (-1)\n  \"sample: assoc 2\"\n  ); \n  (fun () -> mkTest \n  removeDuplicates\n  [1;6;2;4;12;2;13;6;9]\n  [1;6;2;4;12;13;9]\n  \"sample: removeDuplicates 2\"\n  );\n  (fun () -> mkTest \n  removeDuplicates\n  [1;1;1]\n  [1]\n  \"sample: removeDuplicates 2\"\n  );\n\n  (fun () -> mkTest \n  wwhile \n  ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n  512 \n  \"sample: wwhile 1\"\n  ); \n  (fun () -> mkTest \n  fixpoint\n  ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n  739085\n  \"sample: fixpoint 1\"\n  ); \n\n  (fun () -> mkTest \n  emitGrayscale\n  (eval_fn sampleExpr, 150,\"sample\")\n  ()\n  \"sample: eval_fn 1: manual\"\n  ); \n  (fun () -> mkTest \n  emitGrayscale\n  (eval_fn sampleExpr2, 150,\"sample2\")\n  ()\n  \"sample: eval_fn 2: manual\"\n  );\n\n  (fun () -> mkTest \n  (fun () -> doRandomGray (g1 ()))\n  ()\n  ()\n  \"sample: gray 1 : manual\"\n  );\n  (fun () -> mkTest \n  (fun () -> doRandomGray (g2 ()))\n  ()\n  ()\n  \"sample: gray 2 : manual\"\n  );\n  (fun () -> mkTest \n  (fun () -> doRandomGray (g3 ()))\n  ()\n  ()\n  \"sample: gray 3 : manual\"\n  );\n\n  (fun () -> mkTest \n  (fun () -> doRandomColor (c1 ()))\n  ()\n  ()\n  \"sample: color 1 : manual\"\n  );\n  (fun () -> mkTest \n  (fun () -> doRandomColor (c2 ()))\n  ()\n  ()\n  \"sample: color 2 : manual\"\n  );\n  (fun () -> mkTest \n  (fun () -> doRandomColor (c3 ()))\n  ()\n  ()\n  \"sample: color 3 : manual\"\n  )] \n\n  let doTest f = \n  try f () with ex -> \n  Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n  (Printexc.to_string ex)\n\n  let _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n  (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let c3 () = (5,88,202)","min":"\nlet c3 () = (5, 88, 202);;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":9081,"stop":18520},"type":"eval"},"cursor":9338,"time":1.398123184665815e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,88,202) (*XXXX*)\n\nlet c1 () = (5,5,-5)\nlet c2 () = (6,7,-9) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,88,202) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g2 () = (6,7,-9) (*XXXXXXXXX*)\n  let g3 () = (5,88,202) (*XXXX*)\n\n  let c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let c1 () = (8,5,-5)","min":"\nlet c1 () = (8, 5, (-5));;\n","type":"","out":""}],"event":{"region":{"start":9009,"stop":9040},"type":"eval"},"cursor":9034,"time":1.398123222491347e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,88,202) (*XXXX*)\n\nlet c1 () = (8,5,-5)\nlet c2 () = (6,7,-9) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,88,202) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g2 () = (6,7,-9) (*XXXXXXXXX*)\n  let g3 () = (5,88,202) (*XXXX*)\n\n  let c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let c1 () = (8,5,-5)","min":"\nlet c1 () = (8, 5, (-5));;\n","type":"","out":""},{"in":"let c2 () = (6,7,-9)","min":"\nlet c2 () = (6, 7, (-9));;\n","type":"","out":""},{"in":"let c3 () = (5,88,202)","min":"\nlet c3 () = (5, 88, 202);;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":9020,"stop":18520},"type":"eval"},"cursor":9034,"time":1.398123224734943e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,88,202) (*XXXX*)\n\nlet c1 () = (8,5,-5)\nlet c2 () = (6,7,-9) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,88,202) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g2 () = (6,7,-9) (*XXXXXXXXX*)\n  let g3 () = (5,88,202) (*XXXX*)\n\n  let c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let c1 () = (6,34,3423234)","min":"\nlet c1 () = (6, 34, 3423234);;\n","type":"","out":""}],"event":{"region":{"start":9009,"stop":9046},"type":"eval"},"cursor":9045,"time":1.39812329630228e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,88,202) (*XXXX*)\n\nlet c1 () = (6,34,3423234)\nlet c2 () = (6,7,-9) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,88,202) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g2 () = (6,7,-9) (*XXXXXXXXX*)\n  let g3 () = (5,88,202) (*XXXX*)\n\n  let c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let c1 () = (6,34,3423234)","min":"\nlet c1 () = (6, 34, 3423234);;\n","type":"","out":""},{"in":"let c2 () = (6,7,-9)","min":"\nlet c2 () = (6, 7, (-9));;\n","type":"","out":""},{"in":"let c3 () = (5,88,202)","min":"\nlet c3 () = (5, 88, 202);;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":9020,"stop":18526},"type":"eval"},"cursor":9045,"time":1.398123297912638e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,88,202) (*XXXX*)\n\nlet c1 () = (6,34,3423234)\nlet c2 () = (6,7,-9) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,88,202) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g2 () = (6,7,-9) (*XXXXXXXXX*)\n  let g3 () = (5,88,202) (*XXXX*)\n\n  let c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let c1 () = (6,34,3423234)","min":"\nlet c1 () = (6, 34, 3423234);;\n","type":"","out":""},{"in":"let c2 () = (6,7,-9)","min":"\nlet c2 () = (6, 7, (-9));;\n","type":"","out":""},{"in":"let c3 () = (5,88,202)","min":"\nlet c3 () = (5, 88, 202);;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":9020,"stop":18526},"type":"eval"},"cursor":9045,"time":1.398123311528339e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,88,202) (*XXXX*)\n\nlet c1 () = (6,34,3423234)\nlet c2 () = (6,7,-9) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,88,202) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g2 () = (6,7,-9) (*XXXXXXXXX*)\n  let g3 () = (5,88,202) (*XXXX*)\n\n  let c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let c1 () = (3,34,3423234)","min":"\nlet c1 () = (3, 34, 3423234);;\n","type":"","out":""}],"event":{"region":{"start":9009,"stop":9046},"type":"eval"},"cursor":9034,"time":1.398123399350547e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,88,202) (*XXXX*)\n\nlet c1 () = (3,34,3423234)\nlet c2 () = (6,7,-9) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,88,202) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g2 () = (6,7,-9) (*XXXXXXXXX*)\n  let g3 () = (5,88,202) (*XXXX*)\n\n  let c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let c1 () = (3,34,3423234)","min":"\nlet c1 () = (3, 34, 3423234);;\n","type":"","out":""},{"in":"let c2 () = (6,7,-9)","min":"\nlet c2 () = (6, 7, (-9));;\n","type":"","out":""},{"in":"let c3 () = (5,88,202)","min":"\nlet c3 () = (5, 88, 202);;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":9020,"stop":18526},"type":"eval"},"cursor":9034,"time":1.398123400767812e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,88,202) (*XXXX*)\n\nlet c1 () = (3,34,3423234)\nlet c2 () = (6,7,-9) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,88,202) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g2 () = (6,7,-9) (*XXXXXXXXX*)\n  let g3 () = (5,88,202) (*XXXX*)\n\n  let c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let c1 () = (4,34,3423234)","min":"\nlet c1 () = (4, 34, 3423234);;\n","type":"","out":""}],"event":{"region":{"start":9009,"stop":9046},"type":"eval"},"cursor":9034,"time":1.398123432621147e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,88,202) (*XXXX*)\n\nlet c1 () = (4,34,3423234)\nlet c2 () = (6,7,-9) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,88,202) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g2 () = (6,7,-9) (*XXXXXXXXX*)\n  let g3 () = (5,88,202) (*XXXX*)\n\n  let c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let c1 () = (4,34,3423234)","min":"\nlet c1 () = (4, 34, 3423234);;\n","type":"","out":""},{"in":"let c2 () = (6,7,-9)","min":"\nlet c2 () = (6, 7, (-9));;\n","type":"","out":""},{"in":"let c3 () = (5,88,202)","min":"\nlet c3 () = (5, 88, 202);;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":9020,"stop":18526},"type":"eval"},"cursor":9034,"time":1.398123434558709e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,88,202) (*XXXX*)\n\nlet c1 () = (4,34,3423234)\nlet c2 () = (6,7,-9) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,88,202) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g2 () = (6,7,-9) (*XXXXXXXXX*)\n  let g3 () = (5,88,202) (*XXXX*)\n\n  let c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let c1 () = (5,34,3423234)","min":"\nlet c1 () = (5, 34, 3423234);;\n","type":"","out":""},{"in":"let c2 () = (6,7,-9)","min":"\nlet c2 () = (6, 7, (-9));;\n","type":"","out":""},{"in":"let c3 () = (5,88,202)","min":"\nlet c3 () = (5, 88, 202);;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":9009,"stop":18526},"type":"eval"},"cursor":9034,"time":1.398123451156988e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,88,202) (*XXXX*)\n\nlet c1 () = (5,34,3423234)\nlet c2 () = (6,7,-9) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,88,202) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g2 () = (6,7,-9) (*XXXXXXXXX*)\n  let g3 () = (5,88,202) (*XXXX*)\n\n  let c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let c1 () = (5,3423234,34)","min":"\nlet c1 () = (5, 3423234, 34);;\n","type":"","out":""},{"in":"let c2 () = (6,7,-9)","min":"\nlet c2 () = (6, 7, (-9));;\n","type":"","out":""},{"in":"let c3 () = (5,88,202)","min":"\nlet c3 () = (5, 88, 202);;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":9009,"stop":18526},"type":"eval"},"cursor":9042,"time":1.398123508375341e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,88,202) (*XXXX*)\n\nlet c1 () = (5,3423234,34)\nlet c2 () = (6,7,-9) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,88,202) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g2 () = (6,7,-9) (*XXXXXXXXX*)\n  let g3 () = (5,88,202) (*XXXX*)\n\n  let c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let c1 () = (3,944,-34)","min":"\nlet c1 () = (3, 944, (-34));;\n","type":"","out":""},{"in":"let c2 () = (6,7,-9)","min":"\nlet c2 () = (6, 7, (-9));;\n","type":"","out":""},{"in":"let c3 () = (5,88,202)","min":"\nlet c3 () = (5, 88, 202);;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":9009,"stop":18523},"type":"eval"},"cursor":9040,"time":1.398123555713149e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,88,202) (*XXXX*)\n\nlet c1 () = (3,944,-34)\nlet c2 () = (6,7,-9) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,88,202) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g2 () = (6,7,-9) (*XXXXXXXXX*)\n  let g3 () = (5,88,202) (*XXXX*)\n\n  let c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let c1 () = (4,944,-34)","min":"\nlet c1 () = (4, 944, (-34));;\n","type":"","out":""},{"in":"let c2 () = (6,7,-9)","min":"\nlet c2 () = (6, 7, (-9));;\n","type":"","out":""},{"in":"let c3 () = (5,88,202)","min":"\nlet c3 () = (5, 88, 202);;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":9009,"stop":18523},"type":"eval"},"cursor":9034,"time":1.398123583415263e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,88,202) (*XXXX*)\n\nlet c1 () = (4,944,-34)\nlet c2 () = (6,7,-9) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,88,202) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g2 () = (6,7,-9) (*XXXXXXXXX*)\n  let g3 () = (5,88,202) (*XXXX*)\n\n  let c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let c1 () = (5,944,-34)","min":"\nlet c1 () = (5, 944, (-34));;\n","type":"","out":""},{"in":"let c2 () = (6,7,-9)","min":"\nlet c2 () = (6, 7, (-9));;\n","type":"","out":""},{"in":"let c3 () = (5,88,202)","min":"\nlet c3 () = (5, 88, 202);;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":9009,"stop":18523},"type":"eval"},"cursor":9034,"time":1.398123635665852e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,88,202) (*XXXX*)\n\nlet c1 () = (5,944,-34)\nlet c2 () = (6,7,-9) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,88,202) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g2 () = (6,7,-9) (*XXXXXXXXX*)\n  let g3 () = (5,88,202) (*XXXX*)\n\n  let c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec eval (e,x,y) = match e with\n| VarX -> x\n| VarY -> y\n| Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n| Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n| Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n| Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n| Thresh   (e1, e2, e3, e4) \n-> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n(eval (e3, x, y)) else\n(eval (e4, x, y))\n| AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\nif abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\ns else\nabs_float s\n| ModThresh (e1, e2, e3) -> \nif (truncate (1000. *. (eval (e1, x, y)))) mod 5 = 0 then\n(eval (e2, x, y)) else\n(eval (e3, x, y))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (1000. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n","type":"","out":""},{"in":"let _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (1000. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet _ = eval ((Sine (Average (VarX, VarY))), 0.5, (-0.5));;\n","type":"","out":""},{"in":"let _ = eval (Sine(Average(VarX,VarY)),0.3,0.3)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (1000. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet _ = eval ((Sine (Average (VarX, VarY))), 0.3, 0.3);;\n","type":"","out":""},{"in":"let eval_fn e (x,y) = \nlet rv = eval (e,x,y) in\nassert (-1.0 <= rv && rv <= 1.0);\nrv","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (1000. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n","type":"","out":""},{"in":"let sampleExpr =\nbuildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\nbuildX()),buildTimes(buildCosine (buildCosine (buildAverage\n(buildTimes (buildY(),buildY()),buildCosine (buildX())))),\nbuildCosine (buildTimes (buildSine (buildCosine\n(buildY())),buildAverage (buildSine (buildX()), buildTimes\n(buildX(),buildX()))))))),buildY())))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet sampleExpr =\n  buildCosine\n    (buildSine\n       (buildTimes\n          ((buildCosine\n              (buildAverage\n                 ((buildCosine (buildX ())),\n                   (buildTimes\n                      ((buildCosine\n                          (buildCosine\n                             (buildAverage\n                                ((buildTimes ((buildY ()), (buildY ()))),\n                                  (buildCosine (buildX ())))))),\n                        (buildCosine\n                           (buildTimes\n                              ((buildSine (buildCosine (buildY ()))),\n                                (buildAverage\n                                   ((buildSine (buildX ())),\n                                     (buildTimes ((buildX ()), (buildX ()))))))))))))),\n            (buildY ()))));;\n","type":"","out":""},{"in":"let sampleExpr2 =\nbuildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet sampleExpr2 =\n  buildThresh\n    ((buildX ()), (buildY ()), (buildSine (buildX ())),\n      (buildCosine (buildY ())));;\n","type":"","out":""},{"in":"let _ = eval (sampleExpr,0.5,0.2)","min":"\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (1000. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet sampleExpr =\n  buildCosine\n    (buildSine\n       (buildTimes\n          ((buildCosine\n              (buildAverage\n                 ((buildCosine (buildX ())),\n                   (buildTimes\n                      ((buildCosine\n                          (buildCosine\n                             (buildAverage\n                                ((buildTimes ((buildY ()), (buildY ()))),\n                                  (buildCosine (buildX ())))))),\n                        (buildCosine\n                           (buildTimes\n                              ((buildSine (buildCosine (buildY ()))),\n                                (buildAverage\n                                   ((buildSine (buildX ())),\n                                     (buildTimes ((buildX ()), (buildX ()))))))))))))),\n            (buildY ()))));;\n\nlet _ = eval (sampleExpr, 0.5, 0.2);;\n","type":"","out":""},{"in":"let _ = buildY()","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildY () = VarY;;\n\nlet _ = buildY ();;\n","type":"","out":""},{"in":"let rec build (rand, depth) = \nlet r = rand (0,99) in\nif depth = 0 then\nif (r < 50) then\nbuildX()\nelse\nbuildY()\nelse\n\nif (r < 5) then\nbuildX()\nelse if (r < 10) then\nbuildY()\nelse if (r < 30) then \nbuildSine (build (rand, depth - 1))\nelse if (r < 50) then \nbuildCosine (build (rand, depth - 1))\nelse if (r < 60) then \nbuildAverage (build (rand, depth - 1), build (rand, depth - 1))\nelse if (r < 70) then \nbuildTimes (build (rand, depth - 1), build (rand, depth - 1))\nelse if (r < 80) then \nbuildThresh (build (rand, depth - 1), build (rand, depth - 1),\nbuild (rand, depth - 1), build (rand, depth - 1))\nelse if (r < 90) then \nbuildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\nbuild (rand, depth - 1))\nelse \nbuildModThresh (build (rand, depth - 1), build (rand, depth - 1),\nbuild (rand, depth - 1))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n","type":"","out":""},{"in":"let g1 () = (5,5,-5)","min":"\nlet g1 () = (5, 5, (-5));;\n","type":"","out":""},{"in":"let g2 () = (6,7,-9)","min":"\nlet g2 () = (6, 7, (-9));;\n","type":"","out":""},{"in":"let g3 () = (5,88,202)","min":"\nlet g3 () = (5, 88, 202);;\n","type":"","out":""},{"in":"let c1 () = (5,944,-34)","min":"\nlet c1 () = (5, 944, (-34));;\n","type":"","out":""},{"in":"let c2 () = (6,7,-9)","min":"\nlet c2 () = (6, 7, (-9));;\n","type":"","out":""},{"in":"let c3 () = (5,88,202)","min":"\nlet c3 () = (5, 88, 202);;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (1000. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (1000. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":5655,"stop":18524},"type":"eval"},"cursor":6332,"time":1.398123682956968e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (1000. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,88,202) (*XXXX*)\n\nlet c1 () = (5,944,-34)\nlet c2 () = (6,7,-9) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,88,202) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g2 () = (6,7,-9) (*XXXXXXXXX*)\n  let g3 () = (5,88,202) (*XXXX*)\n\n  let c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec eval (e,x,y) = match e with\n| VarX -> x\n| VarY -> y\n| Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n| Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n| Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n| Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n| Thresh   (e1, e2, e3, e4) \n-> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n(eval (e3, x, y)) else\n(eval (e4, x, y))\n| AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\nif abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\ns else\nabs_float s\n| ModThresh (e1, e2, e3) -> \nif (truncate (10. *. (eval (e1, x, y)))) mod 5 = 0 then\n(eval (e2, x, y)) else\n(eval (e3, x, y))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (10. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n","type":"","out":""},{"in":"let _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (10. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet _ = eval ((Sine (Average (VarX, VarY))), 0.5, (-0.5));;\n","type":"","out":""},{"in":"let _ = eval (Sine(Average(VarX,VarY)),0.3,0.3)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (10. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet _ = eval ((Sine (Average (VarX, VarY))), 0.3, 0.3);;\n","type":"","out":""},{"in":"let eval_fn e (x,y) = \nlet rv = eval (e,x,y) in\nassert (-1.0 <= rv && rv <= 1.0);\nrv","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (10. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n","type":"","out":""},{"in":"let sampleExpr =\nbuildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\nbuildX()),buildTimes(buildCosine (buildCosine (buildAverage\n(buildTimes (buildY(),buildY()),buildCosine (buildX())))),\nbuildCosine (buildTimes (buildSine (buildCosine\n(buildY())),buildAverage (buildSine (buildX()), buildTimes\n(buildX(),buildX()))))))),buildY())))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet sampleExpr =\n  buildCosine\n    (buildSine\n       (buildTimes\n          ((buildCosine\n              (buildAverage\n                 ((buildCosine (buildX ())),\n                   (buildTimes\n                      ((buildCosine\n                          (buildCosine\n                             (buildAverage\n                                ((buildTimes ((buildY ()), (buildY ()))),\n                                  (buildCosine (buildX ())))))),\n                        (buildCosine\n                           (buildTimes\n                              ((buildSine (buildCosine (buildY ()))),\n                                (buildAverage\n                                   ((buildSine (buildX ())),\n                                     (buildTimes ((buildX ()), (buildX ()))))))))))))),\n            (buildY ()))));;\n","type":"","out":""},{"in":"let sampleExpr2 =\nbuildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet sampleExpr2 =\n  buildThresh\n    ((buildX ()), (buildY ()), (buildSine (buildX ())),\n      (buildCosine (buildY ())));;\n","type":"","out":""},{"in":"let _ = eval (sampleExpr,0.5,0.2)","min":"\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (10. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet sampleExpr =\n  buildCosine\n    (buildSine\n       (buildTimes\n          ((buildCosine\n              (buildAverage\n                 ((buildCosine (buildX ())),\n                   (buildTimes\n                      ((buildCosine\n                          (buildCosine\n                             (buildAverage\n                                ((buildTimes ((buildY ()), (buildY ()))),\n                                  (buildCosine (buildX ())))))),\n                        (buildCosine\n                           (buildTimes\n                              ((buildSine (buildCosine (buildY ()))),\n                                (buildAverage\n                                   ((buildSine (buildX ())),\n                                     (buildTimes ((buildX ()), (buildX ()))))))))))))),\n            (buildY ()))));;\n\nlet _ = eval (sampleExpr, 0.5, 0.2);;\n","type":"","out":""},{"in":"let _ = buildY()","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildY () = VarY;;\n\nlet _ = buildY ();;\n","type":"","out":""},{"in":"let rec build (rand, depth) = \nlet r = rand (0,99) in\nif depth = 0 then\nif (r < 50) then\nbuildX()\nelse\nbuildY()\nelse\n\nif (r < 5) then\nbuildX()\nelse if (r < 10) then\nbuildY()\nelse if (r < 30) then \nbuildSine (build (rand, depth - 1))\nelse if (r < 50) then \nbuildCosine (build (rand, depth - 1))\nelse if (r < 60) then \nbuildAverage (build (rand, depth - 1), build (rand, depth - 1))\nelse if (r < 70) then \nbuildTimes (build (rand, depth - 1), build (rand, depth - 1))\nelse if (r < 80) then \nbuildThresh (build (rand, depth - 1), build (rand, depth - 1),\nbuild (rand, depth - 1), build (rand, depth - 1))\nelse if (r < 90) then \nbuildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\nbuild (rand, depth - 1))\nelse \nbuildModThresh (build (rand, depth - 1), build (rand, depth - 1),\nbuild (rand, depth - 1))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n","type":"","out":""},{"in":"let g1 () = (5,5,-5)","min":"\nlet g1 () = (5, 5, (-5));;\n","type":"","out":""},{"in":"let g2 () = (6,7,-9)","min":"\nlet g2 () = (6, 7, (-9));;\n","type":"","out":""},{"in":"let g3 () = (5,88,202)","min":"\nlet g3 () = (5, 88, 202);;\n","type":"","out":""},{"in":"let c1 () = (5,944,-34)","min":"\nlet c1 () = (5, 944, (-34));;\n","type":"","out":""},{"in":"let c2 () = (6,7,-9)","min":"\nlet c2 () = (6, 7, (-9));;\n","type":"","out":""},{"in":"let c3 () = (5,88,202)","min":"\nlet c3 () = (5, 88, 202);;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (10. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (10. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":5655,"stop":18522},"type":"eval"},"cursor":6329,"time":1.398123732292865e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (10. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,88,202) (*XXXX*)\n\nlet c1 () = (5,944,-34)\nlet c2 () = (6,7,-9) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,88,202) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g2 () = (6,7,-9) (*XXXXXXXXX*)\n  let g3 () = (5,88,202) (*XXXX*)\n\n  let c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec eval (e,x,y) = match e with\n| VarX -> x\n| VarY -> y\n| Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n| Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n| Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n| Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n| Thresh   (e1, e2, e3, e4) \n-> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n(eval (e3, x, y)) else\n(eval (e4, x, y))\n| AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\nif abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\ns else\nabs_float s\n| ModThresh (e1, e2, e3) -> \nif (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n(eval (e2, x, y)) else\n(eval (e3, x, y))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n","type":"","out":""}],"event":{"region":{"start":5655,"stop":6411},"type":"eval"},"cursor":6330,"time":1.398123841326042e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,88,202) (*XXXX*)\n\nlet c1 () = (5,944,-34)\nlet c2 () = (6,7,-9) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,88,202) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g2 () = (6,7,-9) (*XXXXXXXXX*)\n  let g3 () = (5,88,202) (*XXXX*)\n\n  let c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec eval (e,x,y) = match e with\n| VarX -> x\n| VarY -> y\n| Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n| Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n| Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n| Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n| Thresh   (e1, e2, e3, e4) \n-> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n(eval (e3, x, y)) else\n(eval (e4, x, y))\n| AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\nif abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\ns else\nabs_float s\n| ModThresh (e1, e2, e3) -> \nif (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n(eval (e2, x, y)) else\n(eval (e3, x, y))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n","type":"","out":""},{"in":"let _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet _ = eval ((Sine (Average (VarX, VarY))), 0.5, (-0.5));;\n","type":"","out":""},{"in":"let _ = eval (Sine(Average(VarX,VarY)),0.3,0.3)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet _ = eval ((Sine (Average (VarX, VarY))), 0.3, 0.3);;\n","type":"","out":""},{"in":"let eval_fn e (x,y) = \nlet rv = eval (e,x,y) in\nassert (-1.0 <= rv && rv <= 1.0);\nrv","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n","type":"","out":""},{"in":"let sampleExpr =\nbuildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\nbuildX()),buildTimes(buildCosine (buildCosine (buildAverage\n(buildTimes (buildY(),buildY()),buildCosine (buildX())))),\nbuildCosine (buildTimes (buildSine (buildCosine\n(buildY())),buildAverage (buildSine (buildX()), buildTimes\n(buildX(),buildX()))))))),buildY())))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet sampleExpr =\n  buildCosine\n    (buildSine\n       (buildTimes\n          ((buildCosine\n              (buildAverage\n                 ((buildCosine (buildX ())),\n                   (buildTimes\n                      ((buildCosine\n                          (buildCosine\n                             (buildAverage\n                                ((buildTimes ((buildY ()), (buildY ()))),\n                                  (buildCosine (buildX ())))))),\n                        (buildCosine\n                           (buildTimes\n                              ((buildSine (buildCosine (buildY ()))),\n                                (buildAverage\n                                   ((buildSine (buildX ())),\n                                     (buildTimes ((buildX ()), (buildX ()))))))))))))),\n            (buildY ()))));;\n","type":"","out":""},{"in":"let sampleExpr2 =\nbuildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet sampleExpr2 =\n  buildThresh\n    ((buildX ()), (buildY ()), (buildSine (buildX ())),\n      (buildCosine (buildY ())));;\n","type":"","out":""},{"in":"let _ = eval (sampleExpr,0.5,0.2)","min":"\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet sampleExpr =\n  buildCosine\n    (buildSine\n       (buildTimes\n          ((buildCosine\n              (buildAverage\n                 ((buildCosine (buildX ())),\n                   (buildTimes\n                      ((buildCosine\n                          (buildCosine\n                             (buildAverage\n                                ((buildTimes ((buildY ()), (buildY ()))),\n                                  (buildCosine (buildX ())))))),\n                        (buildCosine\n                           (buildTimes\n                              ((buildSine (buildCosine (buildY ()))),\n                                (buildAverage\n                                   ((buildSine (buildX ())),\n                                     (buildTimes ((buildX ()), (buildX ()))))))))))))),\n            (buildY ()))));;\n\nlet _ = eval (sampleExpr, 0.5, 0.2);;\n","type":"","out":""},{"in":"let _ = buildY()","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildY () = VarY;;\n\nlet _ = buildY ();;\n","type":"","out":""},{"in":"let rec build (rand, depth) = \nlet r = rand (0,99) in\nif depth = 0 then\nif (r < 50) then\nbuildX()\nelse\nbuildY()\nelse\n\nif (r < 5) then\nbuildX()\nelse if (r < 10) then\nbuildY()\nelse if (r < 30) then \nbuildSine (build (rand, depth - 1))\nelse if (r < 50) then \nbuildCosine (build (rand, depth - 1))\nelse if (r < 60) then \nbuildAverage (build (rand, depth - 1), build (rand, depth - 1))\nelse if (r < 70) then \nbuildTimes (build (rand, depth - 1), build (rand, depth - 1))\nelse if (r < 80) then \nbuildThresh (build (rand, depth - 1), build (rand, depth - 1),\nbuild (rand, depth - 1), build (rand, depth - 1))\nelse if (r < 90) then \nbuildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\nbuild (rand, depth - 1))\nelse \nbuildModThresh (build (rand, depth - 1), build (rand, depth - 1),\nbuild (rand, depth - 1))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n","type":"","out":""},{"in":"let g1 () = (5,5,-5)","min":"\nlet g1 () = (5, 5, (-5));;\n","type":"","out":""},{"in":"let g2 () = (6,7,-9)","min":"\nlet g2 () = (6, 7, (-9));;\n","type":"","out":""},{"in":"let g3 () = (5,88,202)","min":"\nlet g3 () = (5, 88, 202);;\n","type":"","out":""},{"in":"let c1 () = (5,944,-34)","min":"\nlet c1 () = (5, 944, (-34));;\n","type":"","out":""},{"in":"let c2 () = (6,7,-9)","min":"\nlet c2 () = (6, 7, (-9));;\n","type":"","out":""},{"in":"let c3 () = (5,88,202)","min":"\nlet c3 () = (5, 88, 202);;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":5740,"stop":18523},"type":"eval"},"cursor":6330,"time":1.398123844480636e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,88,202) (*XXXX*)\n\nlet c1 () = (5,944,-34)\nlet c2 () = (6,7,-9) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,88,202) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g2 () = (6,7,-9) (*XXXXXXXXX*)\n  let g3 () = (5,88,202) (*XXXX*)\n\n  let c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let c1 () = (5,944,-34)","min":"\nlet c1 () = (5, 944, (-34));;\n","type":"","out":""},{"in":"let c2 () = (6,78,-563)","min":"\nlet c2 () = (6, 78, (-563));;\n","type":"","out":""},{"in":"let c3 () = (5,88,202)","min":"\nlet c3 () = (5, 88, 202);;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":9020,"stop":18526},"type":"eval"},"cursor":9043,"time":1.398123955443653e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,88,202) (*XXXX*)\n\nlet c1 () = (5,944,-34)\nlet c2 () = (6,78,-563) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,88,202) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g2 () = (6,7,-9) (*XXXXXXXXX*)\n  let g3 () = (5,88,202) (*XXXX*)\n\n  let c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let c2 () = (4,78,-563)","min":"\nlet c2 () = (4, 78, (-563));;\n","type":"","out":""},{"in":"let c3 () = (5,88,202)","min":"\nlet c3 () = (5, 88, 202);;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":9043,"stop":18526},"type":"eval"},"cursor":9058,"time":1.39812401503523e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,88,202) (*XXXX*)\n\nlet c1 () = (5,944,-34)\nlet c2 () = (4,78,-563) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,88,202) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g2 () = (6,7,-9) (*XXXXXXXXX*)\n  let g3 () = (5,88,202) (*XXXX*)\n\n  let c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let c2 () = (5,78,-563)","min":"\nlet c2 () = (5, 78, (-563));;\n","type":"","out":""},{"in":"let c3 () = (5,88,202)","min":"\nlet c3 () = (5, 88, 202);;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":9043,"stop":18526},"type":"eval"},"cursor":9058,"time":1.39812402877276e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,88,202) (*XXXX*)\n\nlet c1 () = (5,944,-34)\nlet c2 () = (5,78,-563) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,88,202) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g2 () = (6,7,-9) (*XXXXXXXXX*)\n  let g3 () = (5,88,202) (*XXXX*)\n\n  let c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let c1 () = (5,90,89)","min":"\nlet c1 () = (5, 90, 89);;\n","type":"","out":""},{"in":"let c2 () = (5,3,-53)","min":"\nlet c2 () = (5, 3, (-53));;\n","type":"","out":""},{"in":"let c3 () = (5,8,22)","min":"\nlet c3 () = (5, 8, 22);;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":9009,"stop":18520},"type":"eval"},"cursor":9099,"time":1.398124087413243e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,88,202) (*XXXX*)\n\nlet c1 () = (5,90,89)\nlet c2 () = (5,3,-53) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,8,22) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g2 () = (6,7,-9) (*XXXXXXXXX*)\n  let g3 () = (5,88,202) (*XXXX*)\n\n  let c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let c2 () = (6,3,-53)","min":"\nlet c2 () = (6, 3, (-53));;\n","type":"","out":""},{"in":"let c3 () = (5,8,22)","min":"\nlet c3 () = (5, 8, 22);;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":9041,"stop":18570},"type":"eval"},"cursor":9111,"time":1.398124203689124e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,88,202) (*XXXX*)\n\nlet c1 () = (5,90,89) (*XXXXXXXXX*)\nlet c2 () = (6,3,-53) (*XXXXXXXXXXXXXX*)\nlet c3 () = (5,8,22) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g2 () = (6,7,-9) (*XXXXXXXXX*)\n  let g3 () = (5,88,202) (*XXXX*)\n\n  let c1 () = (5,90,89) (*XXXXXXXXX*)\n  let c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let c1 () = (5,34,-95)","min":"\nlet c1 () = (5, 34, (-95));;\n","type":"","out":""},{"in":"let c2 () = (5,3,-53)","min":"\nlet c2 () = (5, 3, (-53));;\n","type":"","out":""},{"in":"let c3 () = (5,776,-111)","min":"\nlet c3 () = (5, 776, (-111));;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":9009,"stop":18557},"type":"eval"},"cursor":9103,"time":1.398124291559432e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,88,202) (*XXXX*)\n\nlet c1 () = (5,34,-95) (*XXXXXXXXX*)\nlet c2 () = (5,3,-53) \nlet c3 () = (5,776,-111) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g2 () = (6,7,-9) (*XXXXXXXXX*)\n  let g3 () = (5,88,202) (*XXXX*)\n\n  let c1 () = (5,90,89) (*XXXXXXXXX*)\n  let c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let g1 () = (5,5,-5)","min":"\nlet g1 () = (5, 5, (-5));;\n","type":"","out":""},{"in":"let g2 () = (6,7,-9)","min":"\nlet g2 () = (6, 7, (-9));;\n","type":"","out":""},{"in":"let g3 () = (5,88,202)","min":"\nlet g3 () = (5, 88, 202);;\n","type":"","out":""},{"in":"let c1 () = (5,90,89)","min":"\nlet c1 () = (5, 90, 89);;\n","type":"","out":""},{"in":"let c3 () = (5,776,-111)","min":"\nlet c3 () = (5, 776, (-111));;\n","type":"","out":""},{"in":"let c3 () = (5,0,-20)","min":"\nlet c3 () = (5, 0, (-20));;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":8713,"stop":18598},"type":"eval"},"cursor":9133,"time":1.398124359448678e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,88,202) (*XXXX*)\n\nlet c1 () = (5,90,89) (*XXXXXXXXX*)\nlet c3 () = (5,776,-111) (*XXXX*)\nlet c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g2 () = (6,7,-9) (*XXXXXXXXX*)\n  let g3 () = (5,88,202) (*XXXX*)\n\n  let c1 () = (5,90,89) (*XXXXXXXXX*)\n  let c3 () = (5,776,-111) (*XXXX*)\n  let c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let g1 () = (5,5,-5)","min":"\nlet g1 () = (5, 5, (-5));;\n","type":"","out":""},{"in":"let g2 () = (6,7,-9)","min":"\nlet g2 () = (6, 7, (-9));;\n","type":"","out":""},{"in":"let g3 () = (5,88,202)","min":"\nlet g3 () = (5, 88, 202);;\n","type":"","out":""},{"in":"let c1 () = (5,34,-95)","min":"\nlet c1 () = (5, 34, (-95));;\n","type":"","out":""},{"in":"let c2 () = (5,3,-53)","min":"\nlet c2 () = (5, 3, (-53));;\n","type":"","out":""},{"in":"let c3 () = (5,776,-111)","min":"\nlet c3 () = (5, 776, (-111));;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":8713,"stop":18591},"type":"eval"},"cursor":9079,"time":1.398124430864123e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,88,202) (*XXXX*)\n\nlet c1 () = (5,34,-95) (*XXXXXXXXX*)\nlet c2 () = (5,3,-53) \nlet c3 () = (5,776,-111) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g2 () = (6,7,-9) (*XXXXXXXXX*)\n  let g3 () = (5,88,202) (*XXXX*)\n\n  let c1 () = (5,90,89) (*XXXXXXXXX*)\n  let c3 () = (5,776,-111) (*XXXX*)\n  let c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let g1 () = (5,5,-5)","min":"\nlet g1 () = (5, 5, (-5));;\n","type":"","out":""},{"in":"let g2 () = (6,7,-9)","min":"\nlet g2 () = (6, 7, (-9));;\n","type":"","out":""},{"in":"let g3 () = (5,88,202)","min":"\nlet g3 () = (5, 88, 202);;\n","type":"","out":""},{"in":"let c1 () = (5,90,89)","min":"\nlet c1 () = (5, 90, 89);;\n","type":"","out":""},{"in":"let c2 () = (5,776,-111)","min":"\nlet c2 () = (5, 776, (-111));;\n","type":"","out":""},{"in":"let c3 () = (5,0,-20)","min":"\nlet c3 () = (5, 0, (-20));;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":8713,"stop":18598},"type":"eval"},"cursor":9231,"time":1.398124494481654e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,88,202) (*XXXX*)\n\nlet c1 () = (5,90,89) (*XXXXXXXXX*)\nlet c2 () = (5,776,-111) (*XXXX*)\nlet c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n\n(*\nXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g2 () = (6,7,-9) (*XXXXXXXXX*)\n  let g3 () = (5,88,202) (*XXXX*)\n\n  let c1 () = (5,90,89) (*XXXXXXXXX*)\n  let c2 () = (5,776,-111) (*XXXX*)\n  let c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let c3 () = (20,0,-20)","min":"\nlet c3 () = (20, 0, (-20));;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":9080,"stop":18316},"type":"eval"},"cursor":9105,"time":1.398124778544083e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,88,202) (*XXXX*)\n\nlet c1 () = (5,90,89) (*XXXXXXXXX*)\nlet c2 () = (5,776,-111) (*XXXX*)\nlet c3 () = (20,0,-20) (*XXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec assoc (d,k,l) = match l with\n| [] -> d\n| (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)","min":"\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | (k',v)::rest -> if k = k' then v else assoc (d, k, rest);;\n","type":"","out":""},{"in":"let _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)])","min":"\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | (k',v)::rest -> if k = k' then v else assoc (d, k, rest);;\n\nlet _ =\n  assoc ((-1), \"william\", [(\"ranjit\", 85); (\"william\", 23); (\"moose\", 44)]);;\n","type":"","out":""},{"in":"let _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)])","min":"\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | (k',v)::rest -> if k = k' then v else assoc (d, k, rest);;\n\nlet _ = assoc ((-1), \"bob\", [(\"ranjit\", 85); (\"william\", 23); (\"moose\", 44)]);;\n","type":"","out":""},{"in":"let removeDuplicates l = \nlet rec helper (seen,rest) = \nmatch rest with \n[] -> seen\n| h::t -> \nlet seen' =\nlet rec addIfUnique item l' = match l' with \n| [] -> \nitem :: seen\n| h' :: t' -> \nif h' = item then seen else addIfUnique item t' in\naddIfUnique h seen in\nlet rest' = t in\nhelper (seen',rest') \nin\nList.rev (helper ([],l))","min":"\nlet removeDuplicates l =\n  let rec helper (seen,rest) =\n    match rest with\n    | [] -> seen\n    | h::t ->\n        let seen' =\n          let rec addIfUnique item l' =\n            match l' with\n            | [] -> item :: seen\n            | h'::t' -> if h' = item then seen else addIfUnique item t' in\n          addIfUnique h seen in\n        let rest' = t in helper (seen', rest') in\n  List.rev (helper ([], l));;\n","type":"","out":""},{"in":"let _ = removeDuplicates [1;6;2;4;12;2;13;6;9]","min":"\nlet removeDuplicates l =\n  let rec helper (seen,rest) =\n    match rest with\n    | [] -> seen\n    | h::t ->\n        let seen' =\n          let rec addIfUnique item l' =\n            match l' with\n            | [] -> item :: seen\n            | h'::t' -> if h' = item then seen else addIfUnique item t' in\n          addIfUnique h seen in\n        let rest' = t in helper (seen', rest') in\n  List.rev (helper ([], l));;\n\nlet _ = removeDuplicates [1; 6; 2; 4; 12; 2; 13; 6; 9];;\n","type":"","out":""},{"in":"let rec wwhile (f,x) = \nlet (x', b') = f x in\nif b' then wwhile (f, x') else x'","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n","type":"","out":""},{"in":"let f x = let xx = x*x*x in (xx, xx < 100) in\nwwhile (f, 2)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet _ = let f x = let xx = (x * x) * x in (xx, (xx < 100)) in wwhile (f, 2);;\n","type":"","out":""},{"in":"let fixpoint (f,x) = \nlet g x = ((f x), (f x) != x) in\nwwhile (g,x)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n","type":"","out":""},{"in":"let g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ =\n  let g x = truncate (1e6 *. (cos (1e-6 *. (float x)))) in fixpoint (g, 0);;\n","type":"","out":""},{"in":"let collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1","min":"\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 1)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 1);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 3)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 3);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 48)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 48);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 107)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 107);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 9001)","min":"\nlet rec wwhile (f,x) = let (x',b') = f x in if b' then wwhile (f, x') else x';;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,x) = let g x = ((f x), ((f x) != x)) in wwhile (g, x);;\n\nlet _ = fixpoint (collatz, 9001);;\n","type":"","out":""},{"in":"type expr = \nVarX\n| VarY\n| Sine     of expr\n| Cosine   of expr\n| Average  of expr * expr\n| Times    of expr * expr\n| Thresh   of expr * expr * expr * expr\t\n| AbsThresh of expr * expr * expr\n| ModThresh of expr * expr * expr","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n","type":"","out":""},{"in":"let rec exprToString e = match e with\n| VarX -> \"x\"\n| VarY -> \"y\"\n| Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n| Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n| Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n^ (exprToString e2) ^ \")/2)\"\n| Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n^ (exprToString e2)\n| Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n^ (exprToString e2) ^ \"?\"\n^ (exprToString e3) ^ \":\"\n^ (exprToString e4) ^ \")\"\n| AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n\"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n^ (exprToString e2) ^ \")?\"\n^ s ^ \":abs(\"\n^ s ^ \"))\"\n| ModThresh (e1, e2, e3) -> \n\"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n^ (exprToString e2) ^ \":\"\n^ (exprToString e3) ^ \")\"","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n","type":"","out":""},{"in":"let sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n","type":"","out":""},{"in":"let sampleExpr10 = ModThresh(VarX,VarY,VarX)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet sampleExpr10 = ModThresh (VarX, VarY, VarX);;\n","type":"","out":""},{"in":"let _ = exprToString sampleExpr10","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet sampleExpr10 = ModThresh (VarX, VarY, VarX);;\n\nlet _ = exprToString sampleExpr10;;\n","type":"","out":""},{"in":"let buildX()                       = VarX","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildX () = VarX;;\n","type":"","out":""},{"in":"let buildY()                       = VarY","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildY () = VarY;;\n","type":"","out":""},{"in":"let buildSine(e)                   = Sine(e)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildSine e = Sine e;;\n","type":"","out":""},{"in":"let buildCosine(e)                 = Cosine(e)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildCosine e = Cosine e;;\n","type":"","out":""},{"in":"let buildAverage(e1,e2)            = Average(e1,e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n","type":"","out":""},{"in":"let buildTimes(e1,e2)              = Times(e1,e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n","type":"","out":""},{"in":"let buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n","type":"","out":""},{"in":"let buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n","type":"","out":""},{"in":"let buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n","type":"","out":""},{"in":"let pi = 4.0 *. atan 1.0","min":"\nlet pi = 4.0 *. (atan 1.0);;\n","type":"","out":""},{"in":"let rec eval (e,x,y) = match e with\n| VarX -> x\n| VarY -> y\n| Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n| Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n| Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n| Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n| Thresh   (e1, e2, e3, e4) \n-> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n(eval (e3, x, y)) else\n(eval (e4, x, y))\n| AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\nif abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\ns else\nabs_float s\n| ModThresh (e1, e2, e3) -> \nif (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n(eval (e2, x, y)) else\n(eval (e3, x, y))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n","type":"","out":""},{"in":"let _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet _ = eval ((Sine (Average (VarX, VarY))), 0.5, (-0.5));;\n","type":"","out":""},{"in":"let _ = eval (Sine(Average(VarX,VarY)),0.3,0.3)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet _ = eval ((Sine (Average (VarX, VarY))), 0.3, 0.3);;\n","type":"","out":""},{"in":"let eval_fn e (x,y) = \nlet rv = eval (e,x,y) in\nassert (-1.0 <= rv && rv <= 1.0);\nrv","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n","type":"","out":""},{"in":"let sampleExpr =\nbuildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\nbuildX()),buildTimes(buildCosine (buildCosine (buildAverage\n(buildTimes (buildY(),buildY()),buildCosine (buildX())))),\nbuildCosine (buildTimes (buildSine (buildCosine\n(buildY())),buildAverage (buildSine (buildX()), buildTimes\n(buildX(),buildX()))))))),buildY())))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet sampleExpr =\n  buildCosine\n    (buildSine\n       (buildTimes\n          ((buildCosine\n              (buildAverage\n                 ((buildCosine (buildX ())),\n                   (buildTimes\n                      ((buildCosine\n                          (buildCosine\n                             (buildAverage\n                                ((buildTimes ((buildY ()), (buildY ()))),\n                                  (buildCosine (buildX ())))))),\n                        (buildCosine\n                           (buildTimes\n                              ((buildSine (buildCosine (buildY ()))),\n                                (buildAverage\n                                   ((buildSine (buildX ())),\n                                     (buildTimes ((buildX ()), (buildX ()))))))))))))),\n            (buildY ()))));;\n","type":"","out":""},{"in":"let sampleExpr2 =\nbuildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet sampleExpr2 =\n  buildThresh\n    ((buildX ()), (buildY ()), (buildSine (buildX ())),\n      (buildCosine (buildY ())));;\n","type":"","out":""},{"in":"let _ = eval (sampleExpr,0.5,0.2)","min":"\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet sampleExpr =\n  buildCosine\n    (buildSine\n       (buildTimes\n          ((buildCosine\n              (buildAverage\n                 ((buildCosine (buildX ())),\n                   (buildTimes\n                      ((buildCosine\n                          (buildCosine\n                             (buildAverage\n                                ((buildTimes ((buildY ()), (buildY ()))),\n                                  (buildCosine (buildX ())))))),\n                        (buildCosine\n                           (buildTimes\n                              ((buildSine (buildCosine (buildY ()))),\n                                (buildAverage\n                                   ((buildSine (buildX ())),\n                                     (buildTimes ((buildX ()), (buildX ()))))))))))))),\n            (buildY ()))));;\n\nlet _ = eval (sampleExpr, 0.5, 0.2);;\n","type":"","out":""},{"in":"let _ = buildY()","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildY () = VarY;;\n\nlet _ = buildY ();;\n","type":"","out":""},{"in":"let rec build (rand, depth) = \nlet r = rand (0,99) in\nif depth = 0 then\nif (r < 50) then\nbuildX()\nelse\nbuildY()\nelse\n\nif (r < 5) then\nbuildX()\nelse if (r < 10) then\nbuildY()\nelse if (r < 30) then \nbuildSine (build (rand, depth - 1))\nelse if (r < 50) then \nbuildCosine (build (rand, depth - 1))\nelse if (r < 60) then \nbuildAverage (build (rand, depth - 1), build (rand, depth - 1))\nelse if (r < 70) then \nbuildTimes (build (rand, depth - 1), build (rand, depth - 1))\nelse if (r < 80) then \nbuildThresh (build (rand, depth - 1), build (rand, depth - 1),\nbuild (rand, depth - 1), build (rand, depth - 1))\nelse if (r < 90) then \nbuildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\nbuild (rand, depth - 1))\nelse \nbuildModThresh (build (rand, depth - 1), build (rand, depth - 1),\nbuild (rand, depth - 1))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n","type":"","out":""},{"in":"let g1 () = (5,5,-5)","min":"\nlet g1 () = (5, 5, (-5));;\n","type":"","out":""},{"in":"let g2 () = (6,7,-9)","min":"\nlet g2 () = (6, 7, (-9));;\n","type":"","out":""},{"in":"let g3 () = (5,88,202)","min":"\nlet g3 () = (5, 88, 202);;\n","type":"","out":""},{"in":"let c1 () = (5,90,89)","min":"\nlet c1 () = (5, 90, 89);;\n","type":"","out":""},{"in":"let c2 () = (5,776,-111)","min":"\nlet c2 () = (5, 776, (-111));;\n","type":"","out":""},{"in":"let c3 () = (5,0,-20)","min":"\nlet c3 () = (5, 0, (-20));;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e1 -> sin (pi *. (eval (e1, x, y)))\n  | Cosine e1 -> cos (pi *. (eval (e1, x, y)))\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | AbsThresh (e1,e2,e3) ->\n      let s = eval (e3, x, y) in\n      if (abs_float (eval (e1, x, y))) < (abs_float (eval (e2, x, y)))\n      then s\n      else abs_float s\n  | ModThresh (e1,e2,e3) ->\n      if ((truncate (100. *. (eval (e1, x, y)))) mod 5) = 0\n      then eval (e2, x, y)\n      else eval (e3, x, y);;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | AbsThresh of expr* expr* expr\n  | ModThresh of expr* expr* expr;;\n\nlet buildAbsThresh (e1,e2,e3) = AbsThresh (e1, e2, e3);;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildModThresh (e1,e2,e3) = ModThresh (e1, e2, e3);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (e1,e2,e3,e4) = Thresh (e1, e2, e3, e4);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  let r = rand (0, 99) in\n  if depth = 0\n  then (if r < 50 then buildX () else buildY ())\n  else\n    if r < 5\n    then buildX ()\n    else\n      if r < 10\n      then buildY ()\n      else\n        if r < 30\n        then buildSine (build (rand, (depth - 1)))\n        else\n          if r < 50\n          then buildCosine (build (rand, (depth - 1)))\n          else\n            if r < 60\n            then\n              buildAverage\n                ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n            else\n              if r < 70\n              then\n                buildTimes\n                  ((build (rand, (depth - 1))), (build (rand, (depth - 1))))\n              else\n                if r < 80\n                then\n                  buildThresh\n                    ((build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))),\n                      (build (rand, (depth - 1))))\n                else\n                  if r < 90\n                  then\n                    buildAbsThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))))\n                  else\n                    buildModThresh\n                      ((build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))),\n                        (build (rand, (depth - 1))));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine e1 -> \"sin(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Cosine e1 -> \"cos(pi*\" ^ ((exprToString e1) ^ \")\")\n  | Average (e1,e2) ->\n      \"((\" ^ ((exprToString e1) ^ (\"+\" ^ ((exprToString e2) ^ \")/2)\")))\n  | Times (e1,e2) -> (exprToString e1) ^ (\"*\" ^ (exprToString e2))\n  | Thresh (e1,e2,e3,e4) ->\n      \"(\" ^\n        ((exprToString e1) ^\n           (\"<\" ^\n              ((exprToString e2) ^\n                 (\"?\" ^\n                    ((exprToString e3) ^ (\":\" ^ ((exprToString e4) ^ \")\")))))))\n  | AbsThresh (e1,e2,e3) ->\n      let s = exprToString e3 in\n      \"(abs(\" ^\n        ((exprToString e1) ^\n           (\")<abs(\" ^\n              ((exprToString e2) ^ (\")?\" ^ (s ^ (\":abs(\" ^ (s ^ \"))\")))))))\n  | ModThresh (e1,e2,e3) ->\n      \"((truncate 100*\" ^\n        ((exprToString e1) ^\n           (\") mod 5 = 0?\" ^\n              ((exprToString e2) ^ (\":\" ^ ((exprToString e3) ^ \")\")))));;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":0,"stop":18315},"type":"eval"},"cursor":9133,"time":1.398124868818549e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | (k', v) :: rest -> if k = k' then v else assoc (d,k,rest)\n\n\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' =\n            let rec addIfUnique item l' = match l' with \n              | [] -> \n                  item :: seen\n              | h' :: t' -> \n                  if h' = item then seen else addIfUnique item t' in\n              addIfUnique h seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,x) = \n  let (x', b') = f x in\n    if b' then wwhile (f, x') else x'\n\n\nlet f x = let xx = x*x*x in (xx, xx < 100) in\n  wwhile (f, 2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,x) = \n  let g x = ((f x), (f x) != x) in\n    wwhile (g,x);;\n\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine     of expr\n    | Cosine   of expr\n    | Average  of expr * expr\n    | Times    of expr * expr\n    | Thresh   of expr * expr * expr * expr\t\n    | AbsThresh of expr * expr * expr\n    | ModThresh of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec exprToString e = match e with\n  | VarX -> \"x\"\n  | VarY -> \"y\"\n  | Sine     (e1) -> \"sin(pi*\" ^ (exprToString e1) ^ \")\"\n  | Cosine   (e1) -> \"cos(pi*\" ^ (exprToString e1) ^ \")\"\n  | Average  (e1, e2) -> \"((\" ^ (exprToString e1) ^ \"+\"\n                         ^ (exprToString e2) ^ \")/2)\"\n  | Times    (e1, e2) -> (exprToString e1) ^ \"*\"\n                         ^ (exprToString e2)\n  | Thresh   (e1, e2, e3, e4) -> \"(\" ^ (exprToString e1) ^ \"<\"\n                                 ^ (exprToString e2) ^ \"?\"\n                                 ^ (exprToString e3) ^ \":\"\n                                 ^ (exprToString e4) ^ \")\"\n  | AbsThresh (e1, e2, e3) -> let s = exprToString e3 in\n        \"(abs(\" ^ (exprToString e1) ^ \")<abs(\"\n        ^ (exprToString e2) ^ \")?\"\n        ^ s ^ \":abs(\"\n        ^ s ^ \"))\"\n  | ModThresh (e1, e2, e3) -> \n      \"((truncate 100*\" ^ (exprToString e1) ^ \") mod 5 = 0?\"\n      ^ (exprToString e2) ^ \":\"\n      ^ (exprToString e3) ^ \")\"\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet sampleExpr10 = ModThresh(VarX,VarY,VarX);;\n\nlet _ = exprToString sampleExpr10\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(e1,e2,e3,e4)       = Thresh(e1,e2,e3,e4)\nlet buildAbsThresh(e1,e2,e3)       = AbsThresh(e1,e2,e3)\nlet buildModThresh(e1,e2,e3)\t   = ModThresh(e1,e2,e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX -> x\n  | VarY -> y\n  | Sine     (e1) -> sin(pi *. (eval (e1, x, y)))\n  | Cosine   (e1) -> cos(pi *. (eval (e1, x, y)))\n  | Average  (e1, e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y)))/.2.\n  | Times    (e1, e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh   (e1, e2, e3, e4) \n    -> if (eval (e1, x, y)) < (eval (e2, x, y)) then\n        (eval (e3, x, y)) else\n        (eval (e4, x, y))\n  | AbsThresh (e1, e2, e3) -> let s = eval (e3, x, y) in\n        if abs_float (eval (e1, x, y)) < abs_float (eval (e2, x, y)) then\n          s else\n          abs_float s\n  | ModThresh (e1, e2, e3) -> \n      if (truncate (100. *. (eval (e1, x, y)))) mod 5 = 0 then\n        (eval (e2, x, y)) else\n        (eval (e3, x, y))\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\nlet _ = buildY();;\n\nlet rec build (rand, depth) = \n  let r = rand (0,99) in\n    if depth = 0 then\n      if (r < 50) then\n        buildX()\n      else\n        buildY()\n    else\n\n    if (r < 5) then\n      buildX()\n    else if (r < 10) then\n      buildY()\n    else if (r < 30) then \n      buildSine (build (rand, depth - 1))\n    else if (r < 50) then \n      buildCosine (build (rand, depth - 1))\n    else if (r < 60) then \n      buildAverage (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 70) then \n      buildTimes (build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 80) then \n      buildThresh (build (rand, depth - 1), build (rand, depth - 1),\n                   build (rand, depth - 1), build (rand, depth - 1))\n    else if (r < 90) then \n      buildAbsThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n    else \n      buildModThresh (build (rand, depth - 1), build (rand, depth - 1),\n                      build (rand, depth - 1))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5,5,-5) (*XXXXXXXX*)\nlet g2 () = (6,7,-9) (*XXXXXXXXX*)\nlet g3 () = (5,88,202) (*XXXX*)\n\nlet c1 () = (5,90,89) (*XXXXXXXXX*)\nlet c2 () = (5,776,-111) (*XXXX*)\nlet c3 () = (5,0,-20) (*XXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n","file":"hw2.ml"}
