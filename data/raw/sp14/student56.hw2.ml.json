{"ocaml":[{"in":"let rec assoc (d,k,l) = match l with\n[]                     -> d\n| (k', v)::t when k' = k -> v\n| h::t                   -> assoc (d,k,t)","min":"\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | (k',v)::t when k' = k -> v\n  | h::t -> assoc (d, k, t);;\n","type":"","out":""},{"in":"let _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)])","min":"\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | (k',v)::t when k' = k -> v\n  | h::t -> assoc (d, k, t);;\n\nlet _ =\n  assoc ((-1), \"william\", [(\"ranjit\", 85); (\"william\", 23); (\"moose\", 44)]);;\n","type":"","out":""},{"in":"let _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)])","min":"\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | (k',v)::t when k' = k -> v\n  | h::t -> assoc (d, k, t);;\n\nlet _ = assoc ((-1), \"bob\", [(\"ranjit\", 85); (\"william\", 23); (\"moose\", 44)]);;\n","type":"","out":""},{"in":"let removeDuplicates l = \nlet rec helper (seen,rest) = \nmatch rest with \n[]   -> seen\n| h::t -> \nlet seen' = if List.mem h seen then seen else h::seen in\nlet rest' = t in\nhelper (seen',rest') \nin\nList.rev (helper ([],l))","min":"\nlet removeDuplicates l =\n  let rec helper (seen,rest) =\n    match rest with\n    | [] -> seen\n    | h::t ->\n        let seen' = if List.mem h seen then seen else h :: seen in\n        let rest' = t in helper (seen', rest') in\n  List.rev (helper ([], l));;\n","type":"","out":""},{"in":"let _ = removeDuplicates [1;6;2;4;12;2;13;6;9]","min":"\nlet removeDuplicates l =\n  let rec helper (seen,rest) =\n    match rest with\n    | [] -> seen\n    | h::t ->\n        let seen' = if List.mem h seen then seen else h :: seen in\n        let rest' = t in helper (seen', rest') in\n  List.rev (helper ([], l));;\n\nlet _ = removeDuplicates [1; 6; 2; 4; 12; 2; 13; 6; 9];;\n","type":"","out":""},{"in":"let rec wwhile (f,b) = match f b with\nres, true  -> wwhile (f,res)\n| res, false -> res","min":"\nlet rec wwhile (f,b) =\n  match f b with | (res,true ) -> wwhile (f, res) | (res,false ) -> res;;\n","type":"","out":""},{"in":"let f x = (let xx = x*x*x in (xx, xx < 100)) in wwhile (f, 2)","min":"\nlet rec wwhile (f,b) =\n  match f b with | (res,true ) -> wwhile (f, res) | (res,false ) -> res;;\n\nlet _ = let f x = let xx = (x * x) * x in (xx, (xx < 100)) in wwhile (f, 2);;\n","type":"","out":""},{"in":"let fixpoint (f,b) = \nlet fn f' b' = match f' b' with\nr when r = b' -> (r, false) \n| r'            -> (r', true) in\nwwhile (fn f, b)","min":"\nlet rec wwhile (f,b) =\n  match f b with | (res,true ) -> wwhile (f, res) | (res,false ) -> res;;\n\nlet fixpoint (f,b) =\n  let fn f' b' =\n    match f' b' with | r when r = b' -> (r, false) | r' -> (r', true) in\n  wwhile ((fn f), b);;\n","type":"","out":""},{"in":"let g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0)","min":"\nlet rec wwhile (f,b) =\n  match f b with | (res,true ) -> wwhile (f, res) | (res,false ) -> res;;\n\nlet fixpoint (f,b) =\n  let fn f' b' =\n    match f' b' with | r when r = b' -> (r, false) | r' -> (r', true) in\n  wwhile ((fn f), b);;\n\nlet _ =\n  let g x = truncate (1e6 *. (cos (1e-6 *. (float x)))) in fixpoint (g, 0);;\n","type":"","out":""},{"in":"let collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1","min":"\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 1)","min":"\nlet rec wwhile (f,b) =\n  match f b with | (res,true ) -> wwhile (f, res) | (res,false ) -> res;;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,b) =\n  let fn f' b' =\n    match f' b' with | r when r = b' -> (r, false) | r' -> (r', true) in\n  wwhile ((fn f), b);;\n\nlet _ = fixpoint (collatz, 1);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 3)","min":"\nlet rec wwhile (f,b) =\n  match f b with | (res,true ) -> wwhile (f, res) | (res,false ) -> res;;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,b) =\n  let fn f' b' =\n    match f' b' with | r when r = b' -> (r, false) | r' -> (r', true) in\n  wwhile ((fn f), b);;\n\nlet _ = fixpoint (collatz, 3);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 48)","min":"\nlet rec wwhile (f,b) =\n  match f b with | (res,true ) -> wwhile (f, res) | (res,false ) -> res;;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,b) =\n  let fn f' b' =\n    match f' b' with | r when r = b' -> (r, false) | r' -> (r', true) in\n  wwhile ((fn f), b);;\n\nlet _ = fixpoint (collatz, 48);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 107)","min":"\nlet rec wwhile (f,b) =\n  match f b with | (res,true ) -> wwhile (f, res) | (res,false ) -> res;;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,b) =\n  let fn f' b' =\n    match f' b' with | r when r = b' -> (r, false) | r' -> (r', true) in\n  wwhile ((fn f), b);;\n\nlet _ = fixpoint (collatz, 107);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 9001)","min":"\nlet rec wwhile (f,b) =\n  match f b with | (res,true ) -> wwhile (f, res) | (res,false ) -> res;;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,b) =\n  let fn f' b' =\n    match f' b' with | r when r = b' -> (r, false) | r' -> (r', true) in\n  wwhile ((fn f), b);;\n\nlet _ = fixpoint (collatz, 9001);;\n","type":"","out":""},{"in":"type expr = \nVarX\n| VarY\n| Sine        of expr\n| Cosine      of expr\n| Average     of expr * expr\n| Times       of expr * expr\n| Thresh      of expr * expr * expr * expr\n| Closest     of expr * expr * expr\n| DerivativeX of expr","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n","type":"","out":""},{"in":"let rec exprToString e = match e with\nVarX                          -> \"x\"\n| VarY                          -> \"y\"\n| Sine    exp                   -> \"sin(\" ^ (exprToString exp) ^ \")\"\n| Cosine  exp                   -> \"cos(\" ^ (exprToString exp) ^ \")\"\n| Average (exp1,exp2)           -> \"avg(\" ^ (exprToString exp1) ^ \",\" ^ (exprToString exp2) ^ \")\"\n| Times   (exp1,exp2)           -> (exprToString exp1) ^ \" * \" ^ (exprToString exp2)\n| Thresh  (exp1,exp2,exp3,exp4) -> \"thresh(\" ^ (exprToString exp1) ^ \",\" ^\n(exprToString exp2) ^ \",\" ^ (exprToString exp3) ^ \",\" ^\n(exprToString exp4) ^ \")\"\n| Closest (exp1, exp2, exp3)    -> \"closest(\" ^ (exprToString exp1) ^ \",\" ^ (exprToString exp2) ^ \",\" ^\n(exprToString exp3) ^ \")\"\n| DerivativeX exp               -> \"d/dx(\" ^ (exprToString exp) ^ \")\"","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine exp -> \"sin(\" ^ ((exprToString exp) ^ \")\")\n  | Cosine exp -> \"cos(\" ^ ((exprToString exp) ^ \")\")\n  | Average (exp1,exp2) ->\n      \"avg(\" ^ ((exprToString exp1) ^ (\",\" ^ ((exprToString exp2) ^ \")\")))\n  | Times (exp1,exp2) -> (exprToString exp1) ^ (\" * \" ^ (exprToString exp2))\n  | Thresh (exp1,exp2,exp3,exp4) ->\n      \"thresh(\" ^\n        ((exprToString exp1) ^\n           (\",\" ^\n              ((exprToString exp2) ^\n                 (\",\" ^\n                    ((exprToString exp3) ^\n                       (\",\" ^ ((exprToString exp4) ^ \")\")))))))\n  | Closest (exp1,exp2,exp3) ->\n      \"closest(\" ^\n        ((exprToString exp1) ^\n           (\",\" ^ ((exprToString exp2) ^ (\",\" ^ ((exprToString exp3) ^ \")\")))))\n  | DerivativeX exp -> \"d/dx(\" ^ ((exprToString exp) ^ \")\");;\n","type":"","out":""},{"in":"let sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n","type":"","out":""},{"in":"let _ = exprToString sampleExpr1","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine exp -> \"sin(\" ^ ((exprToString exp) ^ \")\")\n  | Cosine exp -> \"cos(\" ^ ((exprToString exp) ^ \")\")\n  | Average (exp1,exp2) ->\n      \"avg(\" ^ ((exprToString exp1) ^ (\",\" ^ ((exprToString exp2) ^ \")\")))\n  | Times (exp1,exp2) -> (exprToString exp1) ^ (\" * \" ^ (exprToString exp2))\n  | Thresh (exp1,exp2,exp3,exp4) ->\n      \"thresh(\" ^\n        ((exprToString exp1) ^\n           (\",\" ^\n              ((exprToString exp2) ^\n                 (\",\" ^\n                    ((exprToString exp3) ^\n                       (\",\" ^ ((exprToString exp4) ^ \")\")))))))\n  | Closest (exp1,exp2,exp3) ->\n      \"closest(\" ^\n        ((exprToString exp1) ^\n           (\",\" ^ ((exprToString exp2) ^ (\",\" ^ ((exprToString exp3) ^ \")\")))))\n  | DerivativeX exp -> \"d/dx(\" ^ ((exprToString exp) ^ \")\");;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n\nlet _ = exprToString sampleExpr1;;\n","type":"","out":""},{"in":"let buildX()                       = VarX","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet buildX () = VarX;;\n","type":"","out":""},{"in":"let buildY()                       = VarY","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet buildY () = VarY;;\n","type":"","out":""},{"in":"let buildSine(e)                   = Sine(e)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet buildSine e = Sine e;;\n","type":"","out":""},{"in":"let buildCosine(e)                 = Cosine(e)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet buildCosine e = Cosine e;;\n","type":"","out":""},{"in":"let buildAverage(e1,e2)            = Average(e1,e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n","type":"","out":""},{"in":"let buildTimes(e1,e2)              = Times(e1,e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n","type":"","out":""},{"in":"let buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n","type":"","out":""},{"in":"let buildClosest(expr,a,b)         = Closest(expr,a,b)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet buildClosest (expr,a,b) = Closest (expr, a, b);;\n","type":"","out":""},{"in":"let buildDerivativeX(expr)         = DerivativeX(expr)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet buildDerivativeX expr = DerivativeX expr;;\n","type":"","out":""},{"in":"let pi = 4.0 *. atan 1.0","min":"\nlet pi = 4.0 *. (atan 1.0);;\n","type":"","out":""},{"in":"let epsilon = 0.0001","min":"\nlet epsilon = 0.0001;;\n","type":"","out":""},{"in":"let splitSize a b e = (a -. b ) /. float_of_int e","min":"\nlet splitSize a b e = (a -. b) /. (float_of_int e);;\n","type":"","out":""},{"in":"let bound x low hi = match x with\nl when x < low -> low\n| h when x > hi  -> hi\n| x              -> x","min":"\nlet bound x low hi =\n  match x with | l when x < low -> low | h when x > hi -> hi | x -> x;;\n","type":"","out":""},{"in":"let rec eval (e,x,y) = match e with\nVarX                 -> x\n| VarY                 -> y\n| Sine exp             -> sin (pi *. (eval (exp, x, y)))\n| Cosine exp           -> cos (pi *. (eval (exp, x, y)))\n| Average (exp1, exp2) -> let v1, v2 = (eval (exp1,x,y) , (eval (exp2,x,y))) in \n(v1 +. v2) /. 2.0\n| Times (exp1, exp2)   -> let v1, v2 = (eval (exp1,x,y), eval (exp2,x,y)) in (v1 *. v2)\n| Thresh (e1,e2,e3,e4) -> if eval (e1,x,y) < eval (e2,x,y) then \neval (e3,x,y) else eval (e4,x,y)\n| Closest (expr,a,b)   -> let e', a', b' = (eval (expr,x,y), eval (a,x,y), eval (b,x,y)) in \nif (abs_float a' -. e') < abs_float (b' -. e') then a' else b'\n| DerivativeX exp      -> let result = (match exp with\nVarX                -> 1.\n| VarY                -> 0.\n| Sine VarX           -> eval (Cosine VarX, x,y)\n| Cosine VarX         -> 0. -. eval (Sine VarX, x,y)\n| Times (VarX, other) -> eval (other, x, y)\n| Times (other, VarX) -> eval (other, x, y)\n| other               -> (eval (other, x, y) -. eval (other, x -. epsilon, y)) /. epsilon) in\nif ( (abs_float x) <= 1.0 && (abs_float y) <= 1.0) then (bound(1.0)(-1.0)(1.0)) else result","min":"\nlet bound x low hi =\n  match x with | l when x < low -> low | h when x > hi -> hi | x -> x;;\n\nlet epsilon = 0.0001;;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine exp -> sin (pi *. (eval (exp, x, y)))\n  | Cosine exp -> cos (pi *. (eval (exp, x, y)))\n  | Average (exp1,exp2) ->\n      let (v1,v2) = ((eval (exp1, x, y)), (eval (exp2, x, y))) in\n      (v1 +. v2) /. 2.0\n  | Times (exp1,exp2) ->\n      let (v1,v2) = ((eval (exp1, x, y)), (eval (exp2, x, y))) in v1 *. v2\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | Closest (expr,a,b) ->\n      let (e',a',b') =\n        ((eval (expr, x, y)), (eval (a, x, y)), (eval (b, x, y))) in\n      if ((abs_float a') -. e') < (abs_float (b' -. e')) then a' else b'\n  | DerivativeX exp ->\n      let result =\n        match exp with\n        | VarX  -> 1.\n        | VarY  -> 0.\n        | Sine (VarX ) -> eval ((Cosine VarX), x, y)\n        | Cosine (VarX ) -> 0. -. (eval ((Sine VarX), x, y))\n        | Times (VarX ,other) -> eval (other, x, y)\n        | Times (other,VarX ) -> eval (other, x, y)\n        | other ->\n            ((eval (other, x, y)) -. (eval (other, (x -. epsilon), y))) /.\n              epsilon in\n      if ((abs_float x) <= 1.0) && ((abs_float y) <= 1.0)\n      then bound 1.0 (-1.0) 1.0\n      else result;;\n","type":"","out":""},{"in":"let _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5)","min":"\nlet bound x low hi =\n  match x with | l when x < low -> low | h when x > hi -> hi | x -> x;;\n\nlet epsilon = 0.0001;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine exp -> sin (pi *. (eval (exp, x, y)))\n  | Cosine exp -> cos (pi *. (eval (exp, x, y)))\n  | Average (exp1,exp2) ->\n      let (v1,v2) = ((eval (exp1, x, y)), (eval (exp2, x, y))) in\n      (v1 +. v2) /. 2.0\n  | Times (exp1,exp2) ->\n      let (v1,v2) = ((eval (exp1, x, y)), (eval (exp2, x, y))) in v1 *. v2\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | Closest (expr,a,b) ->\n      let (e',a',b') =\n        ((eval (expr, x, y)), (eval (a, x, y)), (eval (b, x, y))) in\n      if ((abs_float a') -. e') < (abs_float (b' -. e')) then a' else b'\n  | DerivativeX exp ->\n      let result =\n        match exp with\n        | VarX  -> 1.\n        | VarY  -> 0.\n        | Sine (VarX ) -> eval ((Cosine VarX), x, y)\n        | Cosine (VarX ) -> 0. -. (eval ((Sine VarX), x, y))\n        | Times (VarX ,other) -> eval (other, x, y)\n        | Times (other,VarX ) -> eval (other, x, y)\n        | other ->\n            ((eval (other, x, y)) -. (eval (other, (x -. epsilon), y))) /.\n              epsilon in\n      if ((abs_float x) <= 1.0) && ((abs_float y) <= 1.0)\n      then bound 1.0 (-1.0) 1.0\n      else result;;\n\nlet _ = eval ((Sine (Average (VarX, VarY))), 0.5, (-0.5));;\n","type":"","out":""},{"in":"let _ = eval (Sine(Average(VarX,VarY)),0.3,0.3)","min":"\nlet bound x low hi =\n  match x with | l when x < low -> low | h when x > hi -> hi | x -> x;;\n\nlet epsilon = 0.0001;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine exp -> sin (pi *. (eval (exp, x, y)))\n  | Cosine exp -> cos (pi *. (eval (exp, x, y)))\n  | Average (exp1,exp2) ->\n      let (v1,v2) = ((eval (exp1, x, y)), (eval (exp2, x, y))) in\n      (v1 +. v2) /. 2.0\n  | Times (exp1,exp2) ->\n      let (v1,v2) = ((eval (exp1, x, y)), (eval (exp2, x, y))) in v1 *. v2\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | Closest (expr,a,b) ->\n      let (e',a',b') =\n        ((eval (expr, x, y)), (eval (a, x, y)), (eval (b, x, y))) in\n      if ((abs_float a') -. e') < (abs_float (b' -. e')) then a' else b'\n  | DerivativeX exp ->\n      let result =\n        match exp with\n        | VarX  -> 1.\n        | VarY  -> 0.\n        | Sine (VarX ) -> eval ((Cosine VarX), x, y)\n        | Cosine (VarX ) -> 0. -. (eval ((Sine VarX), x, y))\n        | Times (VarX ,other) -> eval (other, x, y)\n        | Times (other,VarX ) -> eval (other, x, y)\n        | other ->\n            ((eval (other, x, y)) -. (eval (other, (x -. epsilon), y))) /.\n              epsilon in\n      if ((abs_float x) <= 1.0) && ((abs_float y) <= 1.0)\n      then bound 1.0 (-1.0) 1.0\n      else result;;\n\nlet _ = eval ((Sine (Average (VarX, VarY))), 0.3, 0.3);;\n","type":"","out":""},{"in":"let eval_fn e (x,y) = \nlet rv = eval (e,x,y) in\nassert (-1.0 <= rv && rv <= 1.0);\nrv","min":"\nlet bound x low hi =\n  match x with | l when x < low -> low | h when x > hi -> hi | x -> x;;\n\nlet epsilon = 0.0001;;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine exp -> sin (pi *. (eval (exp, x, y)))\n  | Cosine exp -> cos (pi *. (eval (exp, x, y)))\n  | Average (exp1,exp2) ->\n      let (v1,v2) = ((eval (exp1, x, y)), (eval (exp2, x, y))) in\n      (v1 +. v2) /. 2.0\n  | Times (exp1,exp2) ->\n      let (v1,v2) = ((eval (exp1, x, y)), (eval (exp2, x, y))) in v1 *. v2\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | Closest (expr,a,b) ->\n      let (e',a',b') =\n        ((eval (expr, x, y)), (eval (a, x, y)), (eval (b, x, y))) in\n      if ((abs_float a') -. e') < (abs_float (b' -. e')) then a' else b'\n  | DerivativeX exp ->\n      let result =\n        match exp with\n        | VarX  -> 1.\n        | VarY  -> 0.\n        | Sine (VarX ) -> eval ((Cosine VarX), x, y)\n        | Cosine (VarX ) -> 0. -. (eval ((Sine VarX), x, y))\n        | Times (VarX ,other) -> eval (other, x, y)\n        | Times (other,VarX ) -> eval (other, x, y)\n        | other ->\n            ((eval (other, x, y)) -. (eval (other, (x -. epsilon), y))) /.\n              epsilon in\n      if ((abs_float x) <= 1.0) && ((abs_float y) <= 1.0)\n      then bound 1.0 (-1.0) 1.0\n      else result;;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n","type":"","out":""},{"in":"let sampleExpr =\nbuildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\nbuildX()),buildTimes(buildCosine (buildCosine (buildAverage\n(buildTimes (buildY(),buildY()),buildCosine (buildX())))),\nbuildCosine (buildTimes (buildSine (buildCosine\n(buildY())),buildAverage (buildSine (buildX()), buildTimes\n(buildX(),buildX()))))))),buildY())))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet sampleExpr =\n  buildCosine\n    (buildSine\n       (buildTimes\n          ((buildCosine\n              (buildAverage\n                 ((buildCosine (buildX ())),\n                   (buildTimes\n                      ((buildCosine\n                          (buildCosine\n                             (buildAverage\n                                ((buildTimes ((buildY ()), (buildY ()))),\n                                  (buildCosine (buildX ())))))),\n                        (buildCosine\n                           (buildTimes\n                              ((buildSine (buildCosine (buildY ()))),\n                                (buildAverage\n                                   ((buildSine (buildX ())),\n                                     (buildTimes ((buildX ()), (buildX ()))))))))))))),\n            (buildY ()))));;\n","type":"","out":""},{"in":"let _ = eval (sampleExpr,0.5,0.2)","min":"\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet bound x low hi =\n  match x with | l when x < low -> low | h when x > hi -> hi | x -> x;;\n\nlet epsilon = 0.0001;;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine exp -> sin (pi *. (eval (exp, x, y)))\n  | Cosine exp -> cos (pi *. (eval (exp, x, y)))\n  | Average (exp1,exp2) ->\n      let (v1,v2) = ((eval (exp1, x, y)), (eval (exp2, x, y))) in\n      (v1 +. v2) /. 2.0\n  | Times (exp1,exp2) ->\n      let (v1,v2) = ((eval (exp1, x, y)), (eval (exp2, x, y))) in v1 *. v2\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | Closest (expr,a,b) ->\n      let (e',a',b') =\n        ((eval (expr, x, y)), (eval (a, x, y)), (eval (b, x, y))) in\n      if ((abs_float a') -. e') < (abs_float (b' -. e')) then a' else b'\n  | DerivativeX exp ->\n      let result =\n        match exp with\n        | VarX  -> 1.\n        | VarY  -> 0.\n        | Sine (VarX ) -> eval ((Cosine VarX), x, y)\n        | Cosine (VarX ) -> 0. -. (eval ((Sine VarX), x, y))\n        | Times (VarX ,other) -> eval (other, x, y)\n        | Times (other,VarX ) -> eval (other, x, y)\n        | other ->\n            ((eval (other, x, y)) -. (eval (other, (x -. epsilon), y))) /.\n              epsilon in\n      if ((abs_float x) <= 1.0) && ((abs_float y) <= 1.0)\n      then bound 1.0 (-1.0) 1.0\n      else result;;\n\nlet sampleExpr =\n  buildCosine\n    (buildSine\n       (buildTimes\n          ((buildCosine\n              (buildAverage\n                 ((buildCosine (buildX ())),\n                   (buildTimes\n                      ((buildCosine\n                          (buildCosine\n                             (buildAverage\n                                ((buildTimes ((buildY ()), (buildY ()))),\n                                  (buildCosine (buildX ())))))),\n                        (buildCosine\n                           (buildTimes\n                              ((buildSine (buildCosine (buildY ()))),\n                                (buildAverage\n                                   ((buildSine (buildX ())),\n                                     (buildTimes ((buildX ()), (buildX ()))))))))))))),\n            (buildY ()))));;\n\nlet _ = eval (sampleExpr, 0.5, 0.2);;\n","type":"","out":""},{"in":"let sampleExpr2 =\nbuildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet sampleExpr2 =\n  buildThresh\n    ((buildX ()), (buildY ()), (buildSine (buildX ())),\n      (buildCosine (buildY ())));;\n","type":"","out":""},{"in":"let rec build (rand, depth) = match depth with\n1 -> ( match rand (0,2) with  \n0 -> VarX\n| 1 -> VarY \n| n -> failwith (\"rand (0,2) returned unexpected value \" ^ string_of_int n) )\n| n -> match rand (0,7) with\n0 -> Sine (build (rand, n - 1))\n| 1 -> Cosine  (build(rand, n - 1))\n| 2 -> Average (build(rand, n - 1), build(rand, n - 1))\n| 3 -> Times (build(rand, n - 1), build(rand, n - 1))\n| 4 -> Thresh (build(rand, n - 1), build(rand, n - 1), build(rand, n -1), build (rand, n - 1))\n| 5 -> Closest (build(rand, n - 1), build(rand, n - 1), build(rand, n -1))\n| 6 -> DerivativeX (build(rand, n- 1))\n| n -> failwith (\"rand (0,7) returned unexpected value \" ^ string_of_int n)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet rec build (rand,depth) =\n  match depth with\n  | 1 ->\n      (match rand (0, 2) with\n       | 0 -> VarX\n       | 1 -> VarY\n       | n ->\n           failwith\n             (\"rand (0,2) returned unexpected value \" ^ (string_of_int n)))\n  | n ->\n      (match rand (0, 7) with\n       | 0 -> Sine (build (rand, (n - 1)))\n       | 1 -> Cosine (build (rand, (n - 1)))\n       | 2 -> Average ((build (rand, (n - 1))), (build (rand, (n - 1))))\n       | 3 -> Times ((build (rand, (n - 1))), (build (rand, (n - 1))))\n       | 4 ->\n           Thresh\n             ((build (rand, (n - 1))), (build (rand, (n - 1))),\n               (build (rand, (n - 1))), (build (rand, (n - 1))))\n       | 5 ->\n           Closest\n             ((build (rand, (n - 1))), (build (rand, (n - 1))),\n               (build (rand, (n - 1))))\n       | 6 -> DerivativeX (build (rand, (n - 1)))\n       | n ->\n           failwith\n             (\"rand (0,7) returned unexpected value \" ^ (string_of_int n)));;\n","type":"","out":""},{"in":"let g1 () = (9,2,3)","min":"\nlet g1 () = (9, 2, 3);;\n","type":"","out":""},{"in":"let g2 () = (10,9,2)","min":"\nlet g2 () = (10, 9, 2);;\n","type":"","out":""},{"in":"let g3 () = (6,90,3)","min":"\nlet g3 () = (6, 90, 3);;\n","type":"","out":""},{"in":"let c1 () = (4,5,6)","min":"\nlet c1 () = (4, 5, 6);;\n","type":"","out":""},{"in":"let c2 () = (5,6,7)","min":"\nlet c2 () = (5, 6, 7);;\n","type":"","out":""},{"in":"let c3 () = (6,7,8)","min":"\nlet c3 () = (6, 7, 8);;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet bound x low hi =\n  match x with | l when x < low -> low | h when x > hi -> hi | x -> x;;\n\nlet epsilon = 0.0001;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine exp -> sin (pi *. (eval (exp, x, y)))\n  | Cosine exp -> cos (pi *. (eval (exp, x, y)))\n  | Average (exp1,exp2) ->\n      let (v1,v2) = ((eval (exp1, x, y)), (eval (exp2, x, y))) in\n      (v1 +. v2) /. 2.0\n  | Times (exp1,exp2) ->\n      let (v1,v2) = ((eval (exp1, x, y)), (eval (exp2, x, y))) in v1 *. v2\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | Closest (expr,a,b) ->\n      let (e',a',b') =\n        ((eval (expr, x, y)), (eval (a, x, y)), (eval (b, x, y))) in\n      if ((abs_float a') -. e') < (abs_float (b' -. e')) then a' else b'\n  | DerivativeX exp ->\n      let result =\n        match exp with\n        | VarX  -> 1.\n        | VarY  -> 0.\n        | Sine (VarX ) -> eval ((Cosine VarX), x, y)\n        | Cosine (VarX ) -> 0. -. (eval ((Sine VarX), x, y))\n        | Times (VarX ,other) -> eval (other, x, y)\n        | Times (other,VarX ) -> eval (other, x, y)\n        | other ->\n            ((eval (other, x, y)) -. (eval (other, (x -. epsilon), y))) /.\n              epsilon in\n      if ((abs_float x) <= 1.0) && ((abs_float y) <= 1.0)\n      then bound 1.0 (-1.0) 1.0\n      else result;;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet rec build (rand,depth) =\n  match depth with\n  | 1 ->\n      (match rand (0, 2) with\n       | 0 -> VarX\n       | 1 -> VarY\n       | n ->\n           failwith\n             (\"rand (0,2) returned unexpected value \" ^ (string_of_int n)))\n  | n ->\n      (match rand (0, 7) with\n       | 0 -> Sine (build (rand, (n - 1)))\n       | 1 -> Cosine (build (rand, (n - 1)))\n       | 2 -> Average ((build (rand, (n - 1))), (build (rand, (n - 1))))\n       | 3 -> Times ((build (rand, (n - 1))), (build (rand, (n - 1))))\n       | 4 ->\n           Thresh\n             ((build (rand, (n - 1))), (build (rand, (n - 1))),\n               (build (rand, (n - 1))), (build (rand, (n - 1))))\n       | 5 ->\n           Closest\n             ((build (rand, (n - 1))), (build (rand, (n - 1))),\n               (build (rand, (n - 1))))\n       | 6 -> DerivativeX (build (rand, (n - 1)))\n       | n ->\n           failwith\n             (\"rand (0,7) returned unexpected value \" ^ (string_of_int n)));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine exp -> \"sin(\" ^ ((exprToString exp) ^ \")\")\n  | Cosine exp -> \"cos(\" ^ ((exprToString exp) ^ \")\")\n  | Average (exp1,exp2) ->\n      \"avg(\" ^ ((exprToString exp1) ^ (\",\" ^ ((exprToString exp2) ^ \")\")))\n  | Times (exp1,exp2) -> (exprToString exp1) ^ (\" * \" ^ (exprToString exp2))\n  | Thresh (exp1,exp2,exp3,exp4) ->\n      \"thresh(\" ^\n        ((exprToString exp1) ^\n           (\",\" ^\n              ((exprToString exp2) ^\n                 (\",\" ^\n                    ((exprToString exp3) ^\n                       (\",\" ^ ((exprToString exp4) ^ \")\")))))))\n  | Closest (exp1,exp2,exp3) ->\n      \"closest(\" ^\n        ((exprToString exp1) ^\n           (\",\" ^ ((exprToString exp2) ^ (\",\" ^ ((exprToString exp3) ^ \")\")))))\n  | DerivativeX exp -> \"d/dx(\" ^ ((exprToString exp) ^ \")\");;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet bound x low hi =\n  match x with | l when x < low -> low | h when x > hi -> hi | x -> x;;\n\nlet epsilon = 0.0001;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine exp -> sin (pi *. (eval (exp, x, y)))\n  | Cosine exp -> cos (pi *. (eval (exp, x, y)))\n  | Average (exp1,exp2) ->\n      let (v1,v2) = ((eval (exp1, x, y)), (eval (exp2, x, y))) in\n      (v1 +. v2) /. 2.0\n  | Times (exp1,exp2) ->\n      let (v1,v2) = ((eval (exp1, x, y)), (eval (exp2, x, y))) in v1 *. v2\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | Closest (expr,a,b) ->\n      let (e',a',b') =\n        ((eval (expr, x, y)), (eval (a, x, y)), (eval (b, x, y))) in\n      if ((abs_float a') -. e') < (abs_float (b' -. e')) then a' else b'\n  | DerivativeX exp ->\n      let result =\n        match exp with\n        | VarX  -> 1.\n        | VarY  -> 0.\n        | Sine (VarX ) -> eval ((Cosine VarX), x, y)\n        | Cosine (VarX ) -> 0. -. (eval ((Sine VarX), x, y))\n        | Times (VarX ,other) -> eval (other, x, y)\n        | Times (other,VarX ) -> eval (other, x, y)\n        | other ->\n            ((eval (other, x, y)) -. (eval (other, (x -. epsilon), y))) /.\n              epsilon in\n      if ((abs_float x) <= 1.0) && ((abs_float y) <= 1.0)\n      then bound 1.0 (-1.0) 1.0\n      else result;;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet rec build (rand,depth) =\n  match depth with\n  | 1 ->\n      (match rand (0, 2) with\n       | 0 -> VarX\n       | 1 -> VarY\n       | n ->\n           failwith\n             (\"rand (0,2) returned unexpected value \" ^ (string_of_int n)))\n  | n ->\n      (match rand (0, 7) with\n       | 0 -> Sine (build (rand, (n - 1)))\n       | 1 -> Cosine (build (rand, (n - 1)))\n       | 2 -> Average ((build (rand, (n - 1))), (build (rand, (n - 1))))\n       | 3 -> Times ((build (rand, (n - 1))), (build (rand, (n - 1))))\n       | 4 ->\n           Thresh\n             ((build (rand, (n - 1))), (build (rand, (n - 1))),\n               (build (rand, (n - 1))), (build (rand, (n - 1))))\n       | 5 ->\n           Closest\n             ((build (rand, (n - 1))), (build (rand, (n - 1))),\n               (build (rand, (n - 1))))\n       | 6 -> DerivativeX (build (rand, (n - 1)))\n       | n ->\n           failwith\n             (\"rand (0,7) returned unexpected value \" ^ (string_of_int n)));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine exp -> \"sin(\" ^ ((exprToString exp) ^ \")\")\n  | Cosine exp -> \"cos(\" ^ ((exprToString exp) ^ \")\")\n  | Average (exp1,exp2) ->\n      \"avg(\" ^ ((exprToString exp1) ^ (\",\" ^ ((exprToString exp2) ^ \")\")))\n  | Times (exp1,exp2) -> (exprToString exp1) ^ (\" * \" ^ (exprToString exp2))\n  | Thresh (exp1,exp2,exp3,exp4) ->\n      \"thresh(\" ^\n        ((exprToString exp1) ^\n           (\",\" ^\n              ((exprToString exp2) ^\n                 (\",\" ^\n                    ((exprToString exp3) ^\n                       (\",\" ^ ((exprToString exp4) ^ \")\")))))))\n  | Closest (exp1,exp2,exp3) ->\n      \"closest(\" ^\n        ((exprToString exp1) ^\n           (\",\" ^ ((exprToString exp2) ^ (\",\" ^ ((exprToString exp3) ^ \")\")))))\n  | DerivativeX exp -> \"d/dx(\" ^ ((exprToString exp) ^ \")\");;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":0,"stop":18272},"type":"eval"},"cursor":0,"time":1.398115822267207e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n    []                     -> d\n  | (k', v)::t when k' = k -> v\n  | h::t                   -> assoc (d,k,t)\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        []   -> seen\n      | h::t -> \n          let seen' = if List.mem h seen then seen else h::seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,b) = match f b with\n    res, true  -> wwhile (f,res)\n  | res, false -> res;;\n\n\nlet f x = (let xx = x*x*x in (xx, xx < 100)) in wwhile (f, 2)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,b) = \n  let fn f' b' = match f' b' with\n      r when r = b' -> (r, false) \n    | r'            -> (r', true) in\n    wwhile (fn f, b) ;;\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine        of expr\n    | Cosine      of expr\n    | Average     of expr * expr\n    | Times       of expr * expr\n    | Thresh      of expr * expr * expr * expr\n    | Closest     of expr * expr * expr\n    | DerivativeX of expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec exprToString e = match e with\n    VarX                          -> \"x\"\n  | VarY                          -> \"y\"\n  | Sine    exp                   -> \"sin(\" ^ (exprToString exp) ^ \")\"\n  | Cosine  exp                   -> \"cos(\" ^ (exprToString exp) ^ \")\"\n  | Average (exp1,exp2)           -> \"avg(\" ^ (exprToString exp1) ^ \",\" ^ (exprToString exp2) ^ \")\"\n  | Times   (exp1,exp2)           -> (exprToString exp1) ^ \" * \" ^ (exprToString exp2)\n  | Thresh  (exp1,exp2,exp3,exp4) -> \"thresh(\" ^ (exprToString exp1) ^ \",\" ^\n                                     (exprToString exp2) ^ \",\" ^ (exprToString exp3) ^ \",\" ^\n                                     (exprToString exp4) ^ \")\"\n  | Closest (exp1, exp2, exp3)    -> \"closest(\" ^ (exprToString exp1) ^ \",\" ^ (exprToString exp2) ^ \",\" ^\n                                     (exprToString exp3) ^ \")\"\n  | DerivativeX exp               -> \"d/dx(\" ^ (exprToString exp) ^ \")\"\n\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet _ = exprToString sampleExpr1 \n\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\nlet buildClosest(expr,a,b)         = Closest(expr,a,b)\nlet buildDerivativeX(expr)         = DerivativeX(expr)\n\n\nlet pi = 4.0 *. atan 1.0\nlet epsilon = 0.0001\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet splitSize a b e = (a -. b ) /. float_of_int e\n\nlet bound x low hi = match x with\n    l when x < low -> low\n  | h when x > hi  -> hi\n  | x              -> x\n\nlet rec eval (e,x,y) = match e with\n    VarX                 -> x\n  | VarY                 -> y\n  | Sine exp             -> sin (pi *. (eval (exp, x, y)))\n  | Cosine exp           -> cos (pi *. (eval (exp, x, y)))\n  | Average (exp1, exp2) -> let v1, v2 = (eval (exp1,x,y) , (eval (exp2,x,y))) in \n        (v1 +. v2) /. 2.0\n  | Times (exp1, exp2)   -> let v1, v2 = (eval (exp1,x,y), eval (exp2,x,y)) in (v1 *. v2)\n  | Thresh (e1,e2,e3,e4) -> if eval (e1,x,y) < eval (e2,x,y) then \n        eval (e3,x,y) else eval (e4,x,y)\n  | Closest (expr,a,b)   -> let e', a', b' = (eval (expr,x,y), eval (a,x,y), eval (b,x,y)) in \n        if (abs_float a' -. e') < abs_float (b' -. e') then a' else b'\n  | DerivativeX exp      -> let result = (match exp with\n                                             VarX                -> 1.\n                                           | VarY                -> 0.\n                                           | Sine VarX           -> eval (Cosine VarX, x,y)\n                                           | Cosine VarX         -> 0. -. eval (Sine VarX, x,y)\n                                           | Times (VarX, other) -> eval (other, x, y)\n                                           | Times (other, VarX) -> eval (other, x, y)\n                                           | other               -> (eval (other, x, y) -. eval (other, x -. epsilon, y)) /. epsilon) in\n        if ( (abs_float x) <= 1.0 && (abs_float y) <= 1.0) then (bound(1.0)(-1.0)(1.0)) else result\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = match depth with\n    1 -> ( match rand (0,2) with  \n             0 -> VarX\n           | 1 -> VarY \n           | n -> failwith (\"rand (0,2) returned unexpected value \" ^ string_of_int n) )\n  | n -> match rand (0,7) with\n      0 -> Sine (build (rand, n - 1))\n    | 1 -> Cosine  (build(rand, n - 1))\n    | 2 -> Average (build(rand, n - 1), build(rand, n - 1))\n    | 3 -> Times (build(rand, n - 1), build(rand, n - 1))\n    | 4 -> Thresh (build(rand, n - 1), build(rand, n - 1), build(rand, n -1), build (rand, n - 1))\n    | 5 -> Closest (build(rand, n - 1), build(rand, n - 1), build(rand, n -1))\n    | 6 -> DerivativeX (build(rand, n- 1))\n    | n -> failwith (\"rand (0,7) returned unexpected value \" ^ string_of_int n)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (9,2,3)\nlet g2 () = (10,9,2)\nlet g3 () = (6,90,3)\n\nlet c1 () = (4,5,6)\nlet c2 () = (5,6,7)\nlet c3 () = (6,7,8)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec assoc (d,k,l) = match l with\n[]                     -> d\n| (k', v)::t when k' = k -> v\n| h::t                   -> assoc (d,k,t)","min":"\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | (k',v)::t when k' = k -> v\n  | h::t -> assoc (d, k, t);;\n","type":"","out":""},{"in":"let _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)])","min":"\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | (k',v)::t when k' = k -> v\n  | h::t -> assoc (d, k, t);;\n\nlet _ =\n  assoc ((-1), \"william\", [(\"ranjit\", 85); (\"william\", 23); (\"moose\", 44)]);;\n","type":"","out":""},{"in":"let _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)])","min":"\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | (k',v)::t when k' = k -> v\n  | h::t -> assoc (d, k, t);;\n\nlet _ = assoc ((-1), \"bob\", [(\"ranjit\", 85); (\"william\", 23); (\"moose\", 44)]);;\n","type":"","out":""},{"in":"let removeDuplicates l = \nlet rec helper (seen,rest) = \nmatch rest with \n[]   -> seen\n| h::t -> \nlet seen' = if List.mem h seen then seen else h::seen in\nlet rest' = t in\nhelper (seen',rest') \nin\nList.rev (helper ([],l))","min":"\nlet removeDuplicates l =\n  let rec helper (seen,rest) =\n    match rest with\n    | [] -> seen\n    | h::t ->\n        let seen' = if List.mem h seen then seen else h :: seen in\n        let rest' = t in helper (seen', rest') in\n  List.rev (helper ([], l));;\n","type":"","out":""},{"in":"let _ = removeDuplicates [1;6;2;4;12;2;13;6;9]","min":"\nlet removeDuplicates l =\n  let rec helper (seen,rest) =\n    match rest with\n    | [] -> seen\n    | h::t ->\n        let seen' = if List.mem h seen then seen else h :: seen in\n        let rest' = t in helper (seen', rest') in\n  List.rev (helper ([], l));;\n\nlet _ = removeDuplicates [1; 6; 2; 4; 12; 2; 13; 6; 9];;\n","type":"","out":""},{"in":"let rec wwhile (f,b) = match f b with\nres, true  -> wwhile (f,res)\n| res, false -> res","min":"\nlet rec wwhile (f,b) =\n  match f b with | (res,true ) -> wwhile (f, res) | (res,false ) -> res;;\n","type":"","out":""},{"in":"let f x = (let xx = x*x*x in (xx, xx < 100)) in wwhile (f, 2)","min":"\nlet rec wwhile (f,b) =\n  match f b with | (res,true ) -> wwhile (f, res) | (res,false ) -> res;;\n\nlet _ = let f x = let xx = (x * x) * x in (xx, (xx < 100)) in wwhile (f, 2);;\n","type":"","out":""},{"in":"let fixpoint (f,b) = \nlet fn f' b' = match f' b' with\nr when r = b' -> (r, false) \n| r'            -> (r', true) in\nwwhile (fn f, b)","min":"\nlet rec wwhile (f,b) =\n  match f b with | (res,true ) -> wwhile (f, res) | (res,false ) -> res;;\n\nlet fixpoint (f,b) =\n  let fn f' b' =\n    match f' b' with | r when r = b' -> (r, false) | r' -> (r', true) in\n  wwhile ((fn f), b);;\n","type":"","out":""},{"in":"let g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0)","min":"\nlet rec wwhile (f,b) =\n  match f b with | (res,true ) -> wwhile (f, res) | (res,false ) -> res;;\n\nlet fixpoint (f,b) =\n  let fn f' b' =\n    match f' b' with | r when r = b' -> (r, false) | r' -> (r', true) in\n  wwhile ((fn f), b);;\n\nlet _ =\n  let g x = truncate (1e6 *. (cos (1e-6 *. (float x)))) in fixpoint (g, 0);;\n","type":"","out":""},{"in":"let collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1","min":"\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 1)","min":"\nlet rec wwhile (f,b) =\n  match f b with | (res,true ) -> wwhile (f, res) | (res,false ) -> res;;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,b) =\n  let fn f' b' =\n    match f' b' with | r when r = b' -> (r, false) | r' -> (r', true) in\n  wwhile ((fn f), b);;\n\nlet _ = fixpoint (collatz, 1);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 3)","min":"\nlet rec wwhile (f,b) =\n  match f b with | (res,true ) -> wwhile (f, res) | (res,false ) -> res;;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,b) =\n  let fn f' b' =\n    match f' b' with | r when r = b' -> (r, false) | r' -> (r', true) in\n  wwhile ((fn f), b);;\n\nlet _ = fixpoint (collatz, 3);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 48)","min":"\nlet rec wwhile (f,b) =\n  match f b with | (res,true ) -> wwhile (f, res) | (res,false ) -> res;;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,b) =\n  let fn f' b' =\n    match f' b' with | r when r = b' -> (r, false) | r' -> (r', true) in\n  wwhile ((fn f), b);;\n\nlet _ = fixpoint (collatz, 48);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 107)","min":"\nlet rec wwhile (f,b) =\n  match f b with | (res,true ) -> wwhile (f, res) | (res,false ) -> res;;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,b) =\n  let fn f' b' =\n    match f' b' with | r when r = b' -> (r, false) | r' -> (r', true) in\n  wwhile ((fn f), b);;\n\nlet _ = fixpoint (collatz, 107);;\n","type":"","out":""},{"in":"let _ = fixpoint (collatz, 9001)","min":"\nlet rec wwhile (f,b) =\n  match f b with | (res,true ) -> wwhile (f, res) | (res,false ) -> res;;\n\nlet collatz n =\n  match n with | 1 -> 1 | _ when (n mod 2) = 0 -> n / 2 | _ -> (3 * n) + 1;;\n\nlet fixpoint (f,b) =\n  let fn f' b' =\n    match f' b' with | r when r = b' -> (r, false) | r' -> (r', true) in\n  wwhile ((fn f), b);;\n\nlet _ = fixpoint (collatz, 9001);;\n","type":"","out":""},{"in":"type expr = \nVarX\n| VarY\n| Sine        of expr\n| Cosine      of expr\n| Average     of expr * expr\n| Times       of expr * expr\n| Thresh      of expr * expr * expr * expr\n| Closest     of expr * expr * expr\n| DerivativeX of expr","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n","type":"","out":""},{"in":"let rec exprToString e = match e with\nVarX                          -> \"x\"\n| VarY                          -> \"y\"\n| Sine    exp                   -> \"sin(\" ^ (exprToString exp) ^ \")\"\n| Cosine  exp                   -> \"cos(\" ^ (exprToString exp) ^ \")\"\n| Average (exp1,exp2)           -> \"avg(\" ^ (exprToString exp1) ^ \",\" ^ (exprToString exp2) ^ \")\"\n| Times   (exp1,exp2)           -> (exprToString exp1) ^ \" * \" ^ (exprToString exp2)\n| Thresh  (exp1,exp2,exp3,exp4) -> \"thresh(\" ^ (exprToString exp1) ^ \",\" ^\n(exprToString exp2) ^ \",\" ^ (exprToString exp3) ^ \",\" ^\n(exprToString exp4) ^ \")\"\n| Closest (exp1, exp2, exp3)    -> \"closest(\" ^ (exprToString exp1) ^ \",\" ^ (exprToString exp2) ^ \",\" ^\n(exprToString exp3) ^ \")\"\n| DerivativeX exp               -> \"d/dx(\" ^ (exprToString exp) ^ \")\"","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine exp -> \"sin(\" ^ ((exprToString exp) ^ \")\")\n  | Cosine exp -> \"cos(\" ^ ((exprToString exp) ^ \")\")\n  | Average (exp1,exp2) ->\n      \"avg(\" ^ ((exprToString exp1) ^ (\",\" ^ ((exprToString exp2) ^ \")\")))\n  | Times (exp1,exp2) -> (exprToString exp1) ^ (\" * \" ^ (exprToString exp2))\n  | Thresh (exp1,exp2,exp3,exp4) ->\n      \"thresh(\" ^\n        ((exprToString exp1) ^\n           (\",\" ^\n              ((exprToString exp2) ^\n                 (\",\" ^\n                    ((exprToString exp3) ^\n                       (\",\" ^ ((exprToString exp4) ^ \")\")))))))\n  | Closest (exp1,exp2,exp3) ->\n      \"closest(\" ^\n        ((exprToString exp1) ^\n           (\",\" ^ ((exprToString exp2) ^ (\",\" ^ ((exprToString exp3) ^ \")\")))))\n  | DerivativeX exp -> \"d/dx(\" ^ ((exprToString exp) ^ \")\");;\n","type":"","out":""},{"in":"let sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n","type":"","out":""},{"in":"let _ = exprToString sampleExpr1","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine exp -> \"sin(\" ^ ((exprToString exp) ^ \")\")\n  | Cosine exp -> \"cos(\" ^ ((exprToString exp) ^ \")\")\n  | Average (exp1,exp2) ->\n      \"avg(\" ^ ((exprToString exp1) ^ (\",\" ^ ((exprToString exp2) ^ \")\")))\n  | Times (exp1,exp2) -> (exprToString exp1) ^ (\" * \" ^ (exprToString exp2))\n  | Thresh (exp1,exp2,exp3,exp4) ->\n      \"thresh(\" ^\n        ((exprToString exp1) ^\n           (\",\" ^\n              ((exprToString exp2) ^\n                 (\",\" ^\n                    ((exprToString exp3) ^\n                       (\",\" ^ ((exprToString exp4) ^ \")\")))))))\n  | Closest (exp1,exp2,exp3) ->\n      \"closest(\" ^\n        ((exprToString exp1) ^\n           (\",\" ^ ((exprToString exp2) ^ (\",\" ^ ((exprToString exp3) ^ \")\")))))\n  | DerivativeX exp -> \"d/dx(\" ^ ((exprToString exp) ^ \")\");;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n\nlet _ = exprToString sampleExpr1;;\n","type":"","out":""},{"in":"let buildX()                       = VarX","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet buildX () = VarX;;\n","type":"","out":""},{"in":"let buildY()                       = VarY","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet buildY () = VarY;;\n","type":"","out":""},{"in":"let buildSine(e)                   = Sine(e)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet buildSine e = Sine e;;\n","type":"","out":""},{"in":"let buildCosine(e)                 = Cosine(e)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet buildCosine e = Cosine e;;\n","type":"","out":""},{"in":"let buildAverage(e1,e2)            = Average(e1,e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n","type":"","out":""},{"in":"let buildTimes(e1,e2)              = Times(e1,e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n","type":"","out":""},{"in":"let buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n","type":"","out":""},{"in":"let buildClosest(expr,a,b)         = Closest(expr,a,b)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet buildClosest (expr,a,b) = Closest (expr, a, b);;\n","type":"","out":""},{"in":"let buildDerivativeX(expr)         = DerivativeX(expr)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet buildDerivativeX expr = DerivativeX expr;;\n","type":"","out":""},{"in":"let pi = 4.0 *. atan 1.0","min":"\nlet pi = 4.0 *. (atan 1.0);;\n","type":"","out":""},{"in":"let epsilon = 0.0001","min":"\nlet epsilon = 0.0001;;\n","type":"","out":""},{"in":"let splitSize a b e = (a -. b ) /. float_of_int e","min":"\nlet splitSize a b e = (a -. b) /. (float_of_int e);;\n","type":"","out":""},{"in":"let bound x low hi = match x with\nl when x < low -> low\n| h when x > hi  -> hi\n| x              -> x","min":"\nlet bound x low hi =\n  match x with | l when x < low -> low | h when x > hi -> hi | x -> x;;\n","type":"","out":""},{"in":"let rec eval (e,x,y) = match e with\nVarX                 -> x\n| VarY                 -> y\n| Sine exp             -> sin (pi *. (eval (exp, x, y)))\n| Cosine exp           -> cos (pi *. (eval (exp, x, y)))\n| Average (exp1, exp2) -> let v1, v2 = (eval (exp1,x,y) , (eval (exp2,x,y))) in \n(v1 +. v2) /. 2.0\n| Times (exp1, exp2)   -> let v1, v2 = (eval (exp1,x,y), eval (exp2,x,y)) in (v1 *. v2)\n| Thresh (e1,e2,e3,e4) -> if eval (e1,x,y) < eval (e2,x,y) then \neval (e3,x,y) else eval (e4,x,y)\n| Closest (expr,a,b)   -> let e', a', b' = (eval (expr,x,y), eval (a,x,y), eval (b,x,y)) in \nif (abs_float a' -. e') < abs_float (b' -. e') then a' else b'\n| DerivativeX exp      -> let result = (match exp with\nVarX                -> 1.\n| VarY                -> 0.\n| Sine VarX           -> eval (Cosine VarX, x,y)\n| Cosine VarX         -> 0. -. eval (Sine VarX, x,y)\n| Times (VarX, other) -> eval (other, x, y)\n| Times (other, VarX) -> eval (other, x, y)\n| other               -> (eval (other, x, y) -. eval (other, x -. epsilon, y)) /. epsilon) in\nif ( (abs_float x) <= 1.0 && (abs_float y) <= 1.0) then (bound(1.0)(-1.0)(1.0)) else result","min":"\nlet bound x low hi =\n  match x with | l when x < low -> low | h when x > hi -> hi | x -> x;;\n\nlet epsilon = 0.0001;;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine exp -> sin (pi *. (eval (exp, x, y)))\n  | Cosine exp -> cos (pi *. (eval (exp, x, y)))\n  | Average (exp1,exp2) ->\n      let (v1,v2) = ((eval (exp1, x, y)), (eval (exp2, x, y))) in\n      (v1 +. v2) /. 2.0\n  | Times (exp1,exp2) ->\n      let (v1,v2) = ((eval (exp1, x, y)), (eval (exp2, x, y))) in v1 *. v2\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | Closest (expr,a,b) ->\n      let (e',a',b') =\n        ((eval (expr, x, y)), (eval (a, x, y)), (eval (b, x, y))) in\n      if ((abs_float a') -. e') < (abs_float (b' -. e')) then a' else b'\n  | DerivativeX exp ->\n      let result =\n        match exp with\n        | VarX  -> 1.\n        | VarY  -> 0.\n        | Sine (VarX ) -> eval ((Cosine VarX), x, y)\n        | Cosine (VarX ) -> 0. -. (eval ((Sine VarX), x, y))\n        | Times (VarX ,other) -> eval (other, x, y)\n        | Times (other,VarX ) -> eval (other, x, y)\n        | other ->\n            ((eval (other, x, y)) -. (eval (other, (x -. epsilon), y))) /.\n              epsilon in\n      if ((abs_float x) <= 1.0) && ((abs_float y) <= 1.0)\n      then bound 1.0 (-1.0) 1.0\n      else result;;\n","type":"","out":""},{"in":"let _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5)","min":"\nlet bound x low hi =\n  match x with | l when x < low -> low | h when x > hi -> hi | x -> x;;\n\nlet epsilon = 0.0001;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine exp -> sin (pi *. (eval (exp, x, y)))\n  | Cosine exp -> cos (pi *. (eval (exp, x, y)))\n  | Average (exp1,exp2) ->\n      let (v1,v2) = ((eval (exp1, x, y)), (eval (exp2, x, y))) in\n      (v1 +. v2) /. 2.0\n  | Times (exp1,exp2) ->\n      let (v1,v2) = ((eval (exp1, x, y)), (eval (exp2, x, y))) in v1 *. v2\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | Closest (expr,a,b) ->\n      let (e',a',b') =\n        ((eval (expr, x, y)), (eval (a, x, y)), (eval (b, x, y))) in\n      if ((abs_float a') -. e') < (abs_float (b' -. e')) then a' else b'\n  | DerivativeX exp ->\n      let result =\n        match exp with\n        | VarX  -> 1.\n        | VarY  -> 0.\n        | Sine (VarX ) -> eval ((Cosine VarX), x, y)\n        | Cosine (VarX ) -> 0. -. (eval ((Sine VarX), x, y))\n        | Times (VarX ,other) -> eval (other, x, y)\n        | Times (other,VarX ) -> eval (other, x, y)\n        | other ->\n            ((eval (other, x, y)) -. (eval (other, (x -. epsilon), y))) /.\n              epsilon in\n      if ((abs_float x) <= 1.0) && ((abs_float y) <= 1.0)\n      then bound 1.0 (-1.0) 1.0\n      else result;;\n\nlet _ = eval ((Sine (Average (VarX, VarY))), 0.5, (-0.5));;\n","type":"","out":""},{"in":"let _ = eval (Sine(Average(VarX,VarY)),0.3,0.3)","min":"\nlet bound x low hi =\n  match x with | l when x < low -> low | h when x > hi -> hi | x -> x;;\n\nlet epsilon = 0.0001;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine exp -> sin (pi *. (eval (exp, x, y)))\n  | Cosine exp -> cos (pi *. (eval (exp, x, y)))\n  | Average (exp1,exp2) ->\n      let (v1,v2) = ((eval (exp1, x, y)), (eval (exp2, x, y))) in\n      (v1 +. v2) /. 2.0\n  | Times (exp1,exp2) ->\n      let (v1,v2) = ((eval (exp1, x, y)), (eval (exp2, x, y))) in v1 *. v2\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | Closest (expr,a,b) ->\n      let (e',a',b') =\n        ((eval (expr, x, y)), (eval (a, x, y)), (eval (b, x, y))) in\n      if ((abs_float a') -. e') < (abs_float (b' -. e')) then a' else b'\n  | DerivativeX exp ->\n      let result =\n        match exp with\n        | VarX  -> 1.\n        | VarY  -> 0.\n        | Sine (VarX ) -> eval ((Cosine VarX), x, y)\n        | Cosine (VarX ) -> 0. -. (eval ((Sine VarX), x, y))\n        | Times (VarX ,other) -> eval (other, x, y)\n        | Times (other,VarX ) -> eval (other, x, y)\n        | other ->\n            ((eval (other, x, y)) -. (eval (other, (x -. epsilon), y))) /.\n              epsilon in\n      if ((abs_float x) <= 1.0) && ((abs_float y) <= 1.0)\n      then bound 1.0 (-1.0) 1.0\n      else result;;\n\nlet _ = eval ((Sine (Average (VarX, VarY))), 0.3, 0.3);;\n","type":"","out":""},{"in":"let eval_fn e (x,y) = \nlet rv = eval (e,x,y) in\nassert (-1.0 <= rv && rv <= 1.0);\nrv","min":"\nlet bound x low hi =\n  match x with | l when x < low -> low | h when x > hi -> hi | x -> x;;\n\nlet epsilon = 0.0001;;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine exp -> sin (pi *. (eval (exp, x, y)))\n  | Cosine exp -> cos (pi *. (eval (exp, x, y)))\n  | Average (exp1,exp2) ->\n      let (v1,v2) = ((eval (exp1, x, y)), (eval (exp2, x, y))) in\n      (v1 +. v2) /. 2.0\n  | Times (exp1,exp2) ->\n      let (v1,v2) = ((eval (exp1, x, y)), (eval (exp2, x, y))) in v1 *. v2\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | Closest (expr,a,b) ->\n      let (e',a',b') =\n        ((eval (expr, x, y)), (eval (a, x, y)), (eval (b, x, y))) in\n      if ((abs_float a') -. e') < (abs_float (b' -. e')) then a' else b'\n  | DerivativeX exp ->\n      let result =\n        match exp with\n        | VarX  -> 1.\n        | VarY  -> 0.\n        | Sine (VarX ) -> eval ((Cosine VarX), x, y)\n        | Cosine (VarX ) -> 0. -. (eval ((Sine VarX), x, y))\n        | Times (VarX ,other) -> eval (other, x, y)\n        | Times (other,VarX ) -> eval (other, x, y)\n        | other ->\n            ((eval (other, x, y)) -. (eval (other, (x -. epsilon), y))) /.\n              epsilon in\n      if ((abs_float x) <= 1.0) && ((abs_float y) <= 1.0)\n      then bound 1.0 (-1.0) 1.0\n      else result;;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n","type":"","out":""},{"in":"let sampleExpr =\nbuildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\nbuildX()),buildTimes(buildCosine (buildCosine (buildAverage\n(buildTimes (buildY(),buildY()),buildCosine (buildX())))),\nbuildCosine (buildTimes (buildSine (buildCosine\n(buildY())),buildAverage (buildSine (buildX()), buildTimes\n(buildX(),buildX()))))))),buildY())))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet sampleExpr =\n  buildCosine\n    (buildSine\n       (buildTimes\n          ((buildCosine\n              (buildAverage\n                 ((buildCosine (buildX ())),\n                   (buildTimes\n                      ((buildCosine\n                          (buildCosine\n                             (buildAverage\n                                ((buildTimes ((buildY ()), (buildY ()))),\n                                  (buildCosine (buildX ())))))),\n                        (buildCosine\n                           (buildTimes\n                              ((buildSine (buildCosine (buildY ()))),\n                                (buildAverage\n                                   ((buildSine (buildX ())),\n                                     (buildTimes ((buildX ()), (buildX ()))))))))))))),\n            (buildY ()))));;\n","type":"","out":""},{"in":"let _ = eval (sampleExpr,0.5,0.2)","min":"\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet bound x low hi =\n  match x with | l when x < low -> low | h when x > hi -> hi | x -> x;;\n\nlet epsilon = 0.0001;;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine exp -> sin (pi *. (eval (exp, x, y)))\n  | Cosine exp -> cos (pi *. (eval (exp, x, y)))\n  | Average (exp1,exp2) ->\n      let (v1,v2) = ((eval (exp1, x, y)), (eval (exp2, x, y))) in\n      (v1 +. v2) /. 2.0\n  | Times (exp1,exp2) ->\n      let (v1,v2) = ((eval (exp1, x, y)), (eval (exp2, x, y))) in v1 *. v2\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | Closest (expr,a,b) ->\n      let (e',a',b') =\n        ((eval (expr, x, y)), (eval (a, x, y)), (eval (b, x, y))) in\n      if ((abs_float a') -. e') < (abs_float (b' -. e')) then a' else b'\n  | DerivativeX exp ->\n      let result =\n        match exp with\n        | VarX  -> 1.\n        | VarY  -> 0.\n        | Sine (VarX ) -> eval ((Cosine VarX), x, y)\n        | Cosine (VarX ) -> 0. -. (eval ((Sine VarX), x, y))\n        | Times (VarX ,other) -> eval (other, x, y)\n        | Times (other,VarX ) -> eval (other, x, y)\n        | other ->\n            ((eval (other, x, y)) -. (eval (other, (x -. epsilon), y))) /.\n              epsilon in\n      if ((abs_float x) <= 1.0) && ((abs_float y) <= 1.0)\n      then bound 1.0 (-1.0) 1.0\n      else result;;\n\nlet sampleExpr =\n  buildCosine\n    (buildSine\n       (buildTimes\n          ((buildCosine\n              (buildAverage\n                 ((buildCosine (buildX ())),\n                   (buildTimes\n                      ((buildCosine\n                          (buildCosine\n                             (buildAverage\n                                ((buildTimes ((buildY ()), (buildY ()))),\n                                  (buildCosine (buildX ())))))),\n                        (buildCosine\n                           (buildTimes\n                              ((buildSine (buildCosine (buildY ()))),\n                                (buildAverage\n                                   ((buildSine (buildX ())),\n                                     (buildTimes ((buildX ()), (buildX ()))))))))))))),\n            (buildY ()))));;\n\nlet _ = eval (sampleExpr, 0.5, 0.2);;\n","type":"","out":""},{"in":"let sampleExpr2 =\nbuildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet sampleExpr2 =\n  buildThresh\n    ((buildX ()), (buildY ()), (buildSine (buildX ())),\n      (buildCosine (buildY ())));;\n","type":"","out":""},{"in":"let rec build (rand, depth) = match depth with\n1 -> ( match rand (0,2) with  \n0 -> VarX\n| 1 -> VarY \n| n -> failwith (\"rand (0,2) returned unexpected value \" ^ string_of_int n) )\n| n -> match rand (0,7) with\n0 -> Sine (build (rand, n - 1))\n| 1 -> Cosine  (build(rand, n - 1))\n| 2 -> Average (build(rand, n - 1), build(rand, n - 1))\n| 3 -> Times (build(rand, n - 1), build(rand, n - 1))\n| 4 -> Thresh (build(rand, n - 1), build(rand, n - 1), build(rand, n -1), build (rand, n - 1))\n| 5 -> Closest (build(rand, n - 1), build(rand, n - 1), build(rand, n -1))\n| 6 -> DerivativeX (build(rand, n- 1))\n| n -> failwith (\"rand (0,7) returned unexpected value \" ^ string_of_int n)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet rec build (rand,depth) =\n  match depth with\n  | 1 ->\n      (match rand (0, 2) with\n       | 0 -> VarX\n       | 1 -> VarY\n       | n ->\n           failwith\n             (\"rand (0,2) returned unexpected value \" ^ (string_of_int n)))\n  | n ->\n      (match rand (0, 7) with\n       | 0 -> Sine (build (rand, (n - 1)))\n       | 1 -> Cosine (build (rand, (n - 1)))\n       | 2 -> Average ((build (rand, (n - 1))), (build (rand, (n - 1))))\n       | 3 -> Times ((build (rand, (n - 1))), (build (rand, (n - 1))))\n       | 4 ->\n           Thresh\n             ((build (rand, (n - 1))), (build (rand, (n - 1))),\n               (build (rand, (n - 1))), (build (rand, (n - 1))))\n       | 5 ->\n           Closest\n             ((build (rand, (n - 1))), (build (rand, (n - 1))),\n               (build (rand, (n - 1))))\n       | 6 -> DerivativeX (build (rand, (n - 1)))\n       | n ->\n           failwith\n             (\"rand (0,7) returned unexpected value \" ^ (string_of_int n)));;\n","type":"","out":""},{"in":"let g1 () = (9,2,3)","min":"\nlet g1 () = (9, 2, 3);;\n","type":"","out":""},{"in":"let g2 () = (10,9,2)","min":"\nlet g2 () = (10, 9, 2);;\n","type":"","out":""},{"in":"let g3 () = (6,90,3)","min":"\nlet g3 () = (6, 90, 3);;\n","type":"","out":""},{"in":"let c1 () = (4,5,6)","min":"\nlet c1 () = (4, 5, 6);;\n","type":"","out":""},{"in":"let c2 () = (5,6,7)","min":"\nlet c2 () = (5, 6, 7);;\n","type":"","out":""},{"in":"let c3 () = (6,7,8)","min":"\nlet c3 () = (6, 7, 8);;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet bound x low hi =\n  match x with | l when x < low -> low | h when x > hi -> hi | x -> x;;\n\nlet epsilon = 0.0001;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine exp -> sin (pi *. (eval (exp, x, y)))\n  | Cosine exp -> cos (pi *. (eval (exp, x, y)))\n  | Average (exp1,exp2) ->\n      let (v1,v2) = ((eval (exp1, x, y)), (eval (exp2, x, y))) in\n      (v1 +. v2) /. 2.0\n  | Times (exp1,exp2) ->\n      let (v1,v2) = ((eval (exp1, x, y)), (eval (exp2, x, y))) in v1 *. v2\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | Closest (expr,a,b) ->\n      let (e',a',b') =\n        ((eval (expr, x, y)), (eval (a, x, y)), (eval (b, x, y))) in\n      if ((abs_float a') -. e') < (abs_float (b' -. e')) then a' else b'\n  | DerivativeX exp ->\n      let result =\n        match exp with\n        | VarX  -> 1.\n        | VarY  -> 0.\n        | Sine (VarX ) -> eval ((Cosine VarX), x, y)\n        | Cosine (VarX ) -> 0. -. (eval ((Sine VarX), x, y))\n        | Times (VarX ,other) -> eval (other, x, y)\n        | Times (other,VarX ) -> eval (other, x, y)\n        | other ->\n            ((eval (other, x, y)) -. (eval (other, (x -. epsilon), y))) /.\n              epsilon in\n      if ((abs_float x) <= 1.0) && ((abs_float y) <= 1.0)\n      then bound 1.0 (-1.0) 1.0\n      else result;;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet rec build (rand,depth) =\n  match depth with\n  | 1 ->\n      (match rand (0, 2) with\n       | 0 -> VarX\n       | 1 -> VarY\n       | n ->\n           failwith\n             (\"rand (0,2) returned unexpected value \" ^ (string_of_int n)))\n  | n ->\n      (match rand (0, 7) with\n       | 0 -> Sine (build (rand, (n - 1)))\n       | 1 -> Cosine (build (rand, (n - 1)))\n       | 2 -> Average ((build (rand, (n - 1))), (build (rand, (n - 1))))\n       | 3 -> Times ((build (rand, (n - 1))), (build (rand, (n - 1))))\n       | 4 ->\n           Thresh\n             ((build (rand, (n - 1))), (build (rand, (n - 1))),\n               (build (rand, (n - 1))), (build (rand, (n - 1))))\n       | 5 ->\n           Closest\n             ((build (rand, (n - 1))), (build (rand, (n - 1))),\n               (build (rand, (n - 1))))\n       | 6 -> DerivativeX (build (rand, (n - 1)))\n       | n ->\n           failwith\n             (\"rand (0,7) returned unexpected value \" ^ (string_of_int n)));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine exp -> \"sin(\" ^ ((exprToString exp) ^ \")\")\n  | Cosine exp -> \"cos(\" ^ ((exprToString exp) ^ \")\")\n  | Average (exp1,exp2) ->\n      \"avg(\" ^ ((exprToString exp1) ^ (\",\" ^ ((exprToString exp2) ^ \")\")))\n  | Times (exp1,exp2) -> (exprToString exp1) ^ (\" * \" ^ (exprToString exp2))\n  | Thresh (exp1,exp2,exp3,exp4) ->\n      \"thresh(\" ^\n        ((exprToString exp1) ^\n           (\",\" ^\n              ((exprToString exp2) ^\n                 (\",\" ^\n                    ((exprToString exp3) ^\n                       (\",\" ^ ((exprToString exp4) ^ \")\")))))))\n  | Closest (exp1,exp2,exp3) ->\n      \"closest(\" ^\n        ((exprToString exp1) ^\n           (\",\" ^ ((exprToString exp2) ^ (\",\" ^ ((exprToString exp3) ^ \")\")))))\n  | DerivativeX exp -> \"d/dx(\" ^ ((exprToString exp) ^ \")\");;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet bound x low hi =\n  match x with | l when x < low -> low | h when x > hi -> hi | x -> x;;\n\nlet epsilon = 0.0001;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine exp -> sin (pi *. (eval (exp, x, y)))\n  | Cosine exp -> cos (pi *. (eval (exp, x, y)))\n  | Average (exp1,exp2) ->\n      let (v1,v2) = ((eval (exp1, x, y)), (eval (exp2, x, y))) in\n      (v1 +. v2) /. 2.0\n  | Times (exp1,exp2) ->\n      let (v1,v2) = ((eval (exp1, x, y)), (eval (exp2, x, y))) in v1 *. v2\n  | Thresh (e1,e2,e3,e4) ->\n      if (eval (e1, x, y)) < (eval (e2, x, y))\n      then eval (e3, x, y)\n      else eval (e4, x, y)\n  | Closest (expr,a,b) ->\n      let (e',a',b') =\n        ((eval (expr, x, y)), (eval (a, x, y)), (eval (b, x, y))) in\n      if ((abs_float a') -. e') < (abs_float (b' -. e')) then a' else b'\n  | DerivativeX exp ->\n      let result =\n        match exp with\n        | VarX  -> 1.\n        | VarY  -> 0.\n        | Sine (VarX ) -> eval ((Cosine VarX), x, y)\n        | Cosine (VarX ) -> 0. -. (eval ((Sine VarX), x, y))\n        | Times (VarX ,other) -> eval (other, x, y)\n        | Times (other,VarX ) -> eval (other, x, y)\n        | other ->\n            ((eval (other, x, y)) -. (eval (other, (x -. epsilon), y))) /.\n              epsilon in\n      if ((abs_float x) <= 1.0) && ((abs_float y) <= 1.0)\n      then bound 1.0 (-1.0) 1.0\n      else result;;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | Closest of expr* expr* expr\n  | DerivativeX of expr;;\n\nlet rec build (rand,depth) =\n  match depth with\n  | 1 ->\n      (match rand (0, 2) with\n       | 0 -> VarX\n       | 1 -> VarY\n       | n ->\n           failwith\n             (\"rand (0,2) returned unexpected value \" ^ (string_of_int n)))\n  | n ->\n      (match rand (0, 7) with\n       | 0 -> Sine (build (rand, (n - 1)))\n       | 1 -> Cosine (build (rand, (n - 1)))\n       | 2 -> Average ((build (rand, (n - 1))), (build (rand, (n - 1))))\n       | 3 -> Times ((build (rand, (n - 1))), (build (rand, (n - 1))))\n       | 4 ->\n           Thresh\n             ((build (rand, (n - 1))), (build (rand, (n - 1))),\n               (build (rand, (n - 1))), (build (rand, (n - 1))))\n       | 5 ->\n           Closest\n             ((build (rand, (n - 1))), (build (rand, (n - 1))),\n               (build (rand, (n - 1))))\n       | 6 -> DerivativeX (build (rand, (n - 1)))\n       | n ->\n           failwith\n             (\"rand (0,7) returned unexpected value \" ^ (string_of_int n)));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  match e with\n  | VarX  -> \"x\"\n  | VarY  -> \"y\"\n  | Sine exp -> \"sin(\" ^ ((exprToString exp) ^ \")\")\n  | Cosine exp -> \"cos(\" ^ ((exprToString exp) ^ \")\")\n  | Average (exp1,exp2) ->\n      \"avg(\" ^ ((exprToString exp1) ^ (\",\" ^ ((exprToString exp2) ^ \")\")))\n  | Times (exp1,exp2) -> (exprToString exp1) ^ (\" * \" ^ (exprToString exp2))\n  | Thresh (exp1,exp2,exp3,exp4) ->\n      \"thresh(\" ^\n        ((exprToString exp1) ^\n           (\",\" ^\n              ((exprToString exp2) ^\n                 (\",\" ^\n                    ((exprToString exp3) ^\n                       (\",\" ^ ((exprToString exp4) ^ \")\")))))))\n  | Closest (exp1,exp2,exp3) ->\n      \"closest(\" ^\n        ((exprToString exp1) ^\n           (\",\" ^ ((exprToString exp2) ^ (\",\" ^ ((exprToString exp3) ^ \")\")))))\n  | DerivativeX exp -> \"d/dx(\" ^ ((exprToString exp) ^ \")\");;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":0,"stop":18272},"type":"eval"},"cursor":0,"time":1.398116160146062e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n    []                     -> d\n  | (k', v)::t when k' = k -> v\n  | h::t                   -> assoc (d,k,t)\n\nlet _ = assoc (-1,\"william\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;    \n\nlet _ = assoc (-1,\"bob\",[(\"ranjit\",85);(\"william\",23);(\"moose\",44)]);;\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        []   -> seen\n      | h::t -> \n          let seen' = if List.mem h seen then seen else h::seen in\n          let rest' = t in\n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\nlet _ = removeDuplicates [1;6;2;4;12;2;13;6;9];;\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec wwhile (f,b) = match f b with\n    res, true  -> wwhile (f,res)\n  | res, false -> res;;\n\n\nlet f x = (let xx = x*x*x in (xx, xx < 100)) in wwhile (f, 2)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fixpoint (f,b) = \n  let fn f' b' = match f' b' with\n      r when r = b' -> (r, false) \n    | r'            -> (r', true) in\n    wwhile (fn f, b) ;;\n\nlet g x = truncate (1e6 *. cos (1e-6 *. float x)) in fixpoint (g, 0);; \n\nlet collatz n = match n with 1 -> 1 | _ when n mod 2 = 0 -> n/2 | _ -> 3*n + 1;;\n\nlet _ = fixpoint (collatz, 1) ;;\nlet _ = fixpoint (collatz, 3) ;;\nlet _ = fixpoint (collatz, 48) ;;\nlet _ = fixpoint (collatz, 107) ;;\nlet _ = fixpoint (collatz, 9001) ;;\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine        of expr\n    | Cosine      of expr\n    | Average     of expr * expr\n    | Times       of expr * expr\n    | Thresh      of expr * expr * expr * expr\n    | Closest     of expr * expr * expr\n    | DerivativeX of expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet rec exprToString e = match e with\n    VarX                          -> \"x\"\n  | VarY                          -> \"y\"\n  | Sine    exp                   -> \"sin(\" ^ (exprToString exp) ^ \")\"\n  | Cosine  exp                   -> \"cos(\" ^ (exprToString exp) ^ \")\"\n  | Average (exp1,exp2)           -> \"avg(\" ^ (exprToString exp1) ^ \",\" ^ (exprToString exp2) ^ \")\"\n  | Times   (exp1,exp2)           -> (exprToString exp1) ^ \" * \" ^ (exprToString exp2)\n  | Thresh  (exp1,exp2,exp3,exp4) -> \"thresh(\" ^ (exprToString exp1) ^ \",\" ^\n                                     (exprToString exp2) ^ \",\" ^ (exprToString exp3) ^ \",\" ^\n                                     (exprToString exp4) ^ \")\"\n  | Closest (exp1, exp2, exp3)    -> \"closest(\" ^ (exprToString exp1) ^ \",\" ^ (exprToString exp2) ^ \",\" ^\n                                     (exprToString exp3) ^ \")\"\n  | DerivativeX exp               -> \"d/dx(\" ^ (exprToString exp) ^ \")\"\n\n\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet _ = exprToString sampleExpr1 \n\n\n\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\nlet buildClosest(expr,a,b)         = Closest(expr,a,b)\nlet buildDerivativeX(expr)         = DerivativeX(expr)\n\n\nlet pi = 4.0 *. atan 1.0\nlet epsilon = 0.0001\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet splitSize a b e = (a -. b ) /. float_of_int e\n\nlet bound x low hi = match x with\n    l when x < low -> low\n  | h when x > hi  -> hi\n  | x              -> x\n\nlet rec eval (e,x,y) = match e with\n    VarX                 -> x\n  | VarY                 -> y\n  | Sine exp             -> sin (pi *. (eval (exp, x, y)))\n  | Cosine exp           -> cos (pi *. (eval (exp, x, y)))\n  | Average (exp1, exp2) -> let v1, v2 = (eval (exp1,x,y) , (eval (exp2,x,y))) in \n        (v1 +. v2) /. 2.0\n  | Times (exp1, exp2)   -> let v1, v2 = (eval (exp1,x,y), eval (exp2,x,y)) in (v1 *. v2)\n  | Thresh (e1,e2,e3,e4) -> if eval (e1,x,y) < eval (e2,x,y) then \n        eval (e3,x,y) else eval (e4,x,y)\n  | Closest (expr,a,b)   -> let e', a', b' = (eval (expr,x,y), eval (a,x,y), eval (b,x,y)) in \n        if (abs_float a' -. e') < abs_float (b' -. e') then a' else b'\n  | DerivativeX exp      -> let result = (match exp with\n                                             VarX                -> 1.\n                                           | VarY                -> 0.\n                                           | Sine VarX           -> eval (Cosine VarX, x,y)\n                                           | Cosine VarX         -> 0. -. eval (Sine VarX, x,y)\n                                           | Times (VarX, other) -> eval (other, x, y)\n                                           | Times (other, VarX) -> eval (other, x, y)\n                                           | other               -> (eval (other, x, y) -. eval (other, x -. epsilon, y)) /. epsilon) in\n        if ( (abs_float x) <= 1.0 && (abs_float y) <= 1.0) then (bound(1.0)(-1.0)(1.0)) else result\n\n\nlet _ = eval (Sine(Average(VarX,VarY)),0.5,-0.5);;\nlet _ = eval (Sine(Average(VarX,VarY)),0.3,0.3);;\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet _ = eval (sampleExpr,0.5,0.2);;\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand, depth) = match depth with\n    1 -> ( match rand (0,2) with  \n             0 -> VarX\n           | 1 -> VarY \n           | n -> failwith (\"rand (0,2) returned unexpected value \" ^ string_of_int n) )\n  | n -> match rand (0,7) with\n      0 -> Sine (build (rand, n - 1))\n    | 1 -> Cosine  (build(rand, n - 1))\n    | 2 -> Average (build(rand, n - 1), build(rand, n - 1))\n    | 3 -> Times (build(rand, n - 1), build(rand, n - 1))\n    | 4 -> Thresh (build(rand, n - 1), build(rand, n - 1), build(rand, n -1), build (rand, n - 1))\n    | 5 -> Closest (build(rand, n - 1), build(rand, n - 1), build(rand, n -1))\n    | 6 -> DerivativeX (build(rand, n- 1))\n    | n -> failwith (\"rand (0,7) returned unexpected value \" ^ string_of_int n)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (9,2,3)\nlet g2 () = (10,9,2)\nlet g3 () = (6,90,3)\n\nlet c1 () = (4,5,6)\nlet c2 () = (5,6,7)\nlet c3 () = (6,7,8)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n\n","file":"hw2.ml"}
