{"ocaml":[],"event":{"region":{"start":0,"stop":0},"type":"eval"},"cursor":0,"time":1.39821040846399e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | h::t -> let (x, y) = h in\n        if x = k then y\n        else assoc (d, k, t)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' = if List.mem h seen then seen else h::seen in\n          let rest' = t in \n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet rec wwhile (f, b) = let (out, result) = f b in\n    match result with\n      | false -> out\n      | true -> wwhile(f, out)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n\nlet fixpoint (f,b) = \n  let g x = let evaled = f x in (evaled, evaled <> x) in\n    wwhile (g, b)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine        of expr\n    | Cosine      of expr\n    | SinCosSq    of expr * expr\n    | Average     of expr * expr\n    | Times       of expr * expr\n    | Thresh      of expr * expr * expr * expr\t\n    | ContourFun  of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet rec exprToString e = \n  let rec hlpr e = match e with\n    | VarX ->\n        \"x\"\n    | VarY -> \n        \"y\"\n    | Sine expr -> \n        \"sin(pi*\" ^ hlpr expr ^ \")\"\n    | Cosine expr -> \n        \"cos(pi*\" ^ hlpr expr ^ \")\"\n    | SinCosSq (e1, e2) ->\n        \"((sin^2(pi *\" ^ hlpr e1 ^ \")*cos^2(pi* \" ^ hlpr e2 ^ \"))/2)\"\n    | Average (e1,e2) -> \n        \"((\" ^ hlpr e1 ^ \"+\" ^ hlpr e2 ^ \")/2)\"\n    | Times (e1,e2) -> \n        hlpr e1 ^ \"*\" ^ hlpr e2\n    | Thresh (e1,e2,e3,e4) -> \n        \"(\" ^ hlpr e1  ^ \"<\" ^ hlpr e2 ^ \"?\" ^ hlpr e3 ^ \":\" ^ hlpr e4 ^ \")\"\n    | ContourFun (e1, e2, e3) ->\n        let (a, b, c) = (hlpr e1, hlpr e2, hlpr e3) in\n          \"(abs((cos(pi*\" ^ a ^ \"^2+\" ^ b ^ \")(sin(pi*\" ^ a ^ \"+\" ^ b ^ \"^2))))*\" ^\n          c ^ \")\"\n  in \n    hlpr e\n\nlet _ = exprToString sampleExpr1\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildSinCosSq(e1,e2)\t   = SinCosSq(e1, e2)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\nlet buildContourFun(e1, e2, e3)    = ContourFun(e1, e2, e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX            \n    -> x\n  | VarY            \n    -> y\n  | Sine e'         \n    -> sin (pi *. eval (e', x, y))\n  | Cosine e' \n    -> cos(pi *. eval(e', x, y))\n  | SinCosSq (e1,e2)\n    -> let (a, b) = (pi *. eval(e1, x, y), pi *. eval(e2, x, y)) in\n        ((sin(a)*.sin(a)) +. (cos(b)*.cos(b))) /. 2.0\n  | Average (e1,e2) \n    -> (eval(e1, x, y) +. eval(e2, x, y)) /. 2.0\n  | Times (e1,e2) \n    -> eval(e1, x, y) *. eval(e2, x, y)\n  | Thresh  (a, b, a_less, b_less) \n    -> (match eval (a, x, y) < eval (b, x, y) with\n         | true -> eval (a_less, x, y)\n         | false -> eval (b_less, x, y)\n       )\n  | ContourFun (e1, e2, e3)\n    -> let (a, b, c) = (eval (e1,x,y), eval(e2,x,y), eval(e3,x,y)) in\n        abs_float(cos(pi*.(a**2. +. b)) *. sin(pi*.(a +. b **2.))) *. c\n\n\nlet _ = eval(buildX(), 1.0, 1.0)\nlet _ = eval(buildSine(buildX()), 1.0, 1.0)\nlet _ = eval(buildSine(buildAverage(buildX(), buildY())), 0.3, 0.3)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\n\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand,depth) = match depth with\n  | 0 -> (match rand(0, 1) with \n           | 0 -> buildX() \n           | 1 -> buildY()\n           | _ -> failwith \"this should have been unreachable :(\"\n         )\n  | _ -> \n      let num = rand(0,100) in \n      let (a,b,c,d) = (build(rand, depth-1), build(rand, depth-1), \n                       build(rand, depth-1), build(rand, depth-1)) in\n        match num with\n          | num when num < 70 && num < 45 ->\n              (match num mod 2 with\n                | 0 -> buildSinCosSq(a, b)\n                | 1 -> buildContourFun(c, d, a)\n                | _ -> failwith \"this should have been unreachable :(\"\n              )\n          | num when num < 70 ->\n              (match num mod 4 with\n                | 0 -> buildSine(c)\n                | 1 -> buildCosine(d)\n                | 2 -> buildSinCosSq(a, c)\n                | 3 -> buildContourFun(b, a, c)\n                | _ -> failwith \"this should have been unreachable :(\"\n              )\n          | num when num >= 70 ->\n              (match num mod 7 with \n                | 0 -> buildThresh(d, c, b, a)\n                | 1 -> buildAverage(c, b)\n                | 2 -> buildTimes(a, d)\n                | 3 -> buildSine(d)\n                | 4 -> buildCosine(c)\n                | 5 -> buildSinCosSq(b, a)\n                | 6 -> buildContourFun(d, c, c)\n                | _ -> failwith \"this should have been unreachable :(\"\n              )\n          | _ -> failwith \"stuff here\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (12, 5012311, 12315131231)\nlet g2 () = (11, 21023, 123111)  \nlet g3 () = (8, 102351113, 2311468)  \n\nlet c1 () = (10, 1321, 5141238)\nlet c2 () = (12, 11111, 41231)\nlet c3 () = (10, 5013731, 873489)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\nlet rand = makeRand(27, 130)\nlet expr = build(rand, 6)\nlet _ = eval(expr, 0.70, 0.45)\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec assoc (d,k,l) = match l with\n| [] -> d\n| h::t -> let (x, y) = h in\nif x = k then y\nelse assoc (d, k, t)","min":"\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | h::t -> let (x,y) = h in if x = k then y else assoc (d, k, t);;\n","type":"","out":""},{"in":"let removeDuplicates l = \nlet rec helper (seen,rest) = \nmatch rest with \n[] -> seen\n| h::t -> \nlet seen' = if List.mem h seen then seen else h::seen in\nlet rest' = t in \nhelper (seen',rest') \nin\nList.rev (helper ([],l))","min":"\nlet removeDuplicates l =\n  let rec helper (seen,rest) =\n    match rest with\n    | [] -> seen\n    | h::t ->\n        let seen' = if List.mem h seen then seen else h :: seen in\n        let rest' = t in helper (seen', rest') in\n  List.rev (helper ([], l));;\n","type":"","out":""},{"in":"let rec wwhile (f, b) = let (out, result) = f b in\nmatch result with\n| false -> out\n| true -> wwhile(f, out)","min":"\nlet rec wwhile (f,b) =\n  let (out,result) = f b in\n  match result with | false  -> out | true  -> wwhile (f, out);;\n","type":"","out":""},{"in":"let fixpoint (f,b) = \nlet g x = let evaled = f x in (evaled, evaled <> x) in\nwwhile (g, b)","min":"\nlet rec wwhile (f,b) =\n  let (out,result) = f b in\n  match result with | false  -> out | true  -> wwhile (f, out);;\n\nlet fixpoint (f,b) =\n  let g x = let evaled = f x in (evaled, (evaled <> x)) in wwhile (g, b);;\n","type":"","out":""},{"in":"type expr = \nVarX\n| VarY\n| Sine        of expr\n| Cosine      of expr\n| SinCosSq    of expr * expr\n| Average     of expr * expr\n| Times       of expr * expr\n| Thresh      of expr * expr * expr * expr\t\n| ContourFun  of expr * expr * expr","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n","type":"","out":""},{"in":"let sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n","type":"","out":""},{"in":"let rec exprToString e = \nlet rec hlpr e = match e with\n| VarX ->\n\"x\"\n| VarY -> \n\"y\"\n| Sine expr -> \n\"sin(pi*\" ^ hlpr expr ^ \")\"\n| Cosine expr -> \n\"cos(pi*\" ^ hlpr expr ^ \")\"\n| SinCosSq (e1, e2) ->\n\"((sin^2(pi *\" ^ hlpr e1 ^ \")*cos^2(pi* \" ^ hlpr e2 ^ \"))/2)\"\n| Average (e1,e2) -> \n\"((\" ^ hlpr e1 ^ \"+\" ^ hlpr e2 ^ \")/2)\"\n| Times (e1,e2) -> \nhlpr e1 ^ \"*\" ^ hlpr e2\n| Thresh (e1,e2,e3,e4) -> \n\"(\" ^ hlpr e1  ^ \"<\" ^ hlpr e2 ^ \"?\" ^ hlpr e3 ^ \":\" ^ hlpr e4 ^ \")\"\n| ContourFun (e1, e2, e3) ->\nlet (a, b, c) = (hlpr e1, hlpr e2, hlpr e3) in\n\"(abs((cos(pi*\" ^ a ^ \"^2+\" ^ b ^ \")(sin(pi*\" ^ a ^ \"+\" ^ b ^ \"^2))))*\" ^\nc ^ \")\"\nin \nhlpr e","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet rec exprToString e =\n  let rec hlpr e =\n    match e with\n    | VarX  -> \"x\"\n    | VarY  -> \"y\"\n    | Sine expr -> \"sin(pi*\" ^ ((hlpr expr) ^ \")\")\n    | Cosine expr -> \"cos(pi*\" ^ ((hlpr expr) ^ \")\")\n    | SinCosSq (e1,e2) ->\n        \"((sin^2(pi *\" ^\n          ((hlpr e1) ^ (\")*cos^2(pi* \" ^ ((hlpr e2) ^ \"))/2)\")))\n    | Average (e1,e2) -> \"((\" ^ ((hlpr e1) ^ (\"+\" ^ ((hlpr e2) ^ \")/2)\")))\n    | Times (e1,e2) -> (hlpr e1) ^ (\"*\" ^ (hlpr e2))\n    | Thresh (e1,e2,e3,e4) ->\n        \"(\" ^\n          ((hlpr e1) ^\n             (\"<\" ^\n                ((hlpr e2) ^ (\"?\" ^ ((hlpr e3) ^ (\":\" ^ ((hlpr e4) ^ \")\")))))))\n    | ContourFun (e1,e2,e3) ->\n        let (a,b,c) = ((hlpr e1), (hlpr e2), (hlpr e3)) in\n        \"(abs((cos(pi*\" ^\n          (a ^\n             (\"^2+\" ^\n                (b ^\n                   (\")(sin(pi*\" ^ (a ^ (\"+\" ^ (b ^ (\"^2))))*\" ^ (c ^ \")\"))))))))) in\n  hlpr e;;\n","type":"","out":""},{"in":"let _ = exprToString sampleExpr1","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet rec exprToString e =\n  let rec hlpr e =\n    match e with\n    | VarX  -> \"x\"\n    | VarY  -> \"y\"\n    | Sine expr -> \"sin(pi*\" ^ ((hlpr expr) ^ \")\")\n    | Cosine expr -> \"cos(pi*\" ^ ((hlpr expr) ^ \")\")\n    | SinCosSq (e1,e2) ->\n        \"((sin^2(pi *\" ^\n          ((hlpr e1) ^ (\")*cos^2(pi* \" ^ ((hlpr e2) ^ \"))/2)\")))\n    | Average (e1,e2) -> \"((\" ^ ((hlpr e1) ^ (\"+\" ^ ((hlpr e2) ^ \")/2)\")))\n    | Times (e1,e2) -> (hlpr e1) ^ (\"*\" ^ (hlpr e2))\n    | Thresh (e1,e2,e3,e4) ->\n        \"(\" ^\n          ((hlpr e1) ^\n             (\"<\" ^\n                ((hlpr e2) ^ (\"?\" ^ ((hlpr e3) ^ (\":\" ^ ((hlpr e4) ^ \")\")))))))\n    | ContourFun (e1,e2,e3) ->\n        let (a,b,c) = ((hlpr e1), (hlpr e2), (hlpr e3)) in\n        \"(abs((cos(pi*\" ^\n          (a ^\n             (\"^2+\" ^\n                (b ^\n                   (\")(sin(pi*\" ^ (a ^ (\"+\" ^ (b ^ (\"^2))))*\" ^ (c ^ \")\"))))))))) in\n  hlpr e;;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n\nlet _ = exprToString sampleExpr1;;\n","type":"","out":""},{"in":"let buildX()                       = VarX","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildX () = VarX;;\n","type":"","out":""},{"in":"let buildY()                       = VarY","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildY () = VarY;;\n","type":"","out":""},{"in":"let buildSine(e)                   = Sine(e)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildSine e = Sine e;;\n","type":"","out":""},{"in":"let buildCosine(e)                 = Cosine(e)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildCosine e = Cosine e;;\n","type":"","out":""},{"in":"let buildSinCosSq(e1,e2)\t   = SinCosSq(e1, e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildSinCosSq (e1,e2) = SinCosSq (e1, e2);;\n","type":"","out":""},{"in":"let buildAverage(e1,e2)            = Average(e1,e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n","type":"","out":""},{"in":"let buildTimes(e1,e2)              = Times(e1,e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n","type":"","out":""},{"in":"let buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n","type":"","out":""},{"in":"let buildContourFun(e1, e2, e3)    = ContourFun(e1, e2, e3)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildContourFun (e1,e2,e3) = ContourFun (e1, e2, e3);;\n","type":"","out":""},{"in":"let pi = 4.0 *. atan 1.0","min":"\nlet pi = 4.0 *. (atan 1.0);;\n","type":"","out":""},{"in":"let rec eval (e,x,y) = match e with\n| VarX            \n-> x\n| VarY            \n-> y\n| Sine e'         \n-> sin (pi *. eval (e', x, y))\n| Cosine e' \n-> cos(pi *. eval(e', x, y))\n| SinCosSq (e1,e2)\n-> let (a, b) = (pi *. eval(e1, x, y), pi *. eval(e2, x, y)) in\n((sin(a)*.sin(a)) +. (cos(b)*.cos(b))) /. 2.0\n| Average (e1,e2) \n-> (eval(e1, x, y) +. eval(e2, x, y)) /. 2.0\n| Times (e1,e2) \n-> eval(e1, x, y) *. eval(e2, x, y)\n| Thresh  (a, b, a_less, b_less) \n-> (match eval (a, x, y) < eval (b, x, y) with\n| true -> eval (a_less, x, y)\n| false -> eval (b_less, x, y)\n)\n| ContourFun (e1, e2, e3)\n-> let (a, b, c) = (eval (e1,x,y), eval(e2,x,y), eval(e3,x,y)) in\nabs_float(cos(pi*.(a**2. +. b)) *. sin(pi*.(a +. b **2.))) *. c","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n","type":"","out":""},{"in":"let _ = eval(buildX(), 1.0, 1.0)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildX () = VarX;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet _ = eval ((buildX ()), 1.0, 1.0);;\n","type":"","out":""},{"in":"let _ = eval(buildSine(buildX()), 1.0, 1.0)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildSine e = Sine e;;\n\nlet buildX () = VarX;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet _ = eval ((buildSine (buildX ())), 1.0, 1.0);;\n","type":"","out":""},{"in":"let _ = eval(buildSine(buildAverage(buildX(), buildY())), 0.3, 0.3)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildSine e = Sine e;;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet _ =\n  eval ((buildSine (buildAverage ((buildX ()), (buildY ())))), 0.3, 0.3);;\n","type":"","out":""},{"in":"let eval_fn e (x,y) = \nlet rv = eval (e,x,y) in\nassert (-1.0 <= rv && rv <= 1.0);\nrv","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n","type":"","out":""},{"in":"let sampleExpr =\nbuildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\nbuildX()),buildTimes(buildCosine (buildCosine (buildAverage\n(buildTimes (buildY(),buildY()),buildCosine (buildX())))),\nbuildCosine (buildTimes (buildSine (buildCosine\n(buildY())),buildAverage (buildSine (buildX()), buildTimes\n(buildX(),buildX()))))))),buildY())))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet sampleExpr =\n  buildCosine\n    (buildSine\n       (buildTimes\n          ((buildCosine\n              (buildAverage\n                 ((buildCosine (buildX ())),\n                   (buildTimes\n                      ((buildCosine\n                          (buildCosine\n                             (buildAverage\n                                ((buildTimes ((buildY ()), (buildY ()))),\n                                  (buildCosine (buildX ())))))),\n                        (buildCosine\n                           (buildTimes\n                              ((buildSine (buildCosine (buildY ()))),\n                                (buildAverage\n                                   ((buildSine (buildX ())),\n                                     (buildTimes ((buildX ()), (buildX ()))))))))))))),\n            (buildY ()))));;\n","type":"","out":""},{"in":"let sampleExpr2 =\nbuildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet sampleExpr2 =\n  buildThresh\n    ((buildX ()), (buildY ()), (buildSine (buildX ())),\n      (buildCosine (buildY ())));;\n","type":"","out":""},{"in":"let rec build (rand,depth) = match depth with\n| 0 -> (match rand(0, 1) with \n| 0 -> buildX() \n| 1 -> buildY()\n| _ -> failwith \"this should have been unreachable :(\"\n)\n| _ -> \nlet num = rand(0,100) in \nlet (a,b,c,d) = (build(rand, depth-1), build(rand, depth-1), \nbuild(rand, depth-1), build(rand, depth-1)) in\nmatch num with\n| num when num < 70 && num < 45 ->\n(match num mod 2 with\n| 0 -> buildSinCosSq(a, b)\n| 1 -> buildContourFun(c, d, a)\n| _ -> failwith \"this should have been unreachable :(\"\n)\n| num when num < 70 ->\n(match num mod 4 with\n| 0 -> buildSine(c)\n| 1 -> buildCosine(d)\n| 2 -> buildSinCosSq(a, c)\n| 3 -> buildContourFun(b, a, c)\n| _ -> failwith \"this should have been unreachable :(\"\n)\n| num when num >= 70 ->\n(match num mod 7 with \n| 0 -> buildThresh(d, c, b, a)\n| 1 -> buildAverage(c, b)\n| 2 -> buildTimes(a, d)\n| 3 -> buildSine(d)\n| 4 -> buildCosine(c)\n| 5 -> buildSinCosSq(b, a)\n| 6 -> buildContourFun(d, c, c)\n| _ -> failwith \"this should have been unreachable :(\"\n)\n| _ -> failwith \"stuff here\"","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildContourFun (e1,e2,e3) = ContourFun (e1, e2, e3);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSinCosSq (e1,e2) = SinCosSq (e1, e2);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  match depth with\n  | 0 ->\n      (match rand (0, 1) with\n       | 0 -> buildX ()\n       | 1 -> buildY ()\n       | _ -> failwith \"this should have been unreachable :(\")\n  | _ ->\n      let num = rand (0, 100) in\n      let (a,b,c,d) =\n        ((build (rand, (depth - 1))), (build (rand, (depth - 1))),\n          (build (rand, (depth - 1))), (build (rand, (depth - 1)))) in\n      (match num with\n       | num when (num < 70) && (num < 45) ->\n           (match num mod 2 with\n            | 0 -> buildSinCosSq (a, b)\n            | 1 -> buildContourFun (c, d, a)\n            | _ -> failwith \"this should have been unreachable :(\")\n       | num when num < 70 ->\n           (match num mod 4 with\n            | 0 -> buildSine c\n            | 1 -> buildCosine d\n            | 2 -> buildSinCosSq (a, c)\n            | 3 -> buildContourFun (b, a, c)\n            | _ -> failwith \"this should have been unreachable :(\")\n       | num when num >= 70 ->\n           (match num mod 7 with\n            | 0 -> buildThresh (d, c, b, a)\n            | 1 -> buildAverage (c, b)\n            | 2 -> buildTimes (a, d)\n            | 3 -> buildSine d\n            | 4 -> buildCosine c\n            | 5 -> buildSinCosSq (b, a)\n            | 6 -> buildContourFun (d, c, c)\n            | _ -> failwith \"this should have been unreachable :(\")\n       | _ -> failwith \"stuff here\");;\n","type":"","out":""},{"in":"let g1 () = (5, 5012311, 12315131231)","min":"\nlet g1 () = (5, 5012311, 12315131231);;\n","type":"","out":""},{"in":"let g2 () = (5, 21023, 123111)","min":"\nlet g2 () = (5, 21023, 123111);;\n","type":"","out":""},{"in":"let g3 () = (5, 102351113, 2311468)","min":"\nlet g3 () = (5, 102351113, 2311468);;\n","type":"","out":""},{"in":"let c1 () = (5, 1321, 5141238)","min":"\nlet c1 () = (5, 1321, 5141238);;\n","type":"","out":""},{"in":"let c2 () = (5, 11111, 41231)","min":"\nlet c2 () = (5, 11111, 41231);;\n","type":"","out":""},{"in":"let c3 () = (5, 5013731, 873489)","min":"\nlet c3 () = (5, 5013731, 873489);;\n","type":"","out":""}],"event":{"region":{"start":0,"stop":8633},"type":"eval"},"cursor":8615,"time":1.39821043444253e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | h::t -> let (x, y) = h in\n        if x = k then y\n        else assoc (d, k, t)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' = if List.mem h seen then seen else h::seen in\n          let rest' = t in \n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet rec wwhile (f, b) = let (out, result) = f b in\n    match result with\n      | false -> out\n      | true -> wwhile(f, out)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n\nlet fixpoint (f,b) = \n  let g x = let evaled = f x in (evaled, evaled <> x) in\n    wwhile (g, b)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine        of expr\n    | Cosine      of expr\n    | SinCosSq    of expr * expr\n    | Average     of expr * expr\n    | Times       of expr * expr\n    | Thresh      of expr * expr * expr * expr\t\n    | ContourFun  of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet rec exprToString e = \n  let rec hlpr e = match e with\n    | VarX ->\n        \"x\"\n    | VarY -> \n        \"y\"\n    | Sine expr -> \n        \"sin(pi*\" ^ hlpr expr ^ \")\"\n    | Cosine expr -> \n        \"cos(pi*\" ^ hlpr expr ^ \")\"\n    | SinCosSq (e1, e2) ->\n        \"((sin^2(pi *\" ^ hlpr e1 ^ \")*cos^2(pi* \" ^ hlpr e2 ^ \"))/2)\"\n    | Average (e1,e2) -> \n        \"((\" ^ hlpr e1 ^ \"+\" ^ hlpr e2 ^ \")/2)\"\n    | Times (e1,e2) -> \n        hlpr e1 ^ \"*\" ^ hlpr e2\n    | Thresh (e1,e2,e3,e4) -> \n        \"(\" ^ hlpr e1  ^ \"<\" ^ hlpr e2 ^ \"?\" ^ hlpr e3 ^ \":\" ^ hlpr e4 ^ \")\"\n    | ContourFun (e1, e2, e3) ->\n        let (a, b, c) = (hlpr e1, hlpr e2, hlpr e3) in\n          \"(abs((cos(pi*\" ^ a ^ \"^2+\" ^ b ^ \")(sin(pi*\" ^ a ^ \"+\" ^ b ^ \"^2))))*\" ^\n          c ^ \")\"\n  in \n    hlpr e\n\nlet _ = exprToString sampleExpr1\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildSinCosSq(e1,e2)\t   = SinCosSq(e1, e2)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\nlet buildContourFun(e1, e2, e3)    = ContourFun(e1, e2, e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX            \n    -> x\n  | VarY            \n    -> y\n  | Sine e'         \n    -> sin (pi *. eval (e', x, y))\n  | Cosine e' \n    -> cos(pi *. eval(e', x, y))\n  | SinCosSq (e1,e2)\n    -> let (a, b) = (pi *. eval(e1, x, y), pi *. eval(e2, x, y)) in\n        ((sin(a)*.sin(a)) +. (cos(b)*.cos(b))) /. 2.0\n  | Average (e1,e2) \n    -> (eval(e1, x, y) +. eval(e2, x, y)) /. 2.0\n  | Times (e1,e2) \n    -> eval(e1, x, y) *. eval(e2, x, y)\n  | Thresh  (a, b, a_less, b_less) \n    -> (match eval (a, x, y) < eval (b, x, y) with\n         | true -> eval (a_less, x, y)\n         | false -> eval (b_less, x, y)\n       )\n  | ContourFun (e1, e2, e3)\n    -> let (a, b, c) = (eval (e1,x,y), eval(e2,x,y), eval(e3,x,y)) in\n        abs_float(cos(pi*.(a**2. +. b)) *. sin(pi*.(a +. b **2.))) *. c\n\n\nlet _ = eval(buildX(), 1.0, 1.0)\nlet _ = eval(buildSine(buildX()), 1.0, 1.0)\nlet _ = eval(buildSine(buildAverage(buildX(), buildY())), 0.3, 0.3)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\n\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand,depth) = match depth with\n  | 0 -> (match rand(0, 1) with \n           | 0 -> buildX() \n           | 1 -> buildY()\n           | _ -> failwith \"this should have been unreachable :(\"\n         )\n  | _ -> \n      let num = rand(0,100) in \n      let (a,b,c,d) = (build(rand, depth-1), build(rand, depth-1), \n                       build(rand, depth-1), build(rand, depth-1)) in\n        match num with\n          | num when num < 70 && num < 45 ->\n              (match num mod 2 with\n                | 0 -> buildSinCosSq(a, b)\n                | 1 -> buildContourFun(c, d, a)\n                | _ -> failwith \"this should have been unreachable :(\"\n              )\n          | num when num < 70 ->\n              (match num mod 4 with\n                | 0 -> buildSine(c)\n                | 1 -> buildCosine(d)\n                | 2 -> buildSinCosSq(a, c)\n                | 3 -> buildContourFun(b, a, c)\n                | _ -> failwith \"this should have been unreachable :(\"\n              )\n          | num when num >= 70 ->\n              (match num mod 7 with \n                | 0 -> buildThresh(d, c, b, a)\n                | 1 -> buildAverage(c, b)\n                | 2 -> buildTimes(a, d)\n                | 3 -> buildSine(d)\n                | 4 -> buildCosine(c)\n                | 5 -> buildSinCosSq(b, a)\n                | 6 -> buildContourFun(d, c, c)\n                | _ -> failwith \"this should have been unreachable :(\"\n              )\n          | _ -> failwith \"stuff here\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5, 5012311, 12315131231)\nlet g2 () = (5, 21023, 123111)  \nlet g3 () = (5, 102351113, 2311468)  \n\nlet c1 () = (5, 1321, 5141238)\nlet c2 () = (5, 11111, 41231)\nlet c3 () = (5, 5013731, 873489)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\nlet rand = makeRand(27, 130)\nlet expr = build(rand, 6)\nlet _ = eval(expr, 0.70, 0.45)\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n\n","file":"hw2.ml"}
{"ocaml":[{"in":"let g1 () = (5, 5012311, 123514)","min":"\nlet g1 () = (5, 5012311, 123514);;\n","type":"","out":""}],"event":{"region":{"start":7698,"stop":8462},"type":"eval"},"cursor":8461,"time":1.398210445040433e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | h::t -> let (x, y) = h in\n        if x = k then y\n        else assoc (d, k, t)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' = if List.mem h seen then seen else h::seen in\n          let rest' = t in \n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet rec wwhile (f, b) = let (out, result) = f b in\n    match result with\n      | false -> out\n      | true -> wwhile(f, out)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n\nlet fixpoint (f,b) = \n  let g x = let evaled = f x in (evaled, evaled <> x) in\n    wwhile (g, b)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine        of expr\n    | Cosine      of expr\n    | SinCosSq    of expr * expr\n    | Average     of expr * expr\n    | Times       of expr * expr\n    | Thresh      of expr * expr * expr * expr\t\n    | ContourFun  of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet rec exprToString e = \n  let rec hlpr e = match e with\n    | VarX ->\n        \"x\"\n    | VarY -> \n        \"y\"\n    | Sine expr -> \n        \"sin(pi*\" ^ hlpr expr ^ \")\"\n    | Cosine expr -> \n        \"cos(pi*\" ^ hlpr expr ^ \")\"\n    | SinCosSq (e1, e2) ->\n        \"((sin^2(pi *\" ^ hlpr e1 ^ \")*cos^2(pi* \" ^ hlpr e2 ^ \"))/2)\"\n    | Average (e1,e2) -> \n        \"((\" ^ hlpr e1 ^ \"+\" ^ hlpr e2 ^ \")/2)\"\n    | Times (e1,e2) -> \n        hlpr e1 ^ \"*\" ^ hlpr e2\n    | Thresh (e1,e2,e3,e4) -> \n        \"(\" ^ hlpr e1  ^ \"<\" ^ hlpr e2 ^ \"?\" ^ hlpr e3 ^ \":\" ^ hlpr e4 ^ \")\"\n    | ContourFun (e1, e2, e3) ->\n        let (a, b, c) = (hlpr e1, hlpr e2, hlpr e3) in\n          \"(abs((cos(pi*\" ^ a ^ \"^2+\" ^ b ^ \")(sin(pi*\" ^ a ^ \"+\" ^ b ^ \"^2))))*\" ^\n          c ^ \")\"\n  in \n    hlpr e\n\nlet _ = exprToString sampleExpr1\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildSinCosSq(e1,e2)\t   = SinCosSq(e1, e2)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\nlet buildContourFun(e1, e2, e3)    = ContourFun(e1, e2, e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX            \n    -> x\n  | VarY            \n    -> y\n  | Sine e'         \n    -> sin (pi *. eval (e', x, y))\n  | Cosine e' \n    -> cos(pi *. eval(e', x, y))\n  | SinCosSq (e1,e2)\n    -> let (a, b) = (pi *. eval(e1, x, y), pi *. eval(e2, x, y)) in\n        ((sin(a)*.sin(a)) +. (cos(b)*.cos(b))) /. 2.0\n  | Average (e1,e2) \n    -> (eval(e1, x, y) +. eval(e2, x, y)) /. 2.0\n  | Times (e1,e2) \n    -> eval(e1, x, y) *. eval(e2, x, y)\n  | Thresh  (a, b, a_less, b_less) \n    -> (match eval (a, x, y) < eval (b, x, y) with\n         | true -> eval (a_less, x, y)\n         | false -> eval (b_less, x, y)\n       )\n  | ContourFun (e1, e2, e3)\n    -> let (a, b, c) = (eval (e1,x,y), eval(e2,x,y), eval(e3,x,y)) in\n        abs_float(cos(pi*.(a**2. +. b)) *. sin(pi*.(a +. b **2.))) *. c\n\n\nlet _ = eval(buildX(), 1.0, 1.0)\nlet _ = eval(buildSine(buildX()), 1.0, 1.0)\nlet _ = eval(buildSine(buildAverage(buildX(), buildY())), 0.3, 0.3)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\n\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand,depth) = match depth with\n  | 0 -> (match rand(0, 1) with \n           | 0 -> buildX() \n           | 1 -> buildY()\n           | _ -> failwith \"this should have been unreachable :(\"\n         )\n  | _ -> \n      let num = rand(0,100) in \n      let (a,b,c,d) = (build(rand, depth-1), build(rand, depth-1), \n                       build(rand, depth-1), build(rand, depth-1)) in\n        match num with\n          | num when num < 70 && num < 45 ->\n              (match num mod 2 with\n                | 0 -> buildSinCosSq(a, b)\n                | 1 -> buildContourFun(c, d, a)\n                | _ -> failwith \"this should have been unreachable :(\"\n              )\n          | num when num < 70 ->\n              (match num mod 4 with\n                | 0 -> buildSine(c)\n                | 1 -> buildCosine(d)\n                | 2 -> buildSinCosSq(a, c)\n                | 3 -> buildContourFun(b, a, c)\n                | _ -> failwith \"this should have been unreachable :(\"\n              )\n          | num when num >= 70 ->\n              (match num mod 7 with \n                | 0 -> buildThresh(d, c, b, a)\n                | 1 -> buildAverage(c, b)\n                | 2 -> buildTimes(a, d)\n                | 3 -> buildSine(d)\n                | 4 -> buildCosine(c)\n                | 5 -> buildSinCosSq(b, a)\n                | 6 -> buildContourFun(d, c, c)\n                | _ -> failwith \"this should have been unreachable :(\"\n              )\n          | _ -> failwith \"stuff here\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5, 5012311, 123514)\nlet g2 () = (5, 21023, 123111)  \nlet g3 () = (5, 102351113, 2311468)  \n\nlet c1 () = (5, 1321, 5141238)\nlet c2 () = (5, 11111, 41231)\nlet c3 () = (5, 5013731, 873489)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\nlet rand = makeRand(27, 130)\nlet expr = build(rand, 6)\nlet _ = eval(expr, 0.70, 0.45)\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec assoc (d,k,l) = match l with\n| [] -> d\n| h::t -> let (x, y) = h in\nif x = k then y\nelse assoc (d, k, t)","min":"\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | h::t -> let (x,y) = h in if x = k then y else assoc (d, k, t);;\n","type":"","out":""},{"in":"let removeDuplicates l = \nlet rec helper (seen,rest) = \nmatch rest with \n[] -> seen\n| h::t -> \nlet seen' = if List.mem h seen then seen else h::seen in\nlet rest' = t in \nhelper (seen',rest') \nin\nList.rev (helper ([],l))","min":"\nlet removeDuplicates l =\n  let rec helper (seen,rest) =\n    match rest with\n    | [] -> seen\n    | h::t ->\n        let seen' = if List.mem h seen then seen else h :: seen in\n        let rest' = t in helper (seen', rest') in\n  List.rev (helper ([], l));;\n","type":"","out":""},{"in":"let rec wwhile (f, b) = let (out, result) = f b in\nmatch result with\n| false -> out\n| true -> wwhile(f, out)","min":"\nlet rec wwhile (f,b) =\n  let (out,result) = f b in\n  match result with | false  -> out | true  -> wwhile (f, out);;\n","type":"","out":""},{"in":"let fixpoint (f,b) = \nlet g x = let evaled = f x in (evaled, evaled <> x) in\nwwhile (g, b)","min":"\nlet rec wwhile (f,b) =\n  let (out,result) = f b in\n  match result with | false  -> out | true  -> wwhile (f, out);;\n\nlet fixpoint (f,b) =\n  let g x = let evaled = f x in (evaled, (evaled <> x)) in wwhile (g, b);;\n","type":"","out":""},{"in":"type expr = \nVarX\n| VarY\n| Sine        of expr\n| Cosine      of expr\n| SinCosSq    of expr * expr\n| Average     of expr * expr\n| Times       of expr * expr\n| Thresh      of expr * expr * expr * expr\t\n| ContourFun  of expr * expr * expr","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n","type":"","out":""},{"in":"let sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n","type":"","out":""},{"in":"let rec exprToString e = \nlet rec hlpr e = match e with\n| VarX ->\n\"x\"\n| VarY -> \n\"y\"\n| Sine expr -> \n\"sin(pi*\" ^ hlpr expr ^ \")\"\n| Cosine expr -> \n\"cos(pi*\" ^ hlpr expr ^ \")\"\n| SinCosSq (e1, e2) ->\n\"((sin^2(pi *\" ^ hlpr e1 ^ \")*cos^2(pi* \" ^ hlpr e2 ^ \"))/2)\"\n| Average (e1,e2) -> \n\"((\" ^ hlpr e1 ^ \"+\" ^ hlpr e2 ^ \")/2)\"\n| Times (e1,e2) -> \nhlpr e1 ^ \"*\" ^ hlpr e2\n| Thresh (e1,e2,e3,e4) -> \n\"(\" ^ hlpr e1  ^ \"<\" ^ hlpr e2 ^ \"?\" ^ hlpr e3 ^ \":\" ^ hlpr e4 ^ \")\"\n| ContourFun (e1, e2, e3) ->\nlet (a, b, c) = (hlpr e1, hlpr e2, hlpr e3) in\n\"(abs((cos(pi*\" ^ a ^ \"^2+\" ^ b ^ \")(sin(pi*\" ^ a ^ \"+\" ^ b ^ \"^2))))*\" ^\nc ^ \")\"\nin \nhlpr e","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet rec exprToString e =\n  let rec hlpr e =\n    match e with\n    | VarX  -> \"x\"\n    | VarY  -> \"y\"\n    | Sine expr -> \"sin(pi*\" ^ ((hlpr expr) ^ \")\")\n    | Cosine expr -> \"cos(pi*\" ^ ((hlpr expr) ^ \")\")\n    | SinCosSq (e1,e2) ->\n        \"((sin^2(pi *\" ^\n          ((hlpr e1) ^ (\")*cos^2(pi* \" ^ ((hlpr e2) ^ \"))/2)\")))\n    | Average (e1,e2) -> \"((\" ^ ((hlpr e1) ^ (\"+\" ^ ((hlpr e2) ^ \")/2)\")))\n    | Times (e1,e2) -> (hlpr e1) ^ (\"*\" ^ (hlpr e2))\n    | Thresh (e1,e2,e3,e4) ->\n        \"(\" ^\n          ((hlpr e1) ^\n             (\"<\" ^\n                ((hlpr e2) ^ (\"?\" ^ ((hlpr e3) ^ (\":\" ^ ((hlpr e4) ^ \")\")))))))\n    | ContourFun (e1,e2,e3) ->\n        let (a,b,c) = ((hlpr e1), (hlpr e2), (hlpr e3)) in\n        \"(abs((cos(pi*\" ^\n          (a ^\n             (\"^2+\" ^\n                (b ^\n                   (\")(sin(pi*\" ^ (a ^ (\"+\" ^ (b ^ (\"^2))))*\" ^ (c ^ \")\"))))))))) in\n  hlpr e;;\n","type":"","out":""},{"in":"let _ = exprToString sampleExpr1","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet rec exprToString e =\n  let rec hlpr e =\n    match e with\n    | VarX  -> \"x\"\n    | VarY  -> \"y\"\n    | Sine expr -> \"sin(pi*\" ^ ((hlpr expr) ^ \")\")\n    | Cosine expr -> \"cos(pi*\" ^ ((hlpr expr) ^ \")\")\n    | SinCosSq (e1,e2) ->\n        \"((sin^2(pi *\" ^\n          ((hlpr e1) ^ (\")*cos^2(pi* \" ^ ((hlpr e2) ^ \"))/2)\")))\n    | Average (e1,e2) -> \"((\" ^ ((hlpr e1) ^ (\"+\" ^ ((hlpr e2) ^ \")/2)\")))\n    | Times (e1,e2) -> (hlpr e1) ^ (\"*\" ^ (hlpr e2))\n    | Thresh (e1,e2,e3,e4) ->\n        \"(\" ^\n          ((hlpr e1) ^\n             (\"<\" ^\n                ((hlpr e2) ^ (\"?\" ^ ((hlpr e3) ^ (\":\" ^ ((hlpr e4) ^ \")\")))))))\n    | ContourFun (e1,e2,e3) ->\n        let (a,b,c) = ((hlpr e1), (hlpr e2), (hlpr e3)) in\n        \"(abs((cos(pi*\" ^\n          (a ^\n             (\"^2+\" ^\n                (b ^\n                   (\")(sin(pi*\" ^ (a ^ (\"+\" ^ (b ^ (\"^2))))*\" ^ (c ^ \")\"))))))))) in\n  hlpr e;;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n\nlet _ = exprToString sampleExpr1;;\n","type":"","out":""},{"in":"let buildX()                       = VarX","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildX () = VarX;;\n","type":"","out":""},{"in":"let buildY()                       = VarY","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildY () = VarY;;\n","type":"","out":""},{"in":"let buildSine(e)                   = Sine(e)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildSine e = Sine e;;\n","type":"","out":""},{"in":"let buildCosine(e)                 = Cosine(e)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildCosine e = Cosine e;;\n","type":"","out":""},{"in":"let buildSinCosSq(e1,e2)\t   = SinCosSq(e1, e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildSinCosSq (e1,e2) = SinCosSq (e1, e2);;\n","type":"","out":""},{"in":"let buildAverage(e1,e2)            = Average(e1,e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n","type":"","out":""},{"in":"let buildTimes(e1,e2)              = Times(e1,e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n","type":"","out":""},{"in":"let buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n","type":"","out":""},{"in":"let buildContourFun(e1, e2, e3)    = ContourFun(e1, e2, e3)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildContourFun (e1,e2,e3) = ContourFun (e1, e2, e3);;\n","type":"","out":""},{"in":"let pi = 4.0 *. atan 1.0","min":"\nlet pi = 4.0 *. (atan 1.0);;\n","type":"","out":""},{"in":"let rec eval (e,x,y) = match e with\n| VarX            \n-> x\n| VarY            \n-> y\n| Sine e'         \n-> sin (pi *. eval (e', x, y))\n| Cosine e' \n-> cos(pi *. eval(e', x, y))\n| SinCosSq (e1,e2)\n-> let (a, b) = (pi *. eval(e1, x, y), pi *. eval(e2, x, y)) in\n((sin(a)*.sin(a)) +. (cos(b)*.cos(b))) /. 2.0\n| Average (e1,e2) \n-> (eval(e1, x, y) +. eval(e2, x, y)) /. 2.0\n| Times (e1,e2) \n-> eval(e1, x, y) *. eval(e2, x, y)\n| Thresh  (a, b, a_less, b_less) \n-> (match eval (a, x, y) < eval (b, x, y) with\n| true -> eval (a_less, x, y)\n| false -> eval (b_less, x, y)\n)\n| ContourFun (e1, e2, e3)\n-> let (a, b, c) = (eval (e1,x,y), eval(e2,x,y), eval(e3,x,y)) in\nabs_float(cos(pi*.(a**2. +. b)) *. sin(pi*.(a +. b **2.))) *. c","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n","type":"","out":""},{"in":"let _ = eval(buildX(), 1.0, 1.0)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildX () = VarX;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet _ = eval ((buildX ()), 1.0, 1.0);;\n","type":"","out":""},{"in":"let _ = eval(buildSine(buildX()), 1.0, 1.0)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildSine e = Sine e;;\n\nlet buildX () = VarX;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet _ = eval ((buildSine (buildX ())), 1.0, 1.0);;\n","type":"","out":""},{"in":"let _ = eval(buildSine(buildAverage(buildX(), buildY())), 0.3, 0.3)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildSine e = Sine e;;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet _ =\n  eval ((buildSine (buildAverage ((buildX ()), (buildY ())))), 0.3, 0.3);;\n","type":"","out":""},{"in":"let eval_fn e (x,y) = \nlet rv = eval (e,x,y) in\nassert (-1.0 <= rv && rv <= 1.0);\nrv","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n","type":"","out":""},{"in":"let sampleExpr =\nbuildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\nbuildX()),buildTimes(buildCosine (buildCosine (buildAverage\n(buildTimes (buildY(),buildY()),buildCosine (buildX())))),\nbuildCosine (buildTimes (buildSine (buildCosine\n(buildY())),buildAverage (buildSine (buildX()), buildTimes\n(buildX(),buildX()))))))),buildY())))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet sampleExpr =\n  buildCosine\n    (buildSine\n       (buildTimes\n          ((buildCosine\n              (buildAverage\n                 ((buildCosine (buildX ())),\n                   (buildTimes\n                      ((buildCosine\n                          (buildCosine\n                             (buildAverage\n                                ((buildTimes ((buildY ()), (buildY ()))),\n                                  (buildCosine (buildX ())))))),\n                        (buildCosine\n                           (buildTimes\n                              ((buildSine (buildCosine (buildY ()))),\n                                (buildAverage\n                                   ((buildSine (buildX ())),\n                                     (buildTimes ((buildX ()), (buildX ()))))))))))))),\n            (buildY ()))));;\n","type":"","out":""},{"in":"let sampleExpr2 =\nbuildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet sampleExpr2 =\n  buildThresh\n    ((buildX ()), (buildY ()), (buildSine (buildX ())),\n      (buildCosine (buildY ())));;\n","type":"","out":""},{"in":"let rec build (rand,depth) = match depth with\n| 0 -> (match rand(0, 1) with \n| 0 -> buildX() \n| 1 -> buildY()\n| _ -> failwith \"this should have been unreachable :(\"\n)\n| _ -> \nlet num = rand(0,100) in \nlet (a,b,c,d) = (build(rand, depth-1), build(rand, depth-1), \nbuild(rand, depth-1), build(rand, depth-1)) in\nmatch num with\n| num when num < 70 && num < 45 ->\n(match num mod 2 with\n| 0 -> buildSinCosSq(a, b)\n| 1 -> buildContourFun(c, d, a)\n| _ -> failwith \"this should have been unreachable :(\"\n)\n| num when num < 70 ->\n(match num mod 4 with\n| 0 -> buildSine(c)\n| 1 -> buildCosine(d)\n| 2 -> buildSinCosSq(a, c)\n| 3 -> buildContourFun(b, a, c)\n| _ -> failwith \"this should have been unreachable :(\"\n)\n| num when num >= 70 ->\n(match num mod 7 with \n| 0 -> buildThresh(d, c, b, a)\n| 1 -> buildAverage(c, b)\n| 2 -> buildTimes(a, d)\n| 3 -> buildSine(d)\n| 4 -> buildCosine(c)\n| 5 -> buildSinCosSq(b, a)\n| 6 -> buildContourFun(d, c, c)\n| _ -> failwith \"this should have been unreachable :(\"\n)\n| _ -> failwith \"stuff here\"","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildContourFun (e1,e2,e3) = ContourFun (e1, e2, e3);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSinCosSq (e1,e2) = SinCosSq (e1, e2);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  match depth with\n  | 0 ->\n      (match rand (0, 1) with\n       | 0 -> buildX ()\n       | 1 -> buildY ()\n       | _ -> failwith \"this should have been unreachable :(\")\n  | _ ->\n      let num = rand (0, 100) in\n      let (a,b,c,d) =\n        ((build (rand, (depth - 1))), (build (rand, (depth - 1))),\n          (build (rand, (depth - 1))), (build (rand, (depth - 1)))) in\n      (match num with\n       | num when (num < 70) && (num < 45) ->\n           (match num mod 2 with\n            | 0 -> buildSinCosSq (a, b)\n            | 1 -> buildContourFun (c, d, a)\n            | _ -> failwith \"this should have been unreachable :(\")\n       | num when num < 70 ->\n           (match num mod 4 with\n            | 0 -> buildSine c\n            | 1 -> buildCosine d\n            | 2 -> buildSinCosSq (a, c)\n            | 3 -> buildContourFun (b, a, c)\n            | _ -> failwith \"this should have been unreachable :(\")\n       | num when num >= 70 ->\n           (match num mod 7 with\n            | 0 -> buildThresh (d, c, b, a)\n            | 1 -> buildAverage (c, b)\n            | 2 -> buildTimes (a, d)\n            | 3 -> buildSine d\n            | 4 -> buildCosine c\n            | 5 -> buildSinCosSq (b, a)\n            | 6 -> buildContourFun (d, c, c)\n            | _ -> failwith \"this should have been unreachable :(\")\n       | _ -> failwith \"stuff here\");;\n","type":"","out":""},{"in":"let g1 () = (5, 5012311, 123514)","min":"\nlet g1 () = (5, 5012311, 123514);;\n","type":"","out":""},{"in":"let g2 () = (5, 21023, 123111)","min":"\nlet g2 () = (5, 21023, 123111);;\n","type":"","out":""},{"in":"let g3 () = (5, 102351113, 2311468)","min":"\nlet g3 () = (5, 102351113, 2311468);;\n","type":"","out":""},{"in":"let c1 () = (5, 1321, 5141238)","min":"\nlet c1 () = (5, 1321, 5141238);;\n","type":"","out":""},{"in":"let c2 () = (5, 11111, 41231)","min":"\nlet c2 () = (5, 11111, 41231);;\n","type":"","out":""},{"in":"let c3 () = (5, 5013731, 873489)","min":"\nlet c3 () = (5, 5013731, 873489);;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rand = makeRand(27, 130)","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet rand = makeRand (27, 130);;\n","type":"","out":""},{"in":"let expr = build(rand, 6)","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildContourFun (e1,e2,e3) = ContourFun (e1, e2, e3);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSinCosSq (e1,e2) = SinCosSq (e1, e2);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  match depth with\n  | 0 ->\n      (match rand (0, 1) with\n       | 0 -> buildX ()\n       | 1 -> buildY ()\n       | _ -> failwith \"this should have been unreachable :(\")\n  | _ ->\n      let num = rand (0, 100) in\n      let (a,b,c,d) =\n        ((build (rand, (depth - 1))), (build (rand, (depth - 1))),\n          (build (rand, (depth - 1))), (build (rand, (depth - 1)))) in\n      (match num with\n       | num when (num < 70) && (num < 45) ->\n           (match num mod 2 with\n            | 0 -> buildSinCosSq (a, b)\n            | 1 -> buildContourFun (c, d, a)\n            | _ -> failwith \"this should have been unreachable :(\")\n       | num when num < 70 ->\n           (match num mod 4 with\n            | 0 -> buildSine c\n            | 1 -> buildCosine d\n            | 2 -> buildSinCosSq (a, c)\n            | 3 -> buildContourFun (b, a, c)\n            | _ -> failwith \"this should have been unreachable :(\")\n       | num when num >= 70 ->\n           (match num mod 7 with\n            | 0 -> buildThresh (d, c, b, a)\n            | 1 -> buildAverage (c, b)\n            | 2 -> buildTimes (a, d)\n            | 3 -> buildSine d\n            | 4 -> buildCosine c\n            | 5 -> buildSinCosSq (b, a)\n            | 6 -> buildContourFun (d, c, c)\n            | _ -> failwith \"this should have been unreachable :(\")\n       | _ -> failwith \"stuff here\");;\n\nlet rand = makeRand (27, 130);;\n\nlet expr = build (rand, 6);;\n","type":"","out":""},{"in":"let _ = eval(expr, 0.70, 0.45)","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildContourFun (e1,e2,e3) = ContourFun (e1, e2, e3);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSinCosSq (e1,e2) = SinCosSq (e1, e2);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  match depth with\n  | 0 ->\n      (match rand (0, 1) with\n       | 0 -> buildX ()\n       | 1 -> buildY ()\n       | _ -> failwith \"this should have been unreachable :(\")\n  | _ ->\n      let num = rand (0, 100) in\n      let (a,b,c,d) =\n        ((build (rand, (depth - 1))), (build (rand, (depth - 1))),\n          (build (rand, (depth - 1))), (build (rand, (depth - 1)))) in\n      (match num with\n       | num when (num < 70) && (num < 45) ->\n           (match num mod 2 with\n            | 0 -> buildSinCosSq (a, b)\n            | 1 -> buildContourFun (c, d, a)\n            | _ -> failwith \"this should have been unreachable :(\")\n       | num when num < 70 ->\n           (match num mod 4 with\n            | 0 -> buildSine c\n            | 1 -> buildCosine d\n            | 2 -> buildSinCosSq (a, c)\n            | 3 -> buildContourFun (b, a, c)\n            | _ -> failwith \"this should have been unreachable :(\")\n       | num when num >= 70 ->\n           (match num mod 7 with\n            | 0 -> buildThresh (d, c, b, a)\n            | 1 -> buildAverage (c, b)\n            | 2 -> buildTimes (a, d)\n            | 3 -> buildSine d\n            | 4 -> buildCosine c\n            | 5 -> buildSinCosSq (b, a)\n            | 6 -> buildContourFun (d, c, c)\n            | _ -> failwith \"this should have been unreachable :(\")\n       | _ -> failwith \"stuff here\");;\n\nlet rand = makeRand (27, 130);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet expr = build (rand, 6);;\n\nlet _ = eval (expr, 0.70, 0.45);;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildContourFun (e1,e2,e3) = ContourFun (e1, e2, e3);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSinCosSq (e1,e2) = SinCosSq (e1, e2);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  match depth with\n  | 0 ->\n      (match rand (0, 1) with\n       | 0 -> buildX ()\n       | 1 -> buildY ()\n       | _ -> failwith \"this should have been unreachable :(\")\n  | _ ->\n      let num = rand (0, 100) in\n      let (a,b,c,d) =\n        ((build (rand, (depth - 1))), (build (rand, (depth - 1))),\n          (build (rand, (depth - 1))), (build (rand, (depth - 1)))) in\n      (match num with\n       | num when (num < 70) && (num < 45) ->\n           (match num mod 2 with\n            | 0 -> buildSinCosSq (a, b)\n            | 1 -> buildContourFun (c, d, a)\n            | _ -> failwith \"this should have been unreachable :(\")\n       | num when num < 70 ->\n           (match num mod 4 with\n            | 0 -> buildSine c\n            | 1 -> buildCosine d\n            | 2 -> buildSinCosSq (a, c)\n            | 3 -> buildContourFun (b, a, c)\n            | _ -> failwith \"this should have been unreachable :(\")\n       | num when num >= 70 ->\n           (match num mod 7 with\n            | 0 -> buildThresh (d, c, b, a)\n            | 1 -> buildAverage (c, b)\n            | 2 -> buildTimes (a, d)\n            | 3 -> buildSine d\n            | 4 -> buildCosine c\n            | 5 -> buildSinCosSq (b, a)\n            | 6 -> buildContourFun (d, c, c)\n            | _ -> failwith \"this should have been unreachable :(\")\n       | _ -> failwith \"stuff here\");;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  let rec hlpr e =\n    match e with\n    | VarX  -> \"x\"\n    | VarY  -> \"y\"\n    | Sine expr -> \"sin(pi*\" ^ ((hlpr expr) ^ \")\")\n    | Cosine expr -> \"cos(pi*\" ^ ((hlpr expr) ^ \")\")\n    | SinCosSq (e1,e2) ->\n        \"((sin^2(pi *\" ^\n          ((hlpr e1) ^ (\")*cos^2(pi* \" ^ ((hlpr e2) ^ \"))/2)\")))\n    | Average (e1,e2) -> \"((\" ^ ((hlpr e1) ^ (\"+\" ^ ((hlpr e2) ^ \")/2)\")))\n    | Times (e1,e2) -> (hlpr e1) ^ (\"*\" ^ (hlpr e2))\n    | Thresh (e1,e2,e3,e4) ->\n        \"(\" ^\n          ((hlpr e1) ^\n             (\"<\" ^\n                ((hlpr e2) ^ (\"?\" ^ ((hlpr e3) ^ (\":\" ^ ((hlpr e4) ^ \")\")))))))\n    | ContourFun (e1,e2,e3) ->\n        let (a,b,c) = ((hlpr e1), (hlpr e2), (hlpr e3)) in\n        \"(abs((cos(pi*\" ^\n          (a ^\n             (\"^2+\" ^\n                (b ^\n                   (\")(sin(pi*\" ^ (a ^ (\"+\" ^ (b ^ (\"^2))))*\" ^ (c ^ \")\"))))))))) in\n  hlpr e;;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildContourFun (e1,e2,e3) = ContourFun (e1, e2, e3);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSinCosSq (e1,e2) = SinCosSq (e1, e2);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  match depth with\n  | 0 ->\n      (match rand (0, 1) with\n       | 0 -> buildX ()\n       | 1 -> buildY ()\n       | _ -> failwith \"this should have been unreachable :(\")\n  | _ ->\n      let num = rand (0, 100) in\n      let (a,b,c,d) =\n        ((build (rand, (depth - 1))), (build (rand, (depth - 1))),\n          (build (rand, (depth - 1))), (build (rand, (depth - 1)))) in\n      (match num with\n       | num when (num < 70) && (num < 45) ->\n           (match num mod 2 with\n            | 0 -> buildSinCosSq (a, b)\n            | 1 -> buildContourFun (c, d, a)\n            | _ -> failwith \"this should have been unreachable :(\")\n       | num when num < 70 ->\n           (match num mod 4 with\n            | 0 -> buildSine c\n            | 1 -> buildCosine d\n            | 2 -> buildSinCosSq (a, c)\n            | 3 -> buildContourFun (b, a, c)\n            | _ -> failwith \"this should have been unreachable :(\")\n       | num when num >= 70 ->\n           (match num mod 7 with\n            | 0 -> buildThresh (d, c, b, a)\n            | 1 -> buildAverage (c, b)\n            | 2 -> buildTimes (a, d)\n            | 3 -> buildSine d\n            | 4 -> buildCosine c\n            | 5 -> buildSinCosSq (b, a)\n            | 6 -> buildContourFun (d, c, c)\n            | _ -> failwith \"this should have been unreachable :(\")\n       | _ -> failwith \"stuff here\");;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  let rec hlpr e =\n    match e with\n    | VarX  -> \"x\"\n    | VarY  -> \"y\"\n    | Sine expr -> \"sin(pi*\" ^ ((hlpr expr) ^ \")\")\n    | Cosine expr -> \"cos(pi*\" ^ ((hlpr expr) ^ \")\")\n    | SinCosSq (e1,e2) ->\n        \"((sin^2(pi *\" ^\n          ((hlpr e1) ^ (\")*cos^2(pi* \" ^ ((hlpr e2) ^ \"))/2)\")))\n    | Average (e1,e2) -> \"((\" ^ ((hlpr e1) ^ (\"+\" ^ ((hlpr e2) ^ \")/2)\")))\n    | Times (e1,e2) -> (hlpr e1) ^ (\"*\" ^ (hlpr e2))\n    | Thresh (e1,e2,e3,e4) ->\n        \"(\" ^\n          ((hlpr e1) ^\n             (\"<\" ^\n                ((hlpr e2) ^ (\"?\" ^ ((hlpr e3) ^ (\":\" ^ ((hlpr e4) ^ \")\")))))))\n    | ContourFun (e1,e2,e3) ->\n        let (a,b,c) = ((hlpr e1), (hlpr e2), (hlpr e3)) in\n        \"(abs((cos(pi*\" ^\n          (a ^\n             (\"^2+\" ^\n                (b ^\n                   (\")(sin(pi*\" ^ (a ^ (\"+\" ^ (b ^ (\"^2))))*\" ^ (c ^ \")\"))))))))) in\n  hlpr e;;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":0,"stop":17784},"type":"eval"},"cursor":8461,"time":1.398210447661637e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | h::t -> let (x, y) = h in\n        if x = k then y\n        else assoc (d, k, t)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' = if List.mem h seen then seen else h::seen in\n          let rest' = t in \n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet rec wwhile (f, b) = let (out, result) = f b in\n    match result with\n      | false -> out\n      | true -> wwhile(f, out)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n\nlet fixpoint (f,b) = \n  let g x = let evaled = f x in (evaled, evaled <> x) in\n    wwhile (g, b)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine        of expr\n    | Cosine      of expr\n    | SinCosSq    of expr * expr\n    | Average     of expr * expr\n    | Times       of expr * expr\n    | Thresh      of expr * expr * expr * expr\t\n    | ContourFun  of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet rec exprToString e = \n  let rec hlpr e = match e with\n    | VarX ->\n        \"x\"\n    | VarY -> \n        \"y\"\n    | Sine expr -> \n        \"sin(pi*\" ^ hlpr expr ^ \")\"\n    | Cosine expr -> \n        \"cos(pi*\" ^ hlpr expr ^ \")\"\n    | SinCosSq (e1, e2) ->\n        \"((sin^2(pi *\" ^ hlpr e1 ^ \")*cos^2(pi* \" ^ hlpr e2 ^ \"))/2)\"\n    | Average (e1,e2) -> \n        \"((\" ^ hlpr e1 ^ \"+\" ^ hlpr e2 ^ \")/2)\"\n    | Times (e1,e2) -> \n        hlpr e1 ^ \"*\" ^ hlpr e2\n    | Thresh (e1,e2,e3,e4) -> \n        \"(\" ^ hlpr e1  ^ \"<\" ^ hlpr e2 ^ \"?\" ^ hlpr e3 ^ \":\" ^ hlpr e4 ^ \")\"\n    | ContourFun (e1, e2, e3) ->\n        let (a, b, c) = (hlpr e1, hlpr e2, hlpr e3) in\n          \"(abs((cos(pi*\" ^ a ^ \"^2+\" ^ b ^ \")(sin(pi*\" ^ a ^ \"+\" ^ b ^ \"^2))))*\" ^\n          c ^ \")\"\n  in \n    hlpr e\n\nlet _ = exprToString sampleExpr1\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildSinCosSq(e1,e2)\t   = SinCosSq(e1, e2)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\nlet buildContourFun(e1, e2, e3)    = ContourFun(e1, e2, e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX            \n    -> x\n  | VarY            \n    -> y\n  | Sine e'         \n    -> sin (pi *. eval (e', x, y))\n  | Cosine e' \n    -> cos(pi *. eval(e', x, y))\n  | SinCosSq (e1,e2)\n    -> let (a, b) = (pi *. eval(e1, x, y), pi *. eval(e2, x, y)) in\n        ((sin(a)*.sin(a)) +. (cos(b)*.cos(b))) /. 2.0\n  | Average (e1,e2) \n    -> (eval(e1, x, y) +. eval(e2, x, y)) /. 2.0\n  | Times (e1,e2) \n    -> eval(e1, x, y) *. eval(e2, x, y)\n  | Thresh  (a, b, a_less, b_less) \n    -> (match eval (a, x, y) < eval (b, x, y) with\n         | true -> eval (a_less, x, y)\n         | false -> eval (b_less, x, y)\n       )\n  | ContourFun (e1, e2, e3)\n    -> let (a, b, c) = (eval (e1,x,y), eval(e2,x,y), eval(e3,x,y)) in\n        abs_float(cos(pi*.(a**2. +. b)) *. sin(pi*.(a +. b **2.))) *. c\n\n\nlet _ = eval(buildX(), 1.0, 1.0)\nlet _ = eval(buildSine(buildX()), 1.0, 1.0)\nlet _ = eval(buildSine(buildAverage(buildX(), buildY())), 0.3, 0.3)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\n\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand,depth) = match depth with\n  | 0 -> (match rand(0, 1) with \n           | 0 -> buildX() \n           | 1 -> buildY()\n           | _ -> failwith \"this should have been unreachable :(\"\n         )\n  | _ -> \n      let num = rand(0,100) in \n      let (a,b,c,d) = (build(rand, depth-1), build(rand, depth-1), \n                       build(rand, depth-1), build(rand, depth-1)) in\n        match num with\n          | num when num < 70 && num < 45 ->\n              (match num mod 2 with\n                | 0 -> buildSinCosSq(a, b)\n                | 1 -> buildContourFun(c, d, a)\n                | _ -> failwith \"this should have been unreachable :(\"\n              )\n          | num when num < 70 ->\n              (match num mod 4 with\n                | 0 -> buildSine(c)\n                | 1 -> buildCosine(d)\n                | 2 -> buildSinCosSq(a, c)\n                | 3 -> buildContourFun(b, a, c)\n                | _ -> failwith \"this should have been unreachable :(\"\n              )\n          | num when num >= 70 ->\n              (match num mod 7 with \n                | 0 -> buildThresh(d, c, b, a)\n                | 1 -> buildAverage(c, b)\n                | 2 -> buildTimes(a, d)\n                | 3 -> buildSine(d)\n                | 4 -> buildCosine(c)\n                | 5 -> buildSinCosSq(b, a)\n                | 6 -> buildContourFun(d, c, c)\n                | _ -> failwith \"this should have been unreachable :(\"\n              )\n          | _ -> failwith \"stuff here\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (5, 5012311, 123514)\nlet g2 () = (5, 21023, 123111)  \nlet g3 () = (5, 102351113, 2311468)  \n\nlet c1 () = (5, 1321, 5141238)\nlet c2 () = (5, 11111, 41231)\nlet c3 () = (5, 5013731, 873489)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\nlet rand = makeRand(27, 130)\nlet expr = build(rand, 6)\nlet _ = eval(expr, 0.70, 0.45)\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec assoc (d,k,l) = match l with\n| [] -> d\n| h::t -> let (x, y) = h in\nif x = k then y\nelse assoc (d, k, t)","min":"\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | h::t -> let (x,y) = h in if x = k then y else assoc (d, k, t);;\n","type":"","out":""},{"in":"let removeDuplicates l = \nlet rec helper (seen,rest) = \nmatch rest with \n[] -> seen\n| h::t -> \nlet seen' = if List.mem h seen then seen else h::seen in\nlet rest' = t in \nhelper (seen',rest') \nin\nList.rev (helper ([],l))","min":"\nlet removeDuplicates l =\n  let rec helper (seen,rest) =\n    match rest with\n    | [] -> seen\n    | h::t ->\n        let seen' = if List.mem h seen then seen else h :: seen in\n        let rest' = t in helper (seen', rest') in\n  List.rev (helper ([], l));;\n","type":"","out":""},{"in":"let rec wwhile (f, b) = let (out, result) = f b in\nmatch result with\n| false -> out\n| true -> wwhile(f, out)","min":"\nlet rec wwhile (f,b) =\n  let (out,result) = f b in\n  match result with | false  -> out | true  -> wwhile (f, out);;\n","type":"","out":""},{"in":"let fixpoint (f,b) = \nlet g x = let evaled = f x in (evaled, evaled <> x) in\nwwhile (g, b)","min":"\nlet rec wwhile (f,b) =\n  let (out,result) = f b in\n  match result with | false  -> out | true  -> wwhile (f, out);;\n\nlet fixpoint (f,b) =\n  let g x = let evaled = f x in (evaled, (evaled <> x)) in wwhile (g, b);;\n","type":"","out":""},{"in":"type expr = \nVarX\n| VarY\n| Sine        of expr\n| Cosine      of expr\n| SinCosSq    of expr * expr\n| Average     of expr * expr\n| Times       of expr * expr\n| Thresh      of expr * expr * expr * expr\t\n| ContourFun  of expr * expr * expr","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n","type":"","out":""},{"in":"let sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n","type":"","out":""},{"in":"let rec exprToString e = \nlet rec hlpr e = match e with\n| VarX ->\n\"x\"\n| VarY -> \n\"y\"\n| Sine expr -> \n\"sin(pi*\" ^ hlpr expr ^ \")\"\n| Cosine expr -> \n\"cos(pi*\" ^ hlpr expr ^ \")\"\n| SinCosSq (e1, e2) ->\n\"((sin^2(pi *\" ^ hlpr e1 ^ \")*cos^2(pi* \" ^ hlpr e2 ^ \"))/2)\"\n| Average (e1,e2) -> \n\"((\" ^ hlpr e1 ^ \"+\" ^ hlpr e2 ^ \")/2)\"\n| Times (e1,e2) -> \nhlpr e1 ^ \"*\" ^ hlpr e2\n| Thresh (e1,e2,e3,e4) -> \n\"(\" ^ hlpr e1  ^ \"<\" ^ hlpr e2 ^ \"?\" ^ hlpr e3 ^ \":\" ^ hlpr e4 ^ \")\"\n| ContourFun (e1, e2, e3) ->\nlet (a, b, c) = (hlpr e1, hlpr e2, hlpr e3) in\n\"(abs((cos(pi*\" ^ a ^ \"^2+\" ^ b ^ \")(sin(pi*\" ^ a ^ \"+\" ^ b ^ \"^2))))*\" ^\nc ^ \")\"\nin \nhlpr e","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet rec exprToString e =\n  let rec hlpr e =\n    match e with\n    | VarX  -> \"x\"\n    | VarY  -> \"y\"\n    | Sine expr -> \"sin(pi*\" ^ ((hlpr expr) ^ \")\")\n    | Cosine expr -> \"cos(pi*\" ^ ((hlpr expr) ^ \")\")\n    | SinCosSq (e1,e2) ->\n        \"((sin^2(pi *\" ^\n          ((hlpr e1) ^ (\")*cos^2(pi* \" ^ ((hlpr e2) ^ \"))/2)\")))\n    | Average (e1,e2) -> \"((\" ^ ((hlpr e1) ^ (\"+\" ^ ((hlpr e2) ^ \")/2)\")))\n    | Times (e1,e2) -> (hlpr e1) ^ (\"*\" ^ (hlpr e2))\n    | Thresh (e1,e2,e3,e4) ->\n        \"(\" ^\n          ((hlpr e1) ^\n             (\"<\" ^\n                ((hlpr e2) ^ (\"?\" ^ ((hlpr e3) ^ (\":\" ^ ((hlpr e4) ^ \")\")))))))\n    | ContourFun (e1,e2,e3) ->\n        let (a,b,c) = ((hlpr e1), (hlpr e2), (hlpr e3)) in\n        \"(abs((cos(pi*\" ^\n          (a ^\n             (\"^2+\" ^\n                (b ^\n                   (\")(sin(pi*\" ^ (a ^ (\"+\" ^ (b ^ (\"^2))))*\" ^ (c ^ \")\"))))))))) in\n  hlpr e;;\n","type":"","out":""},{"in":"let _ = exprToString sampleExpr1","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet rec exprToString e =\n  let rec hlpr e =\n    match e with\n    | VarX  -> \"x\"\n    | VarY  -> \"y\"\n    | Sine expr -> \"sin(pi*\" ^ ((hlpr expr) ^ \")\")\n    | Cosine expr -> \"cos(pi*\" ^ ((hlpr expr) ^ \")\")\n    | SinCosSq (e1,e2) ->\n        \"((sin^2(pi *\" ^\n          ((hlpr e1) ^ (\")*cos^2(pi* \" ^ ((hlpr e2) ^ \"))/2)\")))\n    | Average (e1,e2) -> \"((\" ^ ((hlpr e1) ^ (\"+\" ^ ((hlpr e2) ^ \")/2)\")))\n    | Times (e1,e2) -> (hlpr e1) ^ (\"*\" ^ (hlpr e2))\n    | Thresh (e1,e2,e3,e4) ->\n        \"(\" ^\n          ((hlpr e1) ^\n             (\"<\" ^\n                ((hlpr e2) ^ (\"?\" ^ ((hlpr e3) ^ (\":\" ^ ((hlpr e4) ^ \")\")))))))\n    | ContourFun (e1,e2,e3) ->\n        let (a,b,c) = ((hlpr e1), (hlpr e2), (hlpr e3)) in\n        \"(abs((cos(pi*\" ^\n          (a ^\n             (\"^2+\" ^\n                (b ^\n                   (\")(sin(pi*\" ^ (a ^ (\"+\" ^ (b ^ (\"^2))))*\" ^ (c ^ \")\"))))))))) in\n  hlpr e;;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n\nlet _ = exprToString sampleExpr1;;\n","type":"","out":""},{"in":"let buildX()                       = VarX","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildX () = VarX;;\n","type":"","out":""},{"in":"let buildY()                       = VarY","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildY () = VarY;;\n","type":"","out":""},{"in":"let buildSine(e)                   = Sine(e)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildSine e = Sine e;;\n","type":"","out":""},{"in":"let buildCosine(e)                 = Cosine(e)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildCosine e = Cosine e;;\n","type":"","out":""},{"in":"let buildSinCosSq(e1,e2)\t   = SinCosSq(e1, e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildSinCosSq (e1,e2) = SinCosSq (e1, e2);;\n","type":"","out":""},{"in":"let buildAverage(e1,e2)            = Average(e1,e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n","type":"","out":""},{"in":"let buildTimes(e1,e2)              = Times(e1,e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n","type":"","out":""},{"in":"let buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n","type":"","out":""},{"in":"let buildContourFun(e1, e2, e3)    = ContourFun(e1, e2, e3)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildContourFun (e1,e2,e3) = ContourFun (e1, e2, e3);;\n","type":"","out":""},{"in":"let pi = 4.0 *. atan 1.0","min":"\nlet pi = 4.0 *. (atan 1.0);;\n","type":"","out":""},{"in":"let rec eval (e,x,y) = match e with\n| VarX            \n-> x\n| VarY            \n-> y\n| Sine e'         \n-> sin (pi *. eval (e', x, y))\n| Cosine e' \n-> cos(pi *. eval(e', x, y))\n| SinCosSq (e1,e2)\n-> let (a, b) = (pi *. eval(e1, x, y), pi *. eval(e2, x, y)) in\n((sin(a)*.sin(a)) +. (cos(b)*.cos(b))) /. 2.0\n| Average (e1,e2) \n-> (eval(e1, x, y) +. eval(e2, x, y)) /. 2.0\n| Times (e1,e2) \n-> eval(e1, x, y) *. eval(e2, x, y)\n| Thresh  (a, b, a_less, b_less) \n-> (match eval (a, x, y) < eval (b, x, y) with\n| true -> eval (a_less, x, y)\n| false -> eval (b_less, x, y)\n)\n| ContourFun (e1, e2, e3)\n-> let (a, b, c) = (eval (e1,x,y), eval(e2,x,y), eval(e3,x,y)) in\nabs_float(cos(pi*.(a**2. +. b)) *. sin(pi*.(a +. b **2.))) *. c","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n","type":"","out":""},{"in":"let _ = eval(buildX(), 1.0, 1.0)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildX () = VarX;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet _ = eval ((buildX ()), 1.0, 1.0);;\n","type":"","out":""},{"in":"let _ = eval(buildSine(buildX()), 1.0, 1.0)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildSine e = Sine e;;\n\nlet buildX () = VarX;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet _ = eval ((buildSine (buildX ())), 1.0, 1.0);;\n","type":"","out":""},{"in":"let _ = eval(buildSine(buildAverage(buildX(), buildY())), 0.3, 0.3)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildSine e = Sine e;;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet _ =\n  eval ((buildSine (buildAverage ((buildX ()), (buildY ())))), 0.3, 0.3);;\n","type":"","out":""},{"in":"let eval_fn e (x,y) = \nlet rv = eval (e,x,y) in\nassert (-1.0 <= rv && rv <= 1.0);\nrv","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n","type":"","out":""},{"in":"let sampleExpr =\nbuildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\nbuildX()),buildTimes(buildCosine (buildCosine (buildAverage\n(buildTimes (buildY(),buildY()),buildCosine (buildX())))),\nbuildCosine (buildTimes (buildSine (buildCosine\n(buildY())),buildAverage (buildSine (buildX()), buildTimes\n(buildX(),buildX()))))))),buildY())))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet sampleExpr =\n  buildCosine\n    (buildSine\n       (buildTimes\n          ((buildCosine\n              (buildAverage\n                 ((buildCosine (buildX ())),\n                   (buildTimes\n                      ((buildCosine\n                          (buildCosine\n                             (buildAverage\n                                ((buildTimes ((buildY ()), (buildY ()))),\n                                  (buildCosine (buildX ())))))),\n                        (buildCosine\n                           (buildTimes\n                              ((buildSine (buildCosine (buildY ()))),\n                                (buildAverage\n                                   ((buildSine (buildX ())),\n                                     (buildTimes ((buildX ()), (buildX ()))))))))))))),\n            (buildY ()))));;\n","type":"","out":""},{"in":"let sampleExpr2 =\nbuildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet sampleExpr2 =\n  buildThresh\n    ((buildX ()), (buildY ()), (buildSine (buildX ())),\n      (buildCosine (buildY ())));;\n","type":"","out":""},{"in":"let rec build (rand,depth) = match depth with\n| 0 -> (match rand(0, 1) with \n| 0 -> buildX() \n| 1 -> buildY()\n| _ -> failwith \"this should have been unreachable :(\"\n)\n| _ -> \nlet num = rand(0,100) in \nlet (a,b,c,d) = (build(rand, depth-1), build(rand, depth-1), \nbuild(rand, depth-1), build(rand, depth-1)) in\nmatch num with\n| num when num < 70 && num < 45 ->\n(match num mod 2 with\n| 0 -> buildSinCosSq(a, b)\n| 1 -> buildContourFun(c, d, a)\n| _ -> failwith \"this should have been unreachable :(\"\n)\n| num when num < 70 ->\n(match num mod 4 with\n| 0 -> buildSine(c)\n| 1 -> buildCosine(d)\n| 2 -> buildSinCosSq(a, c)\n| 3 -> buildContourFun(b, a, c)\n| _ -> failwith \"this should have been unreachable :(\"\n)\n| num when num >= 70 ->\n(match num mod 7 with \n| 0 -> buildThresh(d, c, b, a)\n| 1 -> buildAverage(c, b)\n| 2 -> buildTimes(a, d)\n| 3 -> buildSine(d)\n| 4 -> buildCosine(c)\n| 5 -> buildSinCosSq(b, a)\n| 6 -> buildContourFun(d, c, c)\n| _ -> failwith \"this should have been unreachable :(\"\n)\n| _ -> failwith \"stuff here\"","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildContourFun (e1,e2,e3) = ContourFun (e1, e2, e3);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSinCosSq (e1,e2) = SinCosSq (e1, e2);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  match depth with\n  | 0 ->\n      (match rand (0, 1) with\n       | 0 -> buildX ()\n       | 1 -> buildY ()\n       | _ -> failwith \"this should have been unreachable :(\")\n  | _ ->\n      let num = rand (0, 100) in\n      let (a,b,c,d) =\n        ((build (rand, (depth - 1))), (build (rand, (depth - 1))),\n          (build (rand, (depth - 1))), (build (rand, (depth - 1)))) in\n      (match num with\n       | num when (num < 70) && (num < 45) ->\n           (match num mod 2 with\n            | 0 -> buildSinCosSq (a, b)\n            | 1 -> buildContourFun (c, d, a)\n            | _ -> failwith \"this should have been unreachable :(\")\n       | num when num < 70 ->\n           (match num mod 4 with\n            | 0 -> buildSine c\n            | 1 -> buildCosine d\n            | 2 -> buildSinCosSq (a, c)\n            | 3 -> buildContourFun (b, a, c)\n            | _ -> failwith \"this should have been unreachable :(\")\n       | num when num >= 70 ->\n           (match num mod 7 with\n            | 0 -> buildThresh (d, c, b, a)\n            | 1 -> buildAverage (c, b)\n            | 2 -> buildTimes (a, d)\n            | 3 -> buildSine d\n            | 4 -> buildCosine c\n            | 5 -> buildSinCosSq (b, a)\n            | 6 -> buildContourFun (d, c, c)\n            | _ -> failwith \"this should have been unreachable :(\")\n       | _ -> failwith \"stuff here\");;\n","type":"","out":""},{"in":"let g1 () = (2, 5012311, 123514)","min":"\nlet g1 () = (2, 5012311, 123514);;\n","type":"","out":""},{"in":"let g2 () = (2, 21023, 123111)","min":"\nlet g2 () = (2, 21023, 123111);;\n","type":"","out":""},{"in":"let g3 () = (2, 102351113, 2311468)","min":"\nlet g3 () = (2, 102351113, 2311468);;\n","type":"","out":""},{"in":"let c1 () = (2, 1321, 5141238)","min":"\nlet c1 () = (2, 1321, 5141238);;\n","type":"","out":""},{"in":"let c2 () = (2, 11111, 41231)","min":"\nlet c2 () = (2, 11111, 41231);;\n","type":"","out":""},{"in":"let c3 () = (2, 5013731, 873489)","min":"\nlet c3 () = (2, 5013731, 873489);;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rand = makeRand(27, 130)","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet rand = makeRand (27, 130);;\n","type":"","out":""},{"in":"let expr = build(rand, 6)","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildContourFun (e1,e2,e3) = ContourFun (e1, e2, e3);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSinCosSq (e1,e2) = SinCosSq (e1, e2);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  match depth with\n  | 0 ->\n      (match rand (0, 1) with\n       | 0 -> buildX ()\n       | 1 -> buildY ()\n       | _ -> failwith \"this should have been unreachable :(\")\n  | _ ->\n      let num = rand (0, 100) in\n      let (a,b,c,d) =\n        ((build (rand, (depth - 1))), (build (rand, (depth - 1))),\n          (build (rand, (depth - 1))), (build (rand, (depth - 1)))) in\n      (match num with\n       | num when (num < 70) && (num < 45) ->\n           (match num mod 2 with\n            | 0 -> buildSinCosSq (a, b)\n            | 1 -> buildContourFun (c, d, a)\n            | _ -> failwith \"this should have been unreachable :(\")\n       | num when num < 70 ->\n           (match num mod 4 with\n            | 0 -> buildSine c\n            | 1 -> buildCosine d\n            | 2 -> buildSinCosSq (a, c)\n            | 3 -> buildContourFun (b, a, c)\n            | _ -> failwith \"this should have been unreachable :(\")\n       | num when num >= 70 ->\n           (match num mod 7 with\n            | 0 -> buildThresh (d, c, b, a)\n            | 1 -> buildAverage (c, b)\n            | 2 -> buildTimes (a, d)\n            | 3 -> buildSine d\n            | 4 -> buildCosine c\n            | 5 -> buildSinCosSq (b, a)\n            | 6 -> buildContourFun (d, c, c)\n            | _ -> failwith \"this should have been unreachable :(\")\n       | _ -> failwith \"stuff here\");;\n\nlet rand = makeRand (27, 130);;\n\nlet expr = build (rand, 6);;\n","type":"","out":""},{"in":"let _ = eval(expr, 0.70, 0.45)","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildContourFun (e1,e2,e3) = ContourFun (e1, e2, e3);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSinCosSq (e1,e2) = SinCosSq (e1, e2);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  match depth with\n  | 0 ->\n      (match rand (0, 1) with\n       | 0 -> buildX ()\n       | 1 -> buildY ()\n       | _ -> failwith \"this should have been unreachable :(\")\n  | _ ->\n      let num = rand (0, 100) in\n      let (a,b,c,d) =\n        ((build (rand, (depth - 1))), (build (rand, (depth - 1))),\n          (build (rand, (depth - 1))), (build (rand, (depth - 1)))) in\n      (match num with\n       | num when (num < 70) && (num < 45) ->\n           (match num mod 2 with\n            | 0 -> buildSinCosSq (a, b)\n            | 1 -> buildContourFun (c, d, a)\n            | _ -> failwith \"this should have been unreachable :(\")\n       | num when num < 70 ->\n           (match num mod 4 with\n            | 0 -> buildSine c\n            | 1 -> buildCosine d\n            | 2 -> buildSinCosSq (a, c)\n            | 3 -> buildContourFun (b, a, c)\n            | _ -> failwith \"this should have been unreachable :(\")\n       | num when num >= 70 ->\n           (match num mod 7 with\n            | 0 -> buildThresh (d, c, b, a)\n            | 1 -> buildAverage (c, b)\n            | 2 -> buildTimes (a, d)\n            | 3 -> buildSine d\n            | 4 -> buildCosine c\n            | 5 -> buildSinCosSq (b, a)\n            | 6 -> buildContourFun (d, c, c)\n            | _ -> failwith \"this should have been unreachable :(\")\n       | _ -> failwith \"stuff here\");;\n\nlet rand = makeRand (27, 130);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet expr = build (rand, 6);;\n\nlet _ = eval (expr, 0.70, 0.45);;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildContourFun (e1,e2,e3) = ContourFun (e1, e2, e3);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSinCosSq (e1,e2) = SinCosSq (e1, e2);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  match depth with\n  | 0 ->\n      (match rand (0, 1) with\n       | 0 -> buildX ()\n       | 1 -> buildY ()\n       | _ -> failwith \"this should have been unreachable :(\")\n  | _ ->\n      let num = rand (0, 100) in\n      let (a,b,c,d) =\n        ((build (rand, (depth - 1))), (build (rand, (depth - 1))),\n          (build (rand, (depth - 1))), (build (rand, (depth - 1)))) in\n      (match num with\n       | num when (num < 70) && (num < 45) ->\n           (match num mod 2 with\n            | 0 -> buildSinCosSq (a, b)\n            | 1 -> buildContourFun (c, d, a)\n            | _ -> failwith \"this should have been unreachable :(\")\n       | num when num < 70 ->\n           (match num mod 4 with\n            | 0 -> buildSine c\n            | 1 -> buildCosine d\n            | 2 -> buildSinCosSq (a, c)\n            | 3 -> buildContourFun (b, a, c)\n            | _ -> failwith \"this should have been unreachable :(\")\n       | num when num >= 70 ->\n           (match num mod 7 with\n            | 0 -> buildThresh (d, c, b, a)\n            | 1 -> buildAverage (c, b)\n            | 2 -> buildTimes (a, d)\n            | 3 -> buildSine d\n            | 4 -> buildCosine c\n            | 5 -> buildSinCosSq (b, a)\n            | 6 -> buildContourFun (d, c, c)\n            | _ -> failwith \"this should have been unreachable :(\")\n       | _ -> failwith \"stuff here\");;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  let rec hlpr e =\n    match e with\n    | VarX  -> \"x\"\n    | VarY  -> \"y\"\n    | Sine expr -> \"sin(pi*\" ^ ((hlpr expr) ^ \")\")\n    | Cosine expr -> \"cos(pi*\" ^ ((hlpr expr) ^ \")\")\n    | SinCosSq (e1,e2) ->\n        \"((sin^2(pi *\" ^\n          ((hlpr e1) ^ (\")*cos^2(pi* \" ^ ((hlpr e2) ^ \"))/2)\")))\n    | Average (e1,e2) -> \"((\" ^ ((hlpr e1) ^ (\"+\" ^ ((hlpr e2) ^ \")/2)\")))\n    | Times (e1,e2) -> (hlpr e1) ^ (\"*\" ^ (hlpr e2))\n    | Thresh (e1,e2,e3,e4) ->\n        \"(\" ^\n          ((hlpr e1) ^\n             (\"<\" ^\n                ((hlpr e2) ^ (\"?\" ^ ((hlpr e3) ^ (\":\" ^ ((hlpr e4) ^ \")\")))))))\n    | ContourFun (e1,e2,e3) ->\n        let (a,b,c) = ((hlpr e1), (hlpr e2), (hlpr e3)) in\n        \"(abs((cos(pi*\" ^\n          (a ^\n             (\"^2+\" ^\n                (b ^\n                   (\")(sin(pi*\" ^ (a ^ (\"+\" ^ (b ^ (\"^2))))*\" ^ (c ^ \")\"))))))))) in\n  hlpr e;;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildContourFun (e1,e2,e3) = ContourFun (e1, e2, e3);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSinCosSq (e1,e2) = SinCosSq (e1, e2);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  match depth with\n  | 0 ->\n      (match rand (0, 1) with\n       | 0 -> buildX ()\n       | 1 -> buildY ()\n       | _ -> failwith \"this should have been unreachable :(\")\n  | _ ->\n      let num = rand (0, 100) in\n      let (a,b,c,d) =\n        ((build (rand, (depth - 1))), (build (rand, (depth - 1))),\n          (build (rand, (depth - 1))), (build (rand, (depth - 1)))) in\n      (match num with\n       | num when (num < 70) && (num < 45) ->\n           (match num mod 2 with\n            | 0 -> buildSinCosSq (a, b)\n            | 1 -> buildContourFun (c, d, a)\n            | _ -> failwith \"this should have been unreachable :(\")\n       | num when num < 70 ->\n           (match num mod 4 with\n            | 0 -> buildSine c\n            | 1 -> buildCosine d\n            | 2 -> buildSinCosSq (a, c)\n            | 3 -> buildContourFun (b, a, c)\n            | _ -> failwith \"this should have been unreachable :(\")\n       | num when num >= 70 ->\n           (match num mod 7 with\n            | 0 -> buildThresh (d, c, b, a)\n            | 1 -> buildAverage (c, b)\n            | 2 -> buildTimes (a, d)\n            | 3 -> buildSine d\n            | 4 -> buildCosine c\n            | 5 -> buildSinCosSq (b, a)\n            | 6 -> buildContourFun (d, c, c)\n            | _ -> failwith \"this should have been unreachable :(\")\n       | _ -> failwith \"stuff here\");;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  let rec hlpr e =\n    match e with\n    | VarX  -> \"x\"\n    | VarY  -> \"y\"\n    | Sine expr -> \"sin(pi*\" ^ ((hlpr expr) ^ \")\")\n    | Cosine expr -> \"cos(pi*\" ^ ((hlpr expr) ^ \")\")\n    | SinCosSq (e1,e2) ->\n        \"((sin^2(pi *\" ^\n          ((hlpr e1) ^ (\")*cos^2(pi* \" ^ ((hlpr e2) ^ \"))/2)\")))\n    | Average (e1,e2) -> \"((\" ^ ((hlpr e1) ^ (\"+\" ^ ((hlpr e2) ^ \")/2)\")))\n    | Times (e1,e2) -> (hlpr e1) ^ (\"*\" ^ (hlpr e2))\n    | Thresh (e1,e2,e3,e4) ->\n        \"(\" ^\n          ((hlpr e1) ^\n             (\"<\" ^\n                ((hlpr e2) ^ (\"?\" ^ ((hlpr e3) ^ (\":\" ^ ((hlpr e4) ^ \")\")))))))\n    | ContourFun (e1,e2,e3) ->\n        let (a,b,c) = ((hlpr e1), (hlpr e2), (hlpr e3)) in\n        \"(abs((cos(pi*\" ^\n          (a ^\n             (\"^2+\" ^\n                (b ^\n                   (\")(sin(pi*\" ^ (a ^ (\"+\" ^ (b ^ (\"^2))))*\" ^ (c ^ \")\"))))))))) in\n  hlpr e;;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":0,"stop":17784},"type":"eval"},"cursor":8610,"time":1.398210646608413e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | h::t -> let (x, y) = h in\n        if x = k then y\n        else assoc (d, k, t)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' = if List.mem h seen then seen else h::seen in\n          let rest' = t in \n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet rec wwhile (f, b) = let (out, result) = f b in\n    match result with\n      | false -> out\n      | true -> wwhile(f, out)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n\nlet fixpoint (f,b) = \n  let g x = let evaled = f x in (evaled, evaled <> x) in\n    wwhile (g, b)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine        of expr\n    | Cosine      of expr\n    | SinCosSq    of expr * expr\n    | Average     of expr * expr\n    | Times       of expr * expr\n    | Thresh      of expr * expr * expr * expr\t\n    | ContourFun  of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet rec exprToString e = \n  let rec hlpr e = match e with\n    | VarX ->\n        \"x\"\n    | VarY -> \n        \"y\"\n    | Sine expr -> \n        \"sin(pi*\" ^ hlpr expr ^ \")\"\n    | Cosine expr -> \n        \"cos(pi*\" ^ hlpr expr ^ \")\"\n    | SinCosSq (e1, e2) ->\n        \"((sin^2(pi *\" ^ hlpr e1 ^ \")*cos^2(pi* \" ^ hlpr e2 ^ \"))/2)\"\n    | Average (e1,e2) -> \n        \"((\" ^ hlpr e1 ^ \"+\" ^ hlpr e2 ^ \")/2)\"\n    | Times (e1,e2) -> \n        hlpr e1 ^ \"*\" ^ hlpr e2\n    | Thresh (e1,e2,e3,e4) -> \n        \"(\" ^ hlpr e1  ^ \"<\" ^ hlpr e2 ^ \"?\" ^ hlpr e3 ^ \":\" ^ hlpr e4 ^ \")\"\n    | ContourFun (e1, e2, e3) ->\n        let (a, b, c) = (hlpr e1, hlpr e2, hlpr e3) in\n          \"(abs((cos(pi*\" ^ a ^ \"^2+\" ^ b ^ \")(sin(pi*\" ^ a ^ \"+\" ^ b ^ \"^2))))*\" ^\n          c ^ \")\"\n  in \n    hlpr e\n\nlet _ = exprToString sampleExpr1\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildSinCosSq(e1,e2)\t   = SinCosSq(e1, e2)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\nlet buildContourFun(e1, e2, e3)    = ContourFun(e1, e2, e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX            \n    -> x\n  | VarY            \n    -> y\n  | Sine e'         \n    -> sin (pi *. eval (e', x, y))\n  | Cosine e' \n    -> cos(pi *. eval(e', x, y))\n  | SinCosSq (e1,e2)\n    -> let (a, b) = (pi *. eval(e1, x, y), pi *. eval(e2, x, y)) in\n        ((sin(a)*.sin(a)) +. (cos(b)*.cos(b))) /. 2.0\n  | Average (e1,e2) \n    -> (eval(e1, x, y) +. eval(e2, x, y)) /. 2.0\n  | Times (e1,e2) \n    -> eval(e1, x, y) *. eval(e2, x, y)\n  | Thresh  (a, b, a_less, b_less) \n    -> (match eval (a, x, y) < eval (b, x, y) with\n         | true -> eval (a_less, x, y)\n         | false -> eval (b_less, x, y)\n       )\n  | ContourFun (e1, e2, e3)\n    -> let (a, b, c) = (eval (e1,x,y), eval(e2,x,y), eval(e3,x,y)) in\n        abs_float(cos(pi*.(a**2. +. b)) *. sin(pi*.(a +. b **2.))) *. c\n\n\nlet _ = eval(buildX(), 1.0, 1.0)\nlet _ = eval(buildSine(buildX()), 1.0, 1.0)\nlet _ = eval(buildSine(buildAverage(buildX(), buildY())), 0.3, 0.3)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\n\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand,depth) = match depth with\n  | 0 -> (match rand(0, 1) with \n           | 0 -> buildX() \n           | 1 -> buildY()\n           | _ -> failwith \"this should have been unreachable :(\"\n         )\n  | _ -> \n      let num = rand(0,100) in \n      let (a,b,c,d) = (build(rand, depth-1), build(rand, depth-1), \n                       build(rand, depth-1), build(rand, depth-1)) in\n        match num with\n          | num when num < 70 && num < 45 ->\n              (match num mod 2 with\n                | 0 -> buildSinCosSq(a, b)\n                | 1 -> buildContourFun(c, d, a)\n                | _ -> failwith \"this should have been unreachable :(\"\n              )\n          | num when num < 70 ->\n              (match num mod 4 with\n                | 0 -> buildSine(c)\n                | 1 -> buildCosine(d)\n                | 2 -> buildSinCosSq(a, c)\n                | 3 -> buildContourFun(b, a, c)\n                | _ -> failwith \"this should have been unreachable :(\"\n              )\n          | num when num >= 70 ->\n              (match num mod 7 with \n                | 0 -> buildThresh(d, c, b, a)\n                | 1 -> buildAverage(c, b)\n                | 2 -> buildTimes(a, d)\n                | 3 -> buildSine(d)\n                | 4 -> buildCosine(c)\n                | 5 -> buildSinCosSq(b, a)\n                | 6 -> buildContourFun(d, c, c)\n                | _ -> failwith \"this should have been unreachable :(\"\n              )\n          | _ -> failwith \"stuff here\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (2, 5012311, 123514)\nlet g2 () = (2, 21023, 123111)  \nlet g3 () = (2, 102351113, 2311468)  \n\nlet c1 () = (2, 1321, 5141238)\nlet c2 () = (2, 11111, 41231)\nlet c3 () = (2, 5013731, 873489)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\nlet rand = makeRand(27, 130)\nlet expr = build(rand, 6)\nlet _ = eval(expr, 0.70, 0.45)\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec assoc (d,k,l) = match l with\n| [] -> d\n| h::t -> let (x, y) = h in\nif x = k then y\nelse assoc (d, k, t)","min":"\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | h::t -> let (x,y) = h in if x = k then y else assoc (d, k, t);;\n","type":"","out":""},{"in":"let removeDuplicates l = \nlet rec helper (seen,rest) = \nmatch rest with \n[] -> seen\n| h::t -> \nlet seen' = if List.mem h seen then seen else h::seen in\nlet rest' = t in \nhelper (seen',rest') \nin\nList.rev (helper ([],l))","min":"\nlet removeDuplicates l =\n  let rec helper (seen,rest) =\n    match rest with\n    | [] -> seen\n    | h::t ->\n        let seen' = if List.mem h seen then seen else h :: seen in\n        let rest' = t in helper (seen', rest') in\n  List.rev (helper ([], l));;\n","type":"","out":""},{"in":"let rec wwhile (f, b) = let (out, result) = f b in\nmatch result with\n| false -> out\n| true -> wwhile(f, out)","min":"\nlet rec wwhile (f,b) =\n  let (out,result) = f b in\n  match result with | false  -> out | true  -> wwhile (f, out);;\n","type":"","out":""},{"in":"let fixpoint (f,b) = \nlet g x = let evaled = f x in (evaled, evaled <> x) in\nwwhile (g, b)","min":"\nlet rec wwhile (f,b) =\n  let (out,result) = f b in\n  match result with | false  -> out | true  -> wwhile (f, out);;\n\nlet fixpoint (f,b) =\n  let g x = let evaled = f x in (evaled, (evaled <> x)) in wwhile (g, b);;\n","type":"","out":""},{"in":"type expr = \nVarX\n| VarY\n| Sine        of expr\n| Cosine      of expr\n| SinCosSq    of expr * expr\n| Average     of expr * expr\n| Times       of expr * expr\n| Thresh      of expr * expr * expr * expr\t\n| ContourFun  of expr * expr * expr","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n","type":"","out":""},{"in":"let sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n","type":"","out":""},{"in":"let rec exprToString e = \nlet rec hlpr e = match e with\n| VarX ->\n\"x\"\n| VarY -> \n\"y\"\n| Sine expr -> \n\"sin(pi*\" ^ hlpr expr ^ \")\"\n| Cosine expr -> \n\"cos(pi*\" ^ hlpr expr ^ \")\"\n| SinCosSq (e1, e2) ->\n\"((sin^2(pi *\" ^ hlpr e1 ^ \")*cos^2(pi* \" ^ hlpr e2 ^ \"))/2)\"\n| Average (e1,e2) -> \n\"((\" ^ hlpr e1 ^ \"+\" ^ hlpr e2 ^ \")/2)\"\n| Times (e1,e2) -> \nhlpr e1 ^ \"*\" ^ hlpr e2\n| Thresh (e1,e2,e3,e4) -> \n\"(\" ^ hlpr e1  ^ \"<\" ^ hlpr e2 ^ \"?\" ^ hlpr e3 ^ \":\" ^ hlpr e4 ^ \")\"\n| ContourFun (e1, e2, e3) ->\nlet (a, b, c) = (hlpr e1, hlpr e2, hlpr e3) in\n\"(abs((cos(pi*\" ^ a ^ \"^2+\" ^ b ^ \")(sin(pi*\" ^ a ^ \"+\" ^ b ^ \"^2))))*\" ^\nc ^ \")\"\nin \nhlpr e","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet rec exprToString e =\n  let rec hlpr e =\n    match e with\n    | VarX  -> \"x\"\n    | VarY  -> \"y\"\n    | Sine expr -> \"sin(pi*\" ^ ((hlpr expr) ^ \")\")\n    | Cosine expr -> \"cos(pi*\" ^ ((hlpr expr) ^ \")\")\n    | SinCosSq (e1,e2) ->\n        \"((sin^2(pi *\" ^\n          ((hlpr e1) ^ (\")*cos^2(pi* \" ^ ((hlpr e2) ^ \"))/2)\")))\n    | Average (e1,e2) -> \"((\" ^ ((hlpr e1) ^ (\"+\" ^ ((hlpr e2) ^ \")/2)\")))\n    | Times (e1,e2) -> (hlpr e1) ^ (\"*\" ^ (hlpr e2))\n    | Thresh (e1,e2,e3,e4) ->\n        \"(\" ^\n          ((hlpr e1) ^\n             (\"<\" ^\n                ((hlpr e2) ^ (\"?\" ^ ((hlpr e3) ^ (\":\" ^ ((hlpr e4) ^ \")\")))))))\n    | ContourFun (e1,e2,e3) ->\n        let (a,b,c) = ((hlpr e1), (hlpr e2), (hlpr e3)) in\n        \"(abs((cos(pi*\" ^\n          (a ^\n             (\"^2+\" ^\n                (b ^\n                   (\")(sin(pi*\" ^ (a ^ (\"+\" ^ (b ^ (\"^2))))*\" ^ (c ^ \")\"))))))))) in\n  hlpr e;;\n","type":"","out":""},{"in":"let _ = exprToString sampleExpr1","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet rec exprToString e =\n  let rec hlpr e =\n    match e with\n    | VarX  -> \"x\"\n    | VarY  -> \"y\"\n    | Sine expr -> \"sin(pi*\" ^ ((hlpr expr) ^ \")\")\n    | Cosine expr -> \"cos(pi*\" ^ ((hlpr expr) ^ \")\")\n    | SinCosSq (e1,e2) ->\n        \"((sin^2(pi *\" ^\n          ((hlpr e1) ^ (\")*cos^2(pi* \" ^ ((hlpr e2) ^ \"))/2)\")))\n    | Average (e1,e2) -> \"((\" ^ ((hlpr e1) ^ (\"+\" ^ ((hlpr e2) ^ \")/2)\")))\n    | Times (e1,e2) -> (hlpr e1) ^ (\"*\" ^ (hlpr e2))\n    | Thresh (e1,e2,e3,e4) ->\n        \"(\" ^\n          ((hlpr e1) ^\n             (\"<\" ^\n                ((hlpr e2) ^ (\"?\" ^ ((hlpr e3) ^ (\":\" ^ ((hlpr e4) ^ \")\")))))))\n    | ContourFun (e1,e2,e3) ->\n        let (a,b,c) = ((hlpr e1), (hlpr e2), (hlpr e3)) in\n        \"(abs((cos(pi*\" ^\n          (a ^\n             (\"^2+\" ^\n                (b ^\n                   (\")(sin(pi*\" ^ (a ^ (\"+\" ^ (b ^ (\"^2))))*\" ^ (c ^ \")\"))))))))) in\n  hlpr e;;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n\nlet _ = exprToString sampleExpr1;;\n","type":"","out":""},{"in":"let buildX()                       = VarX","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildX () = VarX;;\n","type":"","out":""},{"in":"let buildY()                       = VarY","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildY () = VarY;;\n","type":"","out":""},{"in":"let buildSine(e)                   = Sine(e)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildSine e = Sine e;;\n","type":"","out":""},{"in":"let buildCosine(e)                 = Cosine(e)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildCosine e = Cosine e;;\n","type":"","out":""},{"in":"let buildSinCosSq(e1,e2)\t   = SinCosSq(e1, e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildSinCosSq (e1,e2) = SinCosSq (e1, e2);;\n","type":"","out":""},{"in":"let buildAverage(e1,e2)            = Average(e1,e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n","type":"","out":""},{"in":"let buildTimes(e1,e2)              = Times(e1,e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n","type":"","out":""},{"in":"let buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n","type":"","out":""},{"in":"let buildContour(e1, e2, e3)       = ContourFun(e1, e2, e3)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildContour (e1,e2,e3) = ContourFun (e1, e2, e3);;\n","type":"","out":""},{"in":"let pi = 4.0 *. atan 1.0","min":"\nlet pi = 4.0 *. (atan 1.0);;\n","type":"","out":""},{"in":"let rec eval (e,x,y) = match e with\n| VarX            \n-> x\n| VarY            \n-> y\n| Sine e'         \n-> sin (pi *. eval (e', x, y))\n| Cosine e' \n-> cos(pi *. eval(e', x, y))\n| SinCosSq (e1,e2)\n-> let (a, b) = (pi *. eval(e1, x, y), pi *. eval(e2, x, y)) in\n((sin(a)*.sin(a)) +. (cos(b)*.cos(b))) /. 2.0\n| Average (e1,e2) \n-> (eval(e1, x, y) +. eval(e2, x, y)) /. 2.0\n| Times (e1,e2) \n-> eval(e1, x, y) *. eval(e2, x, y)\n| Thresh  (a, b, a_less, b_less) \n-> (match eval (a, x, y) < eval (b, x, y) with\n| true -> eval (a_less, x, y)\n| false -> eval (b_less, x, y)\n)\n| ContourFun (e1, e2, e3)\n-> let (a, b, c) = (eval (e1,x,y), eval(e2,x,y), eval(e3,x,y)) in\nabs_float(cos(pi*.(a**2. +. b)) *. sin(pi*.(a +. b **2.))) *. c","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n","type":"","out":""},{"in":"let _ = eval(buildX(), 1.0, 1.0)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildX () = VarX;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet _ = eval ((buildX ()), 1.0, 1.0);;\n","type":"","out":""},{"in":"let _ = eval(buildSine(buildX()), 1.0, 1.0)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildSine e = Sine e;;\n\nlet buildX () = VarX;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet _ = eval ((buildSine (buildX ())), 1.0, 1.0);;\n","type":"","out":""},{"in":"let _ = eval(buildSine(buildAverage(buildX(), buildY())), 0.3, 0.3)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildSine e = Sine e;;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet _ =\n  eval ((buildSine (buildAverage ((buildX ()), (buildY ())))), 0.3, 0.3);;\n","type":"","out":""},{"in":"let eval_fn e (x,y) = \nlet rv = eval (e,x,y) in\nassert (-1.0 <= rv && rv <= 1.0);\nrv","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n","type":"","out":""},{"in":"let sampleExpr =\nbuildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\nbuildX()),buildTimes(buildCosine (buildCosine (buildAverage\n(buildTimes (buildY(),buildY()),buildCosine (buildX())))),\nbuildCosine (buildTimes (buildSine (buildCosine\n(buildY())),buildAverage (buildSine (buildX()), buildTimes\n(buildX(),buildX()))))))),buildY())))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet sampleExpr =\n  buildCosine\n    (buildSine\n       (buildTimes\n          ((buildCosine\n              (buildAverage\n                 ((buildCosine (buildX ())),\n                   (buildTimes\n                      ((buildCosine\n                          (buildCosine\n                             (buildAverage\n                                ((buildTimes ((buildY ()), (buildY ()))),\n                                  (buildCosine (buildX ())))))),\n                        (buildCosine\n                           (buildTimes\n                              ((buildSine (buildCosine (buildY ()))),\n                                (buildAverage\n                                   ((buildSine (buildX ())),\n                                     (buildTimes ((buildX ()), (buildX ()))))))))))))),\n            (buildY ()))));;\n","type":"","out":""},{"in":"let sampleExpr2 =\nbuildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet sampleExpr2 =\n  buildThresh\n    ((buildX ()), (buildY ()), (buildSine (buildX ())),\n      (buildCosine (buildY ())));;\n","type":"","out":""},{"in":"let rec build (rand,depth) = match depth with\n| 0 -> (match rand(0, 1) with \n| 0 -> buildX() \n| 1 -> buildY()\n| _ -> failwith \"this should have been unreachable :<\"\n)\n| _ -> \nlet num = rand(0,150) in \nlet (a,b,c,d) = (build(rand, depth-1), build(rand, depth-1), \nbuild(rand, depth-1), build(rand, depth-1)) in\nmatch num with\n| num when depth <= 3->\n(match num with\n| num when num < 63 ->\n(match num mod 5 with\n| 0 -> buildX()\n| 1 -> buildY()\n| 2 -> buildSinCosSq(build(rand, depth-1), \nbuild(rand, depth-1))\n| 3 -> buildSine(build(rand, depth-1))\n| 4 -> buildThresh(build(rand, depth-1), \nbuild(rand, depth-1),\nbuild(rand, depth-1), \nbuild(rand, depth-1))\n| _ -> failwith \"should be unreachable :<\"\n)\n| num ->\n(match num mod 5 with\n| 0 -> buildY()\n| 1 -> buildX()\n| 2 -> buildCosine(build(rand, depth-1))\n| 3 -> buildAverage(build(rand, depth-1), \nbuild(rand, depth-1))\n| 4 -> buildContour(build(rand, depth-1), \nbuild(rand, depth-1),\nbuild(rand, depth-1))\n| _ -> failwith \"should be unreachable :<\"\n)\n)\n| num when num < 90 && num > 35 ->\n(match num mod 2 with\n| 0 -> buildSinCosSq(a, b)\n| 1 -> buildContour(c, d, a)\n| _ -> failwith \"this should have been unreachable :<\"\n)\n| num when num < 35 ->\n(match num mod 6 with\n| 0 -> buildSine(c)\n| 1 -> buildCosine(d)\n| 2 -> buildSinCosSq(a, c)\n| 3 -> buildContour(b, a, c)\n| 4 -> buildX()\n| 5 -> buildY()\n| _ -> failwith \"should be unreachable :<\"\n)\n| num ->\n(match num mod 7 with \n| 0 -> buildThresh(d, c, b, a)\n| 1 -> buildAverage(c, b)\n| 2 -> buildTimes(a, d)\n| 3 -> buildSine(d)\n| 4 -> buildCosine(c)\n| 5 -> buildSinCosSq(b, a)\n| 6 -> buildContour(d, c, c)\n| _ -> failwith \"should be unreachable :<\"\n)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildContour (e1,e2,e3) = ContourFun (e1, e2, e3);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSinCosSq (e1,e2) = SinCosSq (e1, e2);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  match depth with\n  | 0 ->\n      (match rand (0, 1) with\n       | 0 -> buildX ()\n       | 1 -> buildY ()\n       | _ -> failwith \"this should have been unreachable :<\")\n  | _ ->\n      let num = rand (0, 150) in\n      let (a,b,c,d) =\n        ((build (rand, (depth - 1))), (build (rand, (depth - 1))),\n          (build (rand, (depth - 1))), (build (rand, (depth - 1)))) in\n      (match num with\n       | num when depth <= 3 ->\n           (match num with\n            | num when num < 63 ->\n                (match num mod 5 with\n                 | 0 -> buildX ()\n                 | 1 -> buildY ()\n                 | 2 ->\n                     buildSinCosSq\n                       ((build (rand, (depth - 1))),\n                         (build (rand, (depth - 1))))\n                 | 3 -> buildSine (build (rand, (depth - 1)))\n                 | 4 ->\n                     buildThresh\n                       ((build (rand, (depth - 1))),\n                         (build (rand, (depth - 1))),\n                         (build (rand, (depth - 1))),\n                         (build (rand, (depth - 1))))\n                 | _ -> failwith \"should be unreachable :<\")\n            | num ->\n                (match num mod 5 with\n                 | 0 -> buildY ()\n                 | 1 -> buildX ()\n                 | 2 -> buildCosine (build (rand, (depth - 1)))\n                 | 3 ->\n                     buildAverage\n                       ((build (rand, (depth - 1))),\n                         (build (rand, (depth - 1))))\n                 | 4 ->\n                     buildContour\n                       ((build (rand, (depth - 1))),\n                         (build (rand, (depth - 1))),\n                         (build (rand, (depth - 1))))\n                 | _ -> failwith \"should be unreachable :<\"))\n       | num when (num < 90) && (num > 35) ->\n           (match num mod 2 with\n            | 0 -> buildSinCosSq (a, b)\n            | 1 -> buildContour (c, d, a)\n            | _ -> failwith \"this should have been unreachable :<\")\n       | num when num < 35 ->\n           (match num mod 6 with\n            | 0 -> buildSine c\n            | 1 -> buildCosine d\n            | 2 -> buildSinCosSq (a, c)\n            | 3 -> buildContour (b, a, c)\n            | 4 -> buildX ()\n            | 5 -> buildY ()\n            | _ -> failwith \"should be unreachable :<\")\n       | num ->\n           (match num mod 7 with\n            | 0 -> buildThresh (d, c, b, a)\n            | 1 -> buildAverage (c, b)\n            | 2 -> buildTimes (a, d)\n            | 3 -> buildSine d\n            | 4 -> buildCosine c\n            | 5 -> buildSinCosSq (b, a)\n            | 6 -> buildContour (d, c, c)\n            | _ -> failwith \"should be unreachable :<\"));;\n","type":"","out":""},{"in":"let g1 () = (9, 5012311, 78414)","min":"\nlet g1 () = (9, 5012311, 78414);;\n","type":"","out":""},{"in":"let g2 () = (10, 21023, 123111)","min":"\nlet g2 () = (10, 21023, 123111);;\n","type":"","out":""},{"in":"let g3 () = (12, 102351113, 2311468)","min":"\nlet g3 () = (12, 102351113, 2311468);;\n","type":"","out":""},{"in":"let c1 () = (7, 1321, 5141238)","min":"\nlet c1 () = (7, 1321, 5141238);;\n","type":"","out":""},{"in":"let c2 () = (12, 11111, 41231)","min":"\nlet c2 () = (12, 11111, 41231);;\n","type":"","out":""},{"in":"let c3 () = (10, 5013731, 873489)","min":"\nlet c3 () = (10, 5013731, 873489);;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rand = makeRand(27, 130)","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet rand = makeRand (27, 130);;\n","type":"","out":""},{"in":"let expr = build(rand, 6)","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildContour (e1,e2,e3) = ContourFun (e1, e2, e3);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSinCosSq (e1,e2) = SinCosSq (e1, e2);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  match depth with\n  | 0 ->\n      (match rand (0, 1) with\n       | 0 -> buildX ()\n       | 1 -> buildY ()\n       | _ -> failwith \"this should have been unreachable :<\")\n  | _ ->\n      let num = rand (0, 150) in\n      let (a,b,c,d) =\n        ((build (rand, (depth - 1))), (build (rand, (depth - 1))),\n          (build (rand, (depth - 1))), (build (rand, (depth - 1)))) in\n      (match num with\n       | num when depth <= 3 ->\n           (match num with\n            | num when num < 63 ->\n                (match num mod 5 with\n                 | 0 -> buildX ()\n                 | 1 -> buildY ()\n                 | 2 ->\n                     buildSinCosSq\n                       ((build (rand, (depth - 1))),\n                         (build (rand, (depth - 1))))\n                 | 3 -> buildSine (build (rand, (depth - 1)))\n                 | 4 ->\n                     buildThresh\n                       ((build (rand, (depth - 1))),\n                         (build (rand, (depth - 1))),\n                         (build (rand, (depth - 1))),\n                         (build (rand, (depth - 1))))\n                 | _ -> failwith \"should be unreachable :<\")\n            | num ->\n                (match num mod 5 with\n                 | 0 -> buildY ()\n                 | 1 -> buildX ()\n                 | 2 -> buildCosine (build (rand, (depth - 1)))\n                 | 3 ->\n                     buildAverage\n                       ((build (rand, (depth - 1))),\n                         (build (rand, (depth - 1))))\n                 | 4 ->\n                     buildContour\n                       ((build (rand, (depth - 1))),\n                         (build (rand, (depth - 1))),\n                         (build (rand, (depth - 1))))\n                 | _ -> failwith \"should be unreachable :<\"))\n       | num when (num < 90) && (num > 35) ->\n           (match num mod 2 with\n            | 0 -> buildSinCosSq (a, b)\n            | 1 -> buildContour (c, d, a)\n            | _ -> failwith \"this should have been unreachable :<\")\n       | num when num < 35 ->\n           (match num mod 6 with\n            | 0 -> buildSine c\n            | 1 -> buildCosine d\n            | 2 -> buildSinCosSq (a, c)\n            | 3 -> buildContour (b, a, c)\n            | 4 -> buildX ()\n            | 5 -> buildY ()\n            | _ -> failwith \"should be unreachable :<\")\n       | num ->\n           (match num mod 7 with\n            | 0 -> buildThresh (d, c, b, a)\n            | 1 -> buildAverage (c, b)\n            | 2 -> buildTimes (a, d)\n            | 3 -> buildSine d\n            | 4 -> buildCosine c\n            | 5 -> buildSinCosSq (b, a)\n            | 6 -> buildContour (d, c, c)\n            | _ -> failwith \"should be unreachable :<\"));;\n\nlet rand = makeRand (27, 130);;\n\nlet expr = build (rand, 6);;\n","type":"","out":""},{"in":"let _ = eval(expr, 0.70, 0.45)","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildContour (e1,e2,e3) = ContourFun (e1, e2, e3);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSinCosSq (e1,e2) = SinCosSq (e1, e2);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  match depth with\n  | 0 ->\n      (match rand (0, 1) with\n       | 0 -> buildX ()\n       | 1 -> buildY ()\n       | _ -> failwith \"this should have been unreachable :<\")\n  | _ ->\n      let num = rand (0, 150) in\n      let (a,b,c,d) =\n        ((build (rand, (depth - 1))), (build (rand, (depth - 1))),\n          (build (rand, (depth - 1))), (build (rand, (depth - 1)))) in\n      (match num with\n       | num when depth <= 3 ->\n           (match num with\n            | num when num < 63 ->\n                (match num mod 5 with\n                 | 0 -> buildX ()\n                 | 1 -> buildY ()\n                 | 2 ->\n                     buildSinCosSq\n                       ((build (rand, (depth - 1))),\n                         (build (rand, (depth - 1))))\n                 | 3 -> buildSine (build (rand, (depth - 1)))\n                 | 4 ->\n                     buildThresh\n                       ((build (rand, (depth - 1))),\n                         (build (rand, (depth - 1))),\n                         (build (rand, (depth - 1))),\n                         (build (rand, (depth - 1))))\n                 | _ -> failwith \"should be unreachable :<\")\n            | num ->\n                (match num mod 5 with\n                 | 0 -> buildY ()\n                 | 1 -> buildX ()\n                 | 2 -> buildCosine (build (rand, (depth - 1)))\n                 | 3 ->\n                     buildAverage\n                       ((build (rand, (depth - 1))),\n                         (build (rand, (depth - 1))))\n                 | 4 ->\n                     buildContour\n                       ((build (rand, (depth - 1))),\n                         (build (rand, (depth - 1))),\n                         (build (rand, (depth - 1))))\n                 | _ -> failwith \"should be unreachable :<\"))\n       | num when (num < 90) && (num > 35) ->\n           (match num mod 2 with\n            | 0 -> buildSinCosSq (a, b)\n            | 1 -> buildContour (c, d, a)\n            | _ -> failwith \"this should have been unreachable :<\")\n       | num when num < 35 ->\n           (match num mod 6 with\n            | 0 -> buildSine c\n            | 1 -> buildCosine d\n            | 2 -> buildSinCosSq (a, c)\n            | 3 -> buildContour (b, a, c)\n            | 4 -> buildX ()\n            | 5 -> buildY ()\n            | _ -> failwith \"should be unreachable :<\")\n       | num ->\n           (match num mod 7 with\n            | 0 -> buildThresh (d, c, b, a)\n            | 1 -> buildAverage (c, b)\n            | 2 -> buildTimes (a, d)\n            | 3 -> buildSine d\n            | 4 -> buildCosine c\n            | 5 -> buildSinCosSq (b, a)\n            | 6 -> buildContour (d, c, c)\n            | _ -> failwith \"should be unreachable :<\"));;\n\nlet rand = makeRand (27, 130);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet expr = build (rand, 6);;\n\nlet _ = eval (expr, 0.70, 0.45);;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildContour (e1,e2,e3) = ContourFun (e1, e2, e3);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSinCosSq (e1,e2) = SinCosSq (e1, e2);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  match depth with\n  | 0 ->\n      (match rand (0, 1) with\n       | 0 -> buildX ()\n       | 1 -> buildY ()\n       | _ -> failwith \"this should have been unreachable :<\")\n  | _ ->\n      let num = rand (0, 150) in\n      let (a,b,c,d) =\n        ((build (rand, (depth - 1))), (build (rand, (depth - 1))),\n          (build (rand, (depth - 1))), (build (rand, (depth - 1)))) in\n      (match num with\n       | num when depth <= 3 ->\n           (match num with\n            | num when num < 63 ->\n                (match num mod 5 with\n                 | 0 -> buildX ()\n                 | 1 -> buildY ()\n                 | 2 ->\n                     buildSinCosSq\n                       ((build (rand, (depth - 1))),\n                         (build (rand, (depth - 1))))\n                 | 3 -> buildSine (build (rand, (depth - 1)))\n                 | 4 ->\n                     buildThresh\n                       ((build (rand, (depth - 1))),\n                         (build (rand, (depth - 1))),\n                         (build (rand, (depth - 1))),\n                         (build (rand, (depth - 1))))\n                 | _ -> failwith \"should be unreachable :<\")\n            | num ->\n                (match num mod 5 with\n                 | 0 -> buildY ()\n                 | 1 -> buildX ()\n                 | 2 -> buildCosine (build (rand, (depth - 1)))\n                 | 3 ->\n                     buildAverage\n                       ((build (rand, (depth - 1))),\n                         (build (rand, (depth - 1))))\n                 | 4 ->\n                     buildContour\n                       ((build (rand, (depth - 1))),\n                         (build (rand, (depth - 1))),\n                         (build (rand, (depth - 1))))\n                 | _ -> failwith \"should be unreachable :<\"))\n       | num when (num < 90) && (num > 35) ->\n           (match num mod 2 with\n            | 0 -> buildSinCosSq (a, b)\n            | 1 -> buildContour (c, d, a)\n            | _ -> failwith \"this should have been unreachable :<\")\n       | num when num < 35 ->\n           (match num mod 6 with\n            | 0 -> buildSine c\n            | 1 -> buildCosine d\n            | 2 -> buildSinCosSq (a, c)\n            | 3 -> buildContour (b, a, c)\n            | 4 -> buildX ()\n            | 5 -> buildY ()\n            | _ -> failwith \"should be unreachable :<\")\n       | num ->\n           (match num mod 7 with\n            | 0 -> buildThresh (d, c, b, a)\n            | 1 -> buildAverage (c, b)\n            | 2 -> buildTimes (a, d)\n            | 3 -> buildSine d\n            | 4 -> buildCosine c\n            | 5 -> buildSinCosSq (b, a)\n            | 6 -> buildContour (d, c, c)\n            | _ -> failwith \"should be unreachable :<\"));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  let rec hlpr e =\n    match e with\n    | VarX  -> \"x\"\n    | VarY  -> \"y\"\n    | Sine expr -> \"sin(pi*\" ^ ((hlpr expr) ^ \")\")\n    | Cosine expr -> \"cos(pi*\" ^ ((hlpr expr) ^ \")\")\n    | SinCosSq (e1,e2) ->\n        \"((sin^2(pi *\" ^\n          ((hlpr e1) ^ (\")*cos^2(pi* \" ^ ((hlpr e2) ^ \"))/2)\")))\n    | Average (e1,e2) -> \"((\" ^ ((hlpr e1) ^ (\"+\" ^ ((hlpr e2) ^ \")/2)\")))\n    | Times (e1,e2) -> (hlpr e1) ^ (\"*\" ^ (hlpr e2))\n    | Thresh (e1,e2,e3,e4) ->\n        \"(\" ^\n          ((hlpr e1) ^\n             (\"<\" ^\n                ((hlpr e2) ^ (\"?\" ^ ((hlpr e3) ^ (\":\" ^ ((hlpr e4) ^ \")\")))))))\n    | ContourFun (e1,e2,e3) ->\n        let (a,b,c) = ((hlpr e1), (hlpr e2), (hlpr e3)) in\n        \"(abs((cos(pi*\" ^\n          (a ^\n             (\"^2+\" ^\n                (b ^\n                   (\")(sin(pi*\" ^ (a ^ (\"+\" ^ (b ^ (\"^2))))*\" ^ (c ^ \")\"))))))))) in\n  hlpr e;;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildContour (e1,e2,e3) = ContourFun (e1, e2, e3);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSinCosSq (e1,e2) = SinCosSq (e1, e2);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  match depth with\n  | 0 ->\n      (match rand (0, 1) with\n       | 0 -> buildX ()\n       | 1 -> buildY ()\n       | _ -> failwith \"this should have been unreachable :<\")\n  | _ ->\n      let num = rand (0, 150) in\n      let (a,b,c,d) =\n        ((build (rand, (depth - 1))), (build (rand, (depth - 1))),\n          (build (rand, (depth - 1))), (build (rand, (depth - 1)))) in\n      (match num with\n       | num when depth <= 3 ->\n           (match num with\n            | num when num < 63 ->\n                (match num mod 5 with\n                 | 0 -> buildX ()\n                 | 1 -> buildY ()\n                 | 2 ->\n                     buildSinCosSq\n                       ((build (rand, (depth - 1))),\n                         (build (rand, (depth - 1))))\n                 | 3 -> buildSine (build (rand, (depth - 1)))\n                 | 4 ->\n                     buildThresh\n                       ((build (rand, (depth - 1))),\n                         (build (rand, (depth - 1))),\n                         (build (rand, (depth - 1))),\n                         (build (rand, (depth - 1))))\n                 | _ -> failwith \"should be unreachable :<\")\n            | num ->\n                (match num mod 5 with\n                 | 0 -> buildY ()\n                 | 1 -> buildX ()\n                 | 2 -> buildCosine (build (rand, (depth - 1)))\n                 | 3 ->\n                     buildAverage\n                       ((build (rand, (depth - 1))),\n                         (build (rand, (depth - 1))))\n                 | 4 ->\n                     buildContour\n                       ((build (rand, (depth - 1))),\n                         (build (rand, (depth - 1))),\n                         (build (rand, (depth - 1))))\n                 | _ -> failwith \"should be unreachable :<\"))\n       | num when (num < 90) && (num > 35) ->\n           (match num mod 2 with\n            | 0 -> buildSinCosSq (a, b)\n            | 1 -> buildContour (c, d, a)\n            | _ -> failwith \"this should have been unreachable :<\")\n       | num when num < 35 ->\n           (match num mod 6 with\n            | 0 -> buildSine c\n            | 1 -> buildCosine d\n            | 2 -> buildSinCosSq (a, c)\n            | 3 -> buildContour (b, a, c)\n            | 4 -> buildX ()\n            | 5 -> buildY ()\n            | _ -> failwith \"should be unreachable :<\")\n       | num ->\n           (match num mod 7 with\n            | 0 -> buildThresh (d, c, b, a)\n            | 1 -> buildAverage (c, b)\n            | 2 -> buildTimes (a, d)\n            | 3 -> buildSine d\n            | 4 -> buildCosine c\n            | 5 -> buildSinCosSq (b, a)\n            | 6 -> buildContour (d, c, c)\n            | _ -> failwith \"should be unreachable :<\"));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  let rec hlpr e =\n    match e with\n    | VarX  -> \"x\"\n    | VarY  -> \"y\"\n    | Sine expr -> \"sin(pi*\" ^ ((hlpr expr) ^ \")\")\n    | Cosine expr -> \"cos(pi*\" ^ ((hlpr expr) ^ \")\")\n    | SinCosSq (e1,e2) ->\n        \"((sin^2(pi *\" ^\n          ((hlpr e1) ^ (\")*cos^2(pi* \" ^ ((hlpr e2) ^ \"))/2)\")))\n    | Average (e1,e2) -> \"((\" ^ ((hlpr e1) ^ (\"+\" ^ ((hlpr e2) ^ \")/2)\")))\n    | Times (e1,e2) -> (hlpr e1) ^ (\"*\" ^ (hlpr e2))\n    | Thresh (e1,e2,e3,e4) ->\n        \"(\" ^\n          ((hlpr e1) ^\n             (\"<\" ^\n                ((hlpr e2) ^ (\"?\" ^ ((hlpr e3) ^ (\":\" ^ ((hlpr e4) ^ \")\")))))))\n    | ContourFun (e1,e2,e3) ->\n        let (a,b,c) = ((hlpr e1), (hlpr e2), (hlpr e3)) in\n        \"(abs((cos(pi*\" ^\n          (a ^\n             (\"^2+\" ^\n                (b ^\n                   (\")(sin(pi*\" ^ (a ^ (\"+\" ^ (b ^ (\"^2))))*\" ^ (c ^ \")\"))))))))) in\n  hlpr e;;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":0,"stop":18421},"type":"eval"},"cursor":0,"time":1.398216424319587e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | h::t -> let (x, y) = h in\n        if x = k then y\n        else assoc (d, k, t)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' = if List.mem h seen then seen else h::seen in\n          let rest' = t in \n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet rec wwhile (f, b) = let (out, result) = f b in\n    match result with\n      | false -> out\n      | true -> wwhile(f, out)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n\nlet fixpoint (f,b) = \n  let g x = let evaled = f x in (evaled, evaled <> x) in\n    wwhile (g, b)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine        of expr\n    | Cosine      of expr\n    | SinCosSq    of expr * expr\n    | Average     of expr * expr\n    | Times       of expr * expr\n    | Thresh      of expr * expr * expr * expr\t\n    | ContourFun  of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet rec exprToString e = \n  let rec hlpr e = match e with\n    | VarX ->\n        \"x\"\n    | VarY -> \n        \"y\"\n    | Sine expr -> \n        \"sin(pi*\" ^ hlpr expr ^ \")\"\n    | Cosine expr -> \n        \"cos(pi*\" ^ hlpr expr ^ \")\"\n    | SinCosSq (e1, e2) ->\n        \"((sin^2(pi *\" ^ hlpr e1 ^ \")*cos^2(pi* \" ^ hlpr e2 ^ \"))/2)\"\n    | Average (e1,e2) -> \n        \"((\" ^ hlpr e1 ^ \"+\" ^ hlpr e2 ^ \")/2)\"\n    | Times (e1,e2) -> \n        hlpr e1 ^ \"*\" ^ hlpr e2\n    | Thresh (e1,e2,e3,e4) -> \n        \"(\" ^ hlpr e1  ^ \"<\" ^ hlpr e2 ^ \"?\" ^ hlpr e3 ^ \":\" ^ hlpr e4 ^ \")\"\n    | ContourFun (e1, e2, e3) ->\n        let (a, b, c) = (hlpr e1, hlpr e2, hlpr e3) in\n          \"(abs((cos(pi*\" ^ a ^ \"^2+\" ^ b ^ \")(sin(pi*\" ^ a ^ \"+\" ^ b ^ \"^2))))*\" ^\n          c ^ \")\"\n  in \n    hlpr e\n\nlet _ = exprToString sampleExpr1\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildSinCosSq(e1,e2)\t   = SinCosSq(e1, e2)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\nlet buildContour(e1, e2, e3)       = ContourFun(e1, e2, e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX            \n    -> x\n  | VarY            \n    -> y\n  | Sine e'         \n    -> sin (pi *. eval (e', x, y))\n  | Cosine e' \n    -> cos(pi *. eval(e', x, y))\n  | SinCosSq (e1,e2)\n    -> let (a, b) = (pi *. eval(e1, x, y), pi *. eval(e2, x, y)) in\n        ((sin(a)*.sin(a)) +. (cos(b)*.cos(b))) /. 2.0\n  | Average (e1,e2) \n    -> (eval(e1, x, y) +. eval(e2, x, y)) /. 2.0\n  | Times (e1,e2) \n    -> eval(e1, x, y) *. eval(e2, x, y)\n  | Thresh  (a, b, a_less, b_less) \n    -> (match eval (a, x, y) < eval (b, x, y) with\n         | true -> eval (a_less, x, y)\n         | false -> eval (b_less, x, y)\n       )\n  | ContourFun (e1, e2, e3)\n    -> let (a, b, c) = (eval (e1,x,y), eval(e2,x,y), eval(e3,x,y)) in\n        abs_float(cos(pi*.(a**2. +. b)) *. sin(pi*.(a +. b **2.))) *. c\n\n\nlet _ = eval(buildX(), 1.0, 1.0)\nlet _ = eval(buildSine(buildX()), 1.0, 1.0)\nlet _ = eval(buildSine(buildAverage(buildX(), buildY())), 0.3, 0.3)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\n\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand,depth) = match depth with\n  | 0 -> (match rand(0, 1) with \n           | 0 -> buildX() \n           | 1 -> buildY()\n           | _ -> failwith \"this should have been unreachable :<\"\n         )\n  | _ -> \n      let num = rand(0,150) in \n      let (a,b,c,d) = (build(rand, depth-1), build(rand, depth-1), \n                       build(rand, depth-1), build(rand, depth-1)) in\n        match num with\n          | num when depth <= 3->\n              (match num with\n                | num when num < 63 ->\n                    (match num mod 5 with\n                      | 0 -> buildX()\n                      | 1 -> buildY()\n                      | 2 -> buildSinCosSq(build(rand, depth-1), \n                                           build(rand, depth-1))\n                      | 3 -> buildSine(build(rand, depth-1))\n                      | 4 -> buildThresh(build(rand, depth-1), \n                                         build(rand, depth-1),\n                                         build(rand, depth-1), \n                                         build(rand, depth-1))\n                      | _ -> failwith \"should be unreachable :<\"\n                    )\n                | num ->\n                    (match num mod 5 with\n                      | 0 -> buildY()\n                      | 1 -> buildX()\n                      | 2 -> buildCosine(build(rand, depth-1))\n                      | 3 -> buildAverage(build(rand, depth-1), \n                                          build(rand, depth-1))\n                      | 4 -> buildContour(build(rand, depth-1), \n                                          build(rand, depth-1),\n                                          build(rand, depth-1))\n                      | _ -> failwith \"should be unreachable :<\"\n                    )\n              )\n          | num when num < 90 && num > 35 ->\n              (match num mod 2 with\n                | 0 -> buildSinCosSq(a, b)\n                | 1 -> buildContour(c, d, a)\n                | _ -> failwith \"this should have been unreachable :<\"\n              )\n          | num when num < 35 ->\n              (match num mod 6 with\n                | 0 -> buildSine(c)\n                | 1 -> buildCosine(d)\n                | 2 -> buildSinCosSq(a, c)\n                | 3 -> buildContour(b, a, c)\n                | 4 -> buildX()\n                | 5 -> buildY()\n                | _ -> failwith \"should be unreachable :<\"\n              )\n          | num ->\n              (match num mod 7 with \n                | 0 -> buildThresh(d, c, b, a)\n                | 1 -> buildAverage(c, b)\n                | 2 -> buildTimes(a, d)\n                | 3 -> buildSine(d)\n                | 4 -> buildCosine(c)\n                | 5 -> buildSinCosSq(b, a)\n                | 6 -> buildContour(d, c, c)\n                | _ -> failwith \"should be unreachable :<\"\n              )\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (9, 5012311, 78414)\nlet g2 () = (10, 21023, 123111)  \nlet g3 () = (12, 102351113, 2311468)  \n\nlet c1 () = (7, 1321, 5141238)\nlet c2 () = (12, 11111, 41231)\nlet c3 () = (10, 5013731, 873489)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\nlet rand = makeRand(27, 130)\nlet expr = build(rand, 6)\nlet _ = eval(expr, 0.70, 0.45)\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec assoc (d,k,l) = match l with\n| [] -> d\n| h::t -> let (x, y) = h in\nif x = k then y\nelse assoc (d, k, t)","min":"\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | h::t -> let (x,y) = h in if x = k then y else assoc (d, k, t);;\n","type":"","out":""},{"in":"let removeDuplicates l = \nlet rec helper (seen,rest) = \nmatch rest with \n[] -> seen\n| h::t -> \nlet seen' = if List.mem h seen then seen else h::seen in\nlet rest' = t in \nhelper (seen',rest') \nin\nList.rev (helper ([],l))","min":"\nlet removeDuplicates l =\n  let rec helper (seen,rest) =\n    match rest with\n    | [] -> seen\n    | h::t ->\n        let seen' = if List.mem h seen then seen else h :: seen in\n        let rest' = t in helper (seen', rest') in\n  List.rev (helper ([], l));;\n","type":"","out":""},{"in":"let rec wwhile (f, b) = let (out, result) = f b in\nmatch result with\n| false -> out\n| true -> wwhile(f, out)","min":"\nlet rec wwhile (f,b) =\n  let (out,result) = f b in\n  match result with | false  -> out | true  -> wwhile (f, out);;\n","type":"","out":""},{"in":"let fixpoint (f,b) = \nlet g x = let evaled = f x in (evaled, evaled <> x) in\nwwhile (g, b)","min":"\nlet rec wwhile (f,b) =\n  let (out,result) = f b in\n  match result with | false  -> out | true  -> wwhile (f, out);;\n\nlet fixpoint (f,b) =\n  let g x = let evaled = f x in (evaled, (evaled <> x)) in wwhile (g, b);;\n","type":"","out":""},{"in":"type expr = \nVarX\n| VarY\n| Sine        of expr\n| Cosine      of expr\n| SinCosSq    of expr * expr\n| Average     of expr * expr\n| Times       of expr * expr\n| Thresh      of expr * expr * expr * expr\t\n| ContourFun  of expr * expr * expr","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n","type":"","out":""},{"in":"let sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n","type":"","out":""},{"in":"let rec exprToString e = \nlet rec hlpr e = match e with\n| VarX ->\n\"x\"\n| VarY -> \n\"y\"\n| Sine expr -> \n\"sin(pi*\" ^ hlpr expr ^ \")\"\n| Cosine expr -> \n\"cos(pi*\" ^ hlpr expr ^ \")\"\n| SinCosSq (e1, e2) ->\n\"((sin^2(pi*\" ^ hlpr e1 ^ \")*cos^2(pi*\" ^ hlpr e2 ^ \"))/2)\"\n| Average (e1,e2) -> \n\"((\" ^ hlpr e1 ^ \"+\" ^ hlpr e2 ^ \")/2)\"\n| Times (e1,e2) -> \nhlpr e1 ^ \"*\" ^ hlpr e2\n| Thresh (e1,e2,e3,e4) -> \n\"(\" ^ hlpr e1  ^ \"<\" ^ hlpr e2 ^ \"?\" ^ hlpr e3 ^ \":\" ^ hlpr e4 ^ \")\"\n| ContourFun (e1, e2, e3) ->\nlet (a, b, c) = (hlpr e1, hlpr e2, hlpr e3) in\n\"(abs((cos(pi*\" ^ a ^ \"^2+\" ^ b ^ \")(sin(pi*\" ^ a ^ \"+\" ^ b ^ \"^2))))*\" ^\nc ^ \")\"\nin \nhlpr e","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet rec exprToString e =\n  let rec hlpr e =\n    match e with\n    | VarX  -> \"x\"\n    | VarY  -> \"y\"\n    | Sine expr -> \"sin(pi*\" ^ ((hlpr expr) ^ \")\")\n    | Cosine expr -> \"cos(pi*\" ^ ((hlpr expr) ^ \")\")\n    | SinCosSq (e1,e2) ->\n        \"((sin^2(pi*\" ^ ((hlpr e1) ^ (\")*cos^2(pi*\" ^ ((hlpr e2) ^ \"))/2)\")))\n    | Average (e1,e2) -> \"((\" ^ ((hlpr e1) ^ (\"+\" ^ ((hlpr e2) ^ \")/2)\")))\n    | Times (e1,e2) -> (hlpr e1) ^ (\"*\" ^ (hlpr e2))\n    | Thresh (e1,e2,e3,e4) ->\n        \"(\" ^\n          ((hlpr e1) ^\n             (\"<\" ^\n                ((hlpr e2) ^ (\"?\" ^ ((hlpr e3) ^ (\":\" ^ ((hlpr e4) ^ \")\")))))))\n    | ContourFun (e1,e2,e3) ->\n        let (a,b,c) = ((hlpr e1), (hlpr e2), (hlpr e3)) in\n        \"(abs((cos(pi*\" ^\n          (a ^\n             (\"^2+\" ^\n                (b ^\n                   (\")(sin(pi*\" ^ (a ^ (\"+\" ^ (b ^ (\"^2))))*\" ^ (c ^ \")\"))))))))) in\n  hlpr e;;\n","type":"","out":""},{"in":"let _ = exprToString sampleExpr1","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet rec exprToString e =\n  let rec hlpr e =\n    match e with\n    | VarX  -> \"x\"\n    | VarY  -> \"y\"\n    | Sine expr -> \"sin(pi*\" ^ ((hlpr expr) ^ \")\")\n    | Cosine expr -> \"cos(pi*\" ^ ((hlpr expr) ^ \")\")\n    | SinCosSq (e1,e2) ->\n        \"((sin^2(pi*\" ^ ((hlpr e1) ^ (\")*cos^2(pi*\" ^ ((hlpr e2) ^ \"))/2)\")))\n    | Average (e1,e2) -> \"((\" ^ ((hlpr e1) ^ (\"+\" ^ ((hlpr e2) ^ \")/2)\")))\n    | Times (e1,e2) -> (hlpr e1) ^ (\"*\" ^ (hlpr e2))\n    | Thresh (e1,e2,e3,e4) ->\n        \"(\" ^\n          ((hlpr e1) ^\n             (\"<\" ^\n                ((hlpr e2) ^ (\"?\" ^ ((hlpr e3) ^ (\":\" ^ ((hlpr e4) ^ \")\")))))))\n    | ContourFun (e1,e2,e3) ->\n        let (a,b,c) = ((hlpr e1), (hlpr e2), (hlpr e3)) in\n        \"(abs((cos(pi*\" ^\n          (a ^\n             (\"^2+\" ^\n                (b ^\n                   (\")(sin(pi*\" ^ (a ^ (\"+\" ^ (b ^ (\"^2))))*\" ^ (c ^ \")\"))))))))) in\n  hlpr e;;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n\nlet _ = exprToString sampleExpr1;;\n","type":"","out":""},{"in":"let buildX()                       = VarX","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildX () = VarX;;\n","type":"","out":""},{"in":"let buildY()                       = VarY","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildY () = VarY;;\n","type":"","out":""},{"in":"let buildSine(e)                   = Sine(e)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildSine e = Sine e;;\n","type":"","out":""},{"in":"let buildCosine(e)                 = Cosine(e)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildCosine e = Cosine e;;\n","type":"","out":""},{"in":"let buildSinCosSq(e1,e2)\t   = SinCosSq(e1, e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildSinCosSq (e1,e2) = SinCosSq (e1, e2);;\n","type":"","out":""},{"in":"let buildAverage(e1,e2)            = Average(e1,e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n","type":"","out":""},{"in":"let buildTimes(e1,e2)              = Times(e1,e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n","type":"","out":""},{"in":"let buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n","type":"","out":""},{"in":"let buildContour(e1, e2, e3)       = ContourFun(e1, e2, e3)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildContour (e1,e2,e3) = ContourFun (e1, e2, e3);;\n","type":"","out":""},{"in":"let pi = 4.0 *. atan 1.0","min":"\nlet pi = 4.0 *. (atan 1.0);;\n","type":"","out":""},{"in":"let rec eval (e,x,y) = match e with\n| VarX            \n-> x\n| VarY            \n-> y\n| Sine e'         \n-> sin (pi *. eval (e', x, y))\n| Cosine e' \n-> cos(pi *. eval(e', x, y))\n| SinCosSq (e1,e2)\n-> let (a, b) = (pi *. eval(e1, x, y), pi *. eval(e2, x, y)) in\n((sin(a)*.sin(a)) +. (cos(b)*.cos(b))) /. 2.0\n| Average (e1,e2) \n-> (eval(e1, x, y) +. eval(e2, x, y)) /. 2.0\n| Times (e1,e2) \n-> eval(e1, x, y) *. eval(e2, x, y)\n| Thresh  (a, b, a_less, b_less) \n-> (match eval (a, x, y) < eval (b, x, y) with\n| true -> eval (a_less, x, y)\n| false -> eval (b_less, x, y)\n)\n| ContourFun (e1, e2, e3)\n-> let (a, b, c) = (eval (e1,x,y), eval(e2,x,y), eval(e3,x,y)) in\nabs_float(cos(pi*.(a**2. +. b)) *. sin(pi*.(a +. b **2.))) *. c","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n","type":"","out":""},{"in":"let _ = eval(buildX(), 1.0, 1.0)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildX () = VarX;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet _ = eval ((buildX ()), 1.0, 1.0);;\n","type":"","out":""},{"in":"let _ = eval(buildSine(buildX()), 1.0, 1.0)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildSine e = Sine e;;\n\nlet buildX () = VarX;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet _ = eval ((buildSine (buildX ())), 1.0, 1.0);;\n","type":"","out":""},{"in":"let _ = eval(buildSine(buildAverage(buildX(), buildY())), 0.3, 0.3)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildSine e = Sine e;;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet _ =\n  eval ((buildSine (buildAverage ((buildX ()), (buildY ())))), 0.3, 0.3);;\n","type":"","out":""},{"in":"let eval_fn e (x,y) = \nlet rv = eval (e,x,y) in\nassert (-1.0 <= rv && rv <= 1.0);\nrv","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n","type":"","out":""},{"in":"let sampleExpr =\nbuildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\nbuildX()),buildTimes(buildCosine (buildCosine (buildAverage\n(buildTimes (buildY(),buildY()),buildCosine (buildX())))),\nbuildCosine (buildTimes (buildSine (buildCosine\n(buildY())),buildAverage (buildSine (buildX()), buildTimes\n(buildX(),buildX()))))))),buildY())))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet sampleExpr =\n  buildCosine\n    (buildSine\n       (buildTimes\n          ((buildCosine\n              (buildAverage\n                 ((buildCosine (buildX ())),\n                   (buildTimes\n                      ((buildCosine\n                          (buildCosine\n                             (buildAverage\n                                ((buildTimes ((buildY ()), (buildY ()))),\n                                  (buildCosine (buildX ())))))),\n                        (buildCosine\n                           (buildTimes\n                              ((buildSine (buildCosine (buildY ()))),\n                                (buildAverage\n                                   ((buildSine (buildX ())),\n                                     (buildTimes ((buildX ()), (buildX ()))))))))))))),\n            (buildY ()))));;\n","type":"","out":""},{"in":"let sampleExpr2 =\nbuildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet sampleExpr2 =\n  buildThresh\n    ((buildX ()), (buildY ()), (buildSine (buildX ())),\n      (buildCosine (buildY ())));;\n","type":"","out":""},{"in":"let rec build (rand,depth) = match depth with\n| 0 -> (match rand(0, 1) with \n| 0 -> buildX() \n| 1 -> buildY()\n| _ -> failwith \"this should have been unreachable :<\"\n)\n| _ -> \nlet num = rand(0,150) in \nlet (a,b,c,d) = (build(rand, depth-1), build(rand, depth-1), \nbuild(rand, depth-1), build(rand, depth-1)) in\nmatch num with\n| num when depth <= 3->\n(match num with\n| num when num < 63 ->\n(match num mod 5 with\n| 0 -> buildX()\n| 1 -> buildY()\n| 2 -> buildSinCosSq(c, a)\n| 3 -> buildSine(b)\n| 4 -> buildThresh(a, c, d, c)\n| _ -> failwith \"should be unreachable :<\"\n)\n| num ->\n(match num mod 5 with\n| 0 -> buildY()\n| 1 -> buildX()\n| 2 -> buildCosine(a)\n| 3 -> buildAverage(d, b)\n| 4 -> buildContour(c, a, d)\n| _ -> failwith \"should be unreachable :<\"\n)\n)\n| num when num < 15 ->\n(match num mod 2 with\n| 0 -> buildX()\n| 1 -> buildY()\n| _ -> failwith \"should be unreachable :<\"\n)\n| num when num < 90 && num > 35 ->\n(match num mod 2 with\n| 0 -> buildSinCosSq(a, b)\n| 1 -> buildContour(c, d, a)\n| _ -> failwith \"this should have been unreachable :<\"\n)\n| num when num < 35 ->\n(match num mod 6 with\n| 0 -> buildSine(c)\n| 1 -> buildCosine(d)\n| 2 -> buildSinCosSq(a, c)\n| 3 -> buildContour(b, a, c)\n| 4 -> buildX()\n| 5 -> buildY()\n| _ -> failwith \"should be unreachable :<\"\n)\n| num ->\n(match num mod 7 with \n| 0 -> buildThresh(d, c, b, a)\n| 1 -> buildAverage(c, b)\n| 2 -> buildTimes(a, d)\n| 3 -> buildSine(d)\n| 4 -> buildCosine(c)\n| 5 -> buildSinCosSq(b, a)\n| 6 -> buildContour(d, c, c)\n| _ -> failwith \"should be unreachable :<\"\n)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildContour (e1,e2,e3) = ContourFun (e1, e2, e3);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSinCosSq (e1,e2) = SinCosSq (e1, e2);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  match depth with\n  | 0 ->\n      (match rand (0, 1) with\n       | 0 -> buildX ()\n       | 1 -> buildY ()\n       | _ -> failwith \"this should have been unreachable :<\")\n  | _ ->\n      let num = rand (0, 150) in\n      let (a,b,c,d) =\n        ((build (rand, (depth - 1))), (build (rand, (depth - 1))),\n          (build (rand, (depth - 1))), (build (rand, (depth - 1)))) in\n      (match num with\n       | num when depth <= 3 ->\n           (match num with\n            | num when num < 63 ->\n                (match num mod 5 with\n                 | 0 -> buildX ()\n                 | 1 -> buildY ()\n                 | 2 -> buildSinCosSq (c, a)\n                 | 3 -> buildSine b\n                 | 4 -> buildThresh (a, c, d, c)\n                 | _ -> failwith \"should be unreachable :<\")\n            | num ->\n                (match num mod 5 with\n                 | 0 -> buildY ()\n                 | 1 -> buildX ()\n                 | 2 -> buildCosine a\n                 | 3 -> buildAverage (d, b)\n                 | 4 -> buildContour (c, a, d)\n                 | _ -> failwith \"should be unreachable :<\"))\n       | num when num < 15 ->\n           (match num mod 2 with\n            | 0 -> buildX ()\n            | 1 -> buildY ()\n            | _ -> failwith \"should be unreachable :<\")\n       | num when (num < 90) && (num > 35) ->\n           (match num mod 2 with\n            | 0 -> buildSinCosSq (a, b)\n            | 1 -> buildContour (c, d, a)\n            | _ -> failwith \"this should have been unreachable :<\")\n       | num when num < 35 ->\n           (match num mod 6 with\n            | 0 -> buildSine c\n            | 1 -> buildCosine d\n            | 2 -> buildSinCosSq (a, c)\n            | 3 -> buildContour (b, a, c)\n            | 4 -> buildX ()\n            | 5 -> buildY ()\n            | _ -> failwith \"should be unreachable :<\")\n       | num ->\n           (match num mod 7 with\n            | 0 -> buildThresh (d, c, b, a)\n            | 1 -> buildAverage (c, b)\n            | 2 -> buildTimes (a, d)\n            | 3 -> buildSine d\n            | 4 -> buildCosine c\n            | 5 -> buildSinCosSq (b, a)\n            | 6 -> buildContour (d, c, c)\n            | _ -> failwith \"should be unreachable :<\"));;\n","type":"","out":""},{"in":"let g1 () = (9, 6523124, 34167)","min":"\nlet g1 () = (9, 6523124, 34167);;\n","type":"","out":""},{"in":"let g2 () = (10, 210238, 52111)","min":"\nlet g2 () = (10, 210238, 52111);;\n","type":"","out":""},{"in":"let g3 () = (12, 514565, 231148)","min":"\nlet g3 () = (12, 514565, 231148);;\n","type":"","out":""},{"in":"let c1 () = (9, 132167, 64322)","min":"\nlet c1 () = (9, 132167, 64322);;\n","type":"","out":""},{"in":"let c2 () = (12, 11111, 41231)","min":"\nlet c2 () = (12, 11111, 41231);;\n","type":"","out":""},{"in":"let c3 () = (10, 5013731, 873489)","min":"\nlet c3 () = (10, 5013731, 873489);;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rand = makeRand(27, 130)","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet rand = makeRand (27, 130);;\n","type":"","out":""},{"in":"let expr = build(rand, 6)","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildContour (e1,e2,e3) = ContourFun (e1, e2, e3);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSinCosSq (e1,e2) = SinCosSq (e1, e2);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  match depth with\n  | 0 ->\n      (match rand (0, 1) with\n       | 0 -> buildX ()\n       | 1 -> buildY ()\n       | _ -> failwith \"this should have been unreachable :<\")\n  | _ ->\n      let num = rand (0, 150) in\n      let (a,b,c,d) =\n        ((build (rand, (depth - 1))), (build (rand, (depth - 1))),\n          (build (rand, (depth - 1))), (build (rand, (depth - 1)))) in\n      (match num with\n       | num when depth <= 3 ->\n           (match num with\n            | num when num < 63 ->\n                (match num mod 5 with\n                 | 0 -> buildX ()\n                 | 1 -> buildY ()\n                 | 2 -> buildSinCosSq (c, a)\n                 | 3 -> buildSine b\n                 | 4 -> buildThresh (a, c, d, c)\n                 | _ -> failwith \"should be unreachable :<\")\n            | num ->\n                (match num mod 5 with\n                 | 0 -> buildY ()\n                 | 1 -> buildX ()\n                 | 2 -> buildCosine a\n                 | 3 -> buildAverage (d, b)\n                 | 4 -> buildContour (c, a, d)\n                 | _ -> failwith \"should be unreachable :<\"))\n       | num when num < 15 ->\n           (match num mod 2 with\n            | 0 -> buildX ()\n            | 1 -> buildY ()\n            | _ -> failwith \"should be unreachable :<\")\n       | num when (num < 90) && (num > 35) ->\n           (match num mod 2 with\n            | 0 -> buildSinCosSq (a, b)\n            | 1 -> buildContour (c, d, a)\n            | _ -> failwith \"this should have been unreachable :<\")\n       | num when num < 35 ->\n           (match num mod 6 with\n            | 0 -> buildSine c\n            | 1 -> buildCosine d\n            | 2 -> buildSinCosSq (a, c)\n            | 3 -> buildContour (b, a, c)\n            | 4 -> buildX ()\n            | 5 -> buildY ()\n            | _ -> failwith \"should be unreachable :<\")\n       | num ->\n           (match num mod 7 with\n            | 0 -> buildThresh (d, c, b, a)\n            | 1 -> buildAverage (c, b)\n            | 2 -> buildTimes (a, d)\n            | 3 -> buildSine d\n            | 4 -> buildCosine c\n            | 5 -> buildSinCosSq (b, a)\n            | 6 -> buildContour (d, c, c)\n            | _ -> failwith \"should be unreachable :<\"));;\n\nlet rand = makeRand (27, 130);;\n\nlet expr = build (rand, 6);;\n","type":"","out":""},{"in":"let _ = eval(expr, 0.70, 0.45)","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildContour (e1,e2,e3) = ContourFun (e1, e2, e3);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSinCosSq (e1,e2) = SinCosSq (e1, e2);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  match depth with\n  | 0 ->\n      (match rand (0, 1) with\n       | 0 -> buildX ()\n       | 1 -> buildY ()\n       | _ -> failwith \"this should have been unreachable :<\")\n  | _ ->\n      let num = rand (0, 150) in\n      let (a,b,c,d) =\n        ((build (rand, (depth - 1))), (build (rand, (depth - 1))),\n          (build (rand, (depth - 1))), (build (rand, (depth - 1)))) in\n      (match num with\n       | num when depth <= 3 ->\n           (match num with\n            | num when num < 63 ->\n                (match num mod 5 with\n                 | 0 -> buildX ()\n                 | 1 -> buildY ()\n                 | 2 -> buildSinCosSq (c, a)\n                 | 3 -> buildSine b\n                 | 4 -> buildThresh (a, c, d, c)\n                 | _ -> failwith \"should be unreachable :<\")\n            | num ->\n                (match num mod 5 with\n                 | 0 -> buildY ()\n                 | 1 -> buildX ()\n                 | 2 -> buildCosine a\n                 | 3 -> buildAverage (d, b)\n                 | 4 -> buildContour (c, a, d)\n                 | _ -> failwith \"should be unreachable :<\"))\n       | num when num < 15 ->\n           (match num mod 2 with\n            | 0 -> buildX ()\n            | 1 -> buildY ()\n            | _ -> failwith \"should be unreachable :<\")\n       | num when (num < 90) && (num > 35) ->\n           (match num mod 2 with\n            | 0 -> buildSinCosSq (a, b)\n            | 1 -> buildContour (c, d, a)\n            | _ -> failwith \"this should have been unreachable :<\")\n       | num when num < 35 ->\n           (match num mod 6 with\n            | 0 -> buildSine c\n            | 1 -> buildCosine d\n            | 2 -> buildSinCosSq (a, c)\n            | 3 -> buildContour (b, a, c)\n            | 4 -> buildX ()\n            | 5 -> buildY ()\n            | _ -> failwith \"should be unreachable :<\")\n       | num ->\n           (match num mod 7 with\n            | 0 -> buildThresh (d, c, b, a)\n            | 1 -> buildAverage (c, b)\n            | 2 -> buildTimes (a, d)\n            | 3 -> buildSine d\n            | 4 -> buildCosine c\n            | 5 -> buildSinCosSq (b, a)\n            | 6 -> buildContour (d, c, c)\n            | _ -> failwith \"should be unreachable :<\"));;\n\nlet rand = makeRand (27, 130);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet expr = build (rand, 6);;\n\nlet _ = eval (expr, 0.70, 0.45);;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildContour (e1,e2,e3) = ContourFun (e1, e2, e3);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSinCosSq (e1,e2) = SinCosSq (e1, e2);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  match depth with\n  | 0 ->\n      (match rand (0, 1) with\n       | 0 -> buildX ()\n       | 1 -> buildY ()\n       | _ -> failwith \"this should have been unreachable :<\")\n  | _ ->\n      let num = rand (0, 150) in\n      let (a,b,c,d) =\n        ((build (rand, (depth - 1))), (build (rand, (depth - 1))),\n          (build (rand, (depth - 1))), (build (rand, (depth - 1)))) in\n      (match num with\n       | num when depth <= 3 ->\n           (match num with\n            | num when num < 63 ->\n                (match num mod 5 with\n                 | 0 -> buildX ()\n                 | 1 -> buildY ()\n                 | 2 -> buildSinCosSq (c, a)\n                 | 3 -> buildSine b\n                 | 4 -> buildThresh (a, c, d, c)\n                 | _ -> failwith \"should be unreachable :<\")\n            | num ->\n                (match num mod 5 with\n                 | 0 -> buildY ()\n                 | 1 -> buildX ()\n                 | 2 -> buildCosine a\n                 | 3 -> buildAverage (d, b)\n                 | 4 -> buildContour (c, a, d)\n                 | _ -> failwith \"should be unreachable :<\"))\n       | num when num < 15 ->\n           (match num mod 2 with\n            | 0 -> buildX ()\n            | 1 -> buildY ()\n            | _ -> failwith \"should be unreachable :<\")\n       | num when (num < 90) && (num > 35) ->\n           (match num mod 2 with\n            | 0 -> buildSinCosSq (a, b)\n            | 1 -> buildContour (c, d, a)\n            | _ -> failwith \"this should have been unreachable :<\")\n       | num when num < 35 ->\n           (match num mod 6 with\n            | 0 -> buildSine c\n            | 1 -> buildCosine d\n            | 2 -> buildSinCosSq (a, c)\n            | 3 -> buildContour (b, a, c)\n            | 4 -> buildX ()\n            | 5 -> buildY ()\n            | _ -> failwith \"should be unreachable :<\")\n       | num ->\n           (match num mod 7 with\n            | 0 -> buildThresh (d, c, b, a)\n            | 1 -> buildAverage (c, b)\n            | 2 -> buildTimes (a, d)\n            | 3 -> buildSine d\n            | 4 -> buildCosine c\n            | 5 -> buildSinCosSq (b, a)\n            | 6 -> buildContour (d, c, c)\n            | _ -> failwith \"should be unreachable :<\"));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  let rec hlpr e =\n    match e with\n    | VarX  -> \"x\"\n    | VarY  -> \"y\"\n    | Sine expr -> \"sin(pi*\" ^ ((hlpr expr) ^ \")\")\n    | Cosine expr -> \"cos(pi*\" ^ ((hlpr expr) ^ \")\")\n    | SinCosSq (e1,e2) ->\n        \"((sin^2(pi*\" ^ ((hlpr e1) ^ (\")*cos^2(pi*\" ^ ((hlpr e2) ^ \"))/2)\")))\n    | Average (e1,e2) -> \"((\" ^ ((hlpr e1) ^ (\"+\" ^ ((hlpr e2) ^ \")/2)\")))\n    | Times (e1,e2) -> (hlpr e1) ^ (\"*\" ^ (hlpr e2))\n    | Thresh (e1,e2,e3,e4) ->\n        \"(\" ^\n          ((hlpr e1) ^\n             (\"<\" ^\n                ((hlpr e2) ^ (\"?\" ^ ((hlpr e3) ^ (\":\" ^ ((hlpr e4) ^ \")\")))))))\n    | ContourFun (e1,e2,e3) ->\n        let (a,b,c) = ((hlpr e1), (hlpr e2), (hlpr e3)) in\n        \"(abs((cos(pi*\" ^\n          (a ^\n             (\"^2+\" ^\n                (b ^\n                   (\")(sin(pi*\" ^ (a ^ (\"+\" ^ (b ^ (\"^2))))*\" ^ (c ^ \")\"))))))))) in\n  hlpr e;;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildContour (e1,e2,e3) = ContourFun (e1, e2, e3);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSinCosSq (e1,e2) = SinCosSq (e1, e2);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  match depth with\n  | 0 ->\n      (match rand (0, 1) with\n       | 0 -> buildX ()\n       | 1 -> buildY ()\n       | _ -> failwith \"this should have been unreachable :<\")\n  | _ ->\n      let num = rand (0, 150) in\n      let (a,b,c,d) =\n        ((build (rand, (depth - 1))), (build (rand, (depth - 1))),\n          (build (rand, (depth - 1))), (build (rand, (depth - 1)))) in\n      (match num with\n       | num when depth <= 3 ->\n           (match num with\n            | num when num < 63 ->\n                (match num mod 5 with\n                 | 0 -> buildX ()\n                 | 1 -> buildY ()\n                 | 2 -> buildSinCosSq (c, a)\n                 | 3 -> buildSine b\n                 | 4 -> buildThresh (a, c, d, c)\n                 | _ -> failwith \"should be unreachable :<\")\n            | num ->\n                (match num mod 5 with\n                 | 0 -> buildY ()\n                 | 1 -> buildX ()\n                 | 2 -> buildCosine a\n                 | 3 -> buildAverage (d, b)\n                 | 4 -> buildContour (c, a, d)\n                 | _ -> failwith \"should be unreachable :<\"))\n       | num when num < 15 ->\n           (match num mod 2 with\n            | 0 -> buildX ()\n            | 1 -> buildY ()\n            | _ -> failwith \"should be unreachable :<\")\n       | num when (num < 90) && (num > 35) ->\n           (match num mod 2 with\n            | 0 -> buildSinCosSq (a, b)\n            | 1 -> buildContour (c, d, a)\n            | _ -> failwith \"this should have been unreachable :<\")\n       | num when num < 35 ->\n           (match num mod 6 with\n            | 0 -> buildSine c\n            | 1 -> buildCosine d\n            | 2 -> buildSinCosSq (a, c)\n            | 3 -> buildContour (b, a, c)\n            | 4 -> buildX ()\n            | 5 -> buildY ()\n            | _ -> failwith \"should be unreachable :<\")\n       | num ->\n           (match num mod 7 with\n            | 0 -> buildThresh (d, c, b, a)\n            | 1 -> buildAverage (c, b)\n            | 2 -> buildTimes (a, d)\n            | 3 -> buildSine d\n            | 4 -> buildCosine c\n            | 5 -> buildSinCosSq (b, a)\n            | 6 -> buildContour (d, c, c)\n            | _ -> failwith \"should be unreachable :<\"));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  let rec hlpr e =\n    match e with\n    | VarX  -> \"x\"\n    | VarY  -> \"y\"\n    | Sine expr -> \"sin(pi*\" ^ ((hlpr expr) ^ \")\")\n    | Cosine expr -> \"cos(pi*\" ^ ((hlpr expr) ^ \")\")\n    | SinCosSq (e1,e2) ->\n        \"((sin^2(pi*\" ^ ((hlpr e1) ^ (\")*cos^2(pi*\" ^ ((hlpr e2) ^ \"))/2)\")))\n    | Average (e1,e2) -> \"((\" ^ ((hlpr e1) ^ (\"+\" ^ ((hlpr e2) ^ \")/2)\")))\n    | Times (e1,e2) -> (hlpr e1) ^ (\"*\" ^ (hlpr e2))\n    | Thresh (e1,e2,e3,e4) ->\n        \"(\" ^\n          ((hlpr e1) ^\n             (\"<\" ^\n                ((hlpr e2) ^ (\"?\" ^ ((hlpr e3) ^ (\":\" ^ ((hlpr e4) ^ \")\")))))))\n    | ContourFun (e1,e2,e3) ->\n        let (a,b,c) = ((hlpr e1), (hlpr e2), (hlpr e3)) in\n        \"(abs((cos(pi*\" ^\n          (a ^\n             (\"^2+\" ^\n                (b ^\n                   (\")(sin(pi*\" ^ (a ^ (\"+\" ^ (b ^ (\"^2))))*\" ^ (c ^ \")\"))))))))) in\n  hlpr e;;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":0,"stop":18285},"type":"eval"},"cursor":793,"time":1.398216554932854e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | h::t -> let (x, y) = h in\n        if x = k then y\n        else assoc (d, k, t)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' = if List.mem h seen then seen else h::seen in\n          let rest' = t in \n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet rec wwhile (f, b) = let (out, result) = f b in\n    match result with\n      | false -> out\n      | true -> wwhile(f, out)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n\nlet fixpoint (f,b) = \n  let g x = let evaled = f x in (evaled, evaled <> x) in\n    wwhile (g, b)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine        of expr\n    | Cosine      of expr\n    | SinCosSq    of expr * expr\n    | Average     of expr * expr\n    | Times       of expr * expr\n    | Thresh      of expr * expr * expr * expr\t\n    | ContourFun  of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet rec exprToString e = \n  let rec hlpr e = match e with\n    | VarX ->\n        \"x\"\n    | VarY -> \n        \"y\"\n    | Sine expr -> \n        \"sin(pi*\" ^ hlpr expr ^ \")\"\n    | Cosine expr -> \n        \"cos(pi*\" ^ hlpr expr ^ \")\"\n    | SinCosSq (e1, e2) ->\n        \"((sin^2(pi*\" ^ hlpr e1 ^ \")*cos^2(pi*\" ^ hlpr e2 ^ \"))/2)\"\n    | Average (e1,e2) -> \n        \"((\" ^ hlpr e1 ^ \"+\" ^ hlpr e2 ^ \")/2)\"\n    | Times (e1,e2) -> \n        hlpr e1 ^ \"*\" ^ hlpr e2\n    | Thresh (e1,e2,e3,e4) -> \n        \"(\" ^ hlpr e1  ^ \"<\" ^ hlpr e2 ^ \"?\" ^ hlpr e3 ^ \":\" ^ hlpr e4 ^ \")\"\n    | ContourFun (e1, e2, e3) ->\n        let (a, b, c) = (hlpr e1, hlpr e2, hlpr e3) in\n          \"(abs((cos(pi*\" ^ a ^ \"^2+\" ^ b ^ \")(sin(pi*\" ^ a ^ \"+\" ^ b ^ \"^2))))*\" ^\n          c ^ \")\"\n  in \n    hlpr e\n\nlet _ = exprToString sampleExpr1\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildSinCosSq(e1,e2)\t   = SinCosSq(e1, e2)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\nlet buildContour(e1, e2, e3)       = ContourFun(e1, e2, e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX            \n    -> x\n  | VarY            \n    -> y\n  | Sine e'         \n    -> sin (pi *. eval (e', x, y))\n  | Cosine e' \n    -> cos(pi *. eval(e', x, y))\n  | SinCosSq (e1,e2)\n    -> let (a, b) = (pi *. eval(e1, x, y), pi *. eval(e2, x, y)) in\n        ((sin(a)*.sin(a)) +. (cos(b)*.cos(b))) /. 2.0\n  | Average (e1,e2) \n    -> (eval(e1, x, y) +. eval(e2, x, y)) /. 2.0\n  | Times (e1,e2) \n    -> eval(e1, x, y) *. eval(e2, x, y)\n  | Thresh  (a, b, a_less, b_less) \n    -> (match eval (a, x, y) < eval (b, x, y) with\n         | true -> eval (a_less, x, y)\n         | false -> eval (b_less, x, y)\n       )\n  | ContourFun (e1, e2, e3)\n    -> let (a, b, c) = (eval (e1,x,y), eval(e2,x,y), eval(e3,x,y)) in\n        abs_float(cos(pi*.(a**2. +. b)) *. sin(pi*.(a +. b **2.))) *. c\n\n\nlet _ = eval(buildX(), 1.0, 1.0)\nlet _ = eval(buildSine(buildX()), 1.0, 1.0)\nlet _ = eval(buildSine(buildAverage(buildX(), buildY())), 0.3, 0.3)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\n\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand,depth) = match depth with\n  | 0 -> (match rand(0, 1) with \n           | 0 -> buildX() \n           | 1 -> buildY()\n           | _ -> failwith \"this should have been unreachable :<\"\n         )\n  | _ -> \n      let num = rand(0,150) in \n      let (a,b,c,d) = (build(rand, depth-1), build(rand, depth-1), \n                       build(rand, depth-1), build(rand, depth-1)) in\n        match num with\n          | num when depth <= 3->\n              (match num with\n                | num when num < 63 ->\n                    (match num mod 5 with\n                      | 0 -> buildX()\n                      | 1 -> buildY()\n                      | 2 -> buildSinCosSq(c, a)\n                      | 3 -> buildSine(b)\n                      | 4 -> buildThresh(a, c, d, c)\n                      | _ -> failwith \"should be unreachable :<\"\n                    )\n                | num ->\n                    (match num mod 5 with\n                      | 0 -> buildY()\n                      | 1 -> buildX()\n                      | 2 -> buildCosine(a)\n                      | 3 -> buildAverage(d, b)\n                      | 4 -> buildContour(c, a, d)\n                      | _ -> failwith \"should be unreachable :<\"\n                    )\n              )\n          | num when num < 15 ->\n              (match num mod 2 with\n                | 0 -> buildX()\n                | 1 -> buildY()\n                | _ -> failwith \"should be unreachable :<\"\n              )\n          | num when num < 90 && num > 35 ->\n              (match num mod 2 with\n                | 0 -> buildSinCosSq(a, b)\n                | 1 -> buildContour(c, d, a)\n                | _ -> failwith \"this should have been unreachable :<\"\n              )\n          | num when num < 35 ->\n              (match num mod 6 with\n                | 0 -> buildSine(c)\n                | 1 -> buildCosine(d)\n                | 2 -> buildSinCosSq(a, c)\n                | 3 -> buildContour(b, a, c)\n                | 4 -> buildX()\n                | 5 -> buildY()\n                | _ -> failwith \"should be unreachable :<\"\n              )\n          | num ->\n              (match num mod 7 with \n                | 0 -> buildThresh(d, c, b, a)\n                | 1 -> buildAverage(c, b)\n                | 2 -> buildTimes(a, d)\n                | 3 -> buildSine(d)\n                | 4 -> buildCosine(c)\n                | 5 -> buildSinCosSq(b, a)\n                | 6 -> buildContour(d, c, c)\n                | _ -> failwith \"should be unreachable :<\"\n              )\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (9, 6523124, 34167)\nlet g2 () = (10, 210238, 52111)  \nlet g3 () = (12, 514565, 231148)  \n\nlet c1 () = (9, 132167, 64322)\nlet c2 () = (12, 11111, 41231)\nlet c3 () = (10, 5013731, 873489)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\nlet rand = makeRand(27, 130)\nlet expr = build(rand, 6)\nlet _ = eval(expr, 0.70, 0.45)\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec assoc (d,k,l) = match l with\n| [] -> d\n| h::t -> let (x, y) = h in\nif x = k then y\nelse assoc (d, k, t)","min":"\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | h::t -> let (x,y) = h in if x = k then y else assoc (d, k, t);;\n","type":"","out":""},{"in":"let removeDuplicates l = \nlet rec helper (seen,rest) = \nmatch rest with \n[] -> seen\n| h::t -> \nlet seen' = if List.mem h seen then seen else h::seen in\nlet rest' = t in \nhelper (seen',rest') \nin\nList.rev (helper ([],l))","min":"\nlet removeDuplicates l =\n  let rec helper (seen,rest) =\n    match rest with\n    | [] -> seen\n    | h::t ->\n        let seen' = if List.mem h seen then seen else h :: seen in\n        let rest' = t in helper (seen', rest') in\n  List.rev (helper ([], l));;\n","type":"","out":""},{"in":"let rec wwhile (f, b) = let (out, result) = f b in\nmatch result with\n| false -> out\n| true -> wwhile(f, out)","min":"\nlet rec wwhile (f,b) =\n  let (out,result) = f b in\n  match result with | false  -> out | true  -> wwhile (f, out);;\n","type":"","out":""},{"in":"let fixpoint (f,b) = \nlet g x = let evaled = f x in (evaled, evaled <> x) in\nwwhile (g, b)","min":"\nlet rec wwhile (f,b) =\n  let (out,result) = f b in\n  match result with | false  -> out | true  -> wwhile (f, out);;\n\nlet fixpoint (f,b) =\n  let g x = let evaled = f x in (evaled, (evaled <> x)) in wwhile (g, b);;\n","type":"","out":""},{"in":"type expr = \nVarX\n| VarY\n| Sine        of expr\n| Cosine      of expr\n| SinCosSq    of expr * expr\n| Average     of expr * expr\n| Times       of expr * expr\n| Thresh      of expr * expr * expr * expr\t\n| ContourFun  of expr * expr * expr","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n","type":"","out":""},{"in":"let sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n","type":"","out":""},{"in":"let rec exprToString e = \nlet rec hlpr e = match e with\n| VarX ->\n\"x\"\n| VarY -> \n\"y\"\n| Sine expr -> \n\"sin(pi*\" ^ hlpr expr ^ \")\"\n| Cosine expr -> \n\"cos(pi*\" ^ hlpr expr ^ \")\"\n| SinCosSq (e1, e2) ->\n\"((sin^2(pi*\" ^ hlpr e1 ^ \")*cos^2(pi*\" ^ hlpr e2 ^ \"))/2)\"\n| Average (e1,e2) -> \n\"((\" ^ hlpr e1 ^ \"+\" ^ hlpr e2 ^ \")/2)\"\n| Times (e1,e2) -> \nhlpr e1 ^ \"*\" ^ hlpr e2\n| Thresh (e1,e2,e3,e4) -> \n\"(\" ^ hlpr e1  ^ \"<\" ^ hlpr e2 ^ \"?\" ^ hlpr e3 ^ \":\" ^ hlpr e4 ^ \")\"\n| ContourFun (e1, e2, e3) ->\nlet (a, b, c) = (hlpr e1, hlpr e2, hlpr e3) in\n\"(abs((cos(pi*\" ^ a ^ \"^2+\" ^ b ^ \")(sin(pi*\" ^ a ^ \"+\" ^ b ^ \"^2))))*\" ^\nc ^ \")\"\nin \nhlpr e","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet rec exprToString e =\n  let rec hlpr e =\n    match e with\n    | VarX  -> \"x\"\n    | VarY  -> \"y\"\n    | Sine expr -> \"sin(pi*\" ^ ((hlpr expr) ^ \")\")\n    | Cosine expr -> \"cos(pi*\" ^ ((hlpr expr) ^ \")\")\n    | SinCosSq (e1,e2) ->\n        \"((sin^2(pi*\" ^ ((hlpr e1) ^ (\")*cos^2(pi*\" ^ ((hlpr e2) ^ \"))/2)\")))\n    | Average (e1,e2) -> \"((\" ^ ((hlpr e1) ^ (\"+\" ^ ((hlpr e2) ^ \")/2)\")))\n    | Times (e1,e2) -> (hlpr e1) ^ (\"*\" ^ (hlpr e2))\n    | Thresh (e1,e2,e3,e4) ->\n        \"(\" ^\n          ((hlpr e1) ^\n             (\"<\" ^\n                ((hlpr e2) ^ (\"?\" ^ ((hlpr e3) ^ (\":\" ^ ((hlpr e4) ^ \")\")))))))\n    | ContourFun (e1,e2,e3) ->\n        let (a,b,c) = ((hlpr e1), (hlpr e2), (hlpr e3)) in\n        \"(abs((cos(pi*\" ^\n          (a ^\n             (\"^2+\" ^\n                (b ^\n                   (\")(sin(pi*\" ^ (a ^ (\"+\" ^ (b ^ (\"^2))))*\" ^ (c ^ \")\"))))))))) in\n  hlpr e;;\n","type":"","out":""},{"in":"let _ = exprToString sampleExpr1","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet rec exprToString e =\n  let rec hlpr e =\n    match e with\n    | VarX  -> \"x\"\n    | VarY  -> \"y\"\n    | Sine expr -> \"sin(pi*\" ^ ((hlpr expr) ^ \")\")\n    | Cosine expr -> \"cos(pi*\" ^ ((hlpr expr) ^ \")\")\n    | SinCosSq (e1,e2) ->\n        \"((sin^2(pi*\" ^ ((hlpr e1) ^ (\")*cos^2(pi*\" ^ ((hlpr e2) ^ \"))/2)\")))\n    | Average (e1,e2) -> \"((\" ^ ((hlpr e1) ^ (\"+\" ^ ((hlpr e2) ^ \")/2)\")))\n    | Times (e1,e2) -> (hlpr e1) ^ (\"*\" ^ (hlpr e2))\n    | Thresh (e1,e2,e3,e4) ->\n        \"(\" ^\n          ((hlpr e1) ^\n             (\"<\" ^\n                ((hlpr e2) ^ (\"?\" ^ ((hlpr e3) ^ (\":\" ^ ((hlpr e4) ^ \")\")))))))\n    | ContourFun (e1,e2,e3) ->\n        let (a,b,c) = ((hlpr e1), (hlpr e2), (hlpr e3)) in\n        \"(abs((cos(pi*\" ^\n          (a ^\n             (\"^2+\" ^\n                (b ^\n                   (\")(sin(pi*\" ^ (a ^ (\"+\" ^ (b ^ (\"^2))))*\" ^ (c ^ \")\"))))))))) in\n  hlpr e;;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n\nlet _ = exprToString sampleExpr1;;\n","type":"","out":""},{"in":"let buildX()                       = VarX","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildX () = VarX;;\n","type":"","out":""},{"in":"let buildY()                       = VarY","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildY () = VarY;;\n","type":"","out":""},{"in":"let buildSine(e)                   = Sine(e)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildSine e = Sine e;;\n","type":"","out":""},{"in":"let buildCosine(e)                 = Cosine(e)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildCosine e = Cosine e;;\n","type":"","out":""},{"in":"let buildSinCosSq(e1,e2)\t   = SinCosSq(e1, e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildSinCosSq (e1,e2) = SinCosSq (e1, e2);;\n","type":"","out":""},{"in":"let buildAverage(e1,e2)            = Average(e1,e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n","type":"","out":""},{"in":"let buildTimes(e1,e2)              = Times(e1,e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n","type":"","out":""},{"in":"let buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n","type":"","out":""},{"in":"let buildContour(e1, e2, e3)       = ContourFun(e1, e2, e3)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildContour (e1,e2,e3) = ContourFun (e1, e2, e3);;\n","type":"","out":""},{"in":"let pi = 4.0 *. atan 1.0","min":"\nlet pi = 4.0 *. (atan 1.0);;\n","type":"","out":""},{"in":"let rec eval (e,x,y) = match e with\n| VarX            \n-> x\n| VarY            \n-> y\n| Sine e'         \n-> sin (pi *. eval (e', x, y))\n| Cosine e' \n-> cos(pi *. eval(e', x, y))\n| SinCosSq (e1,e2)\n-> let (a, b) = (pi *. eval(e1, x, y), pi *. eval(e2, x, y)) in\n((sin(a)*.sin(a)) +. (cos(b)*.cos(b))) /. 2.0\n| Average (e1,e2) \n-> (eval(e1, x, y) +. eval(e2, x, y)) /. 2.0\n| Times (e1,e2) \n-> eval(e1, x, y) *. eval(e2, x, y)\n| Thresh  (a, b, a_less, b_less) \n-> (match eval (a, x, y) < eval (b, x, y) with\n| true -> eval (a_less, x, y)\n| false -> eval (b_less, x, y)\n)\n| ContourFun (e1, e2, e3)\n-> let (a, b, c) = (eval (e1,x,y), eval(e2,x,y), eval(e3,x,y)) in\nabs_float(cos(pi*.(a**2. +. b)) *. sin(pi*.(a +. b **2.))) *. c","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n","type":"","out":""},{"in":"let _ = eval(buildX(), 1.0, 1.0)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildX () = VarX;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet _ = eval ((buildX ()), 1.0, 1.0);;\n","type":"","out":""},{"in":"let _ = eval(buildSine(buildX()), 1.0, 1.0)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildSine e = Sine e;;\n\nlet buildX () = VarX;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet _ = eval ((buildSine (buildX ())), 1.0, 1.0);;\n","type":"","out":""},{"in":"let _ = eval(buildSine(buildAverage(buildX(), buildY())), 0.3, 0.3)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildSine e = Sine e;;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet _ =\n  eval ((buildSine (buildAverage ((buildX ()), (buildY ())))), 0.3, 0.3);;\n","type":"","out":""},{"in":"let eval_fn e (x,y) = \nlet rv = eval (e,x,y) in\nassert (-1.0 <= rv && rv <= 1.0);\nrv","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n","type":"","out":""},{"in":"let sampleExpr =\nbuildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\nbuildX()),buildTimes(buildCosine (buildCosine (buildAverage\n(buildTimes (buildY(),buildY()),buildCosine (buildX())))),\nbuildCosine (buildTimes (buildSine (buildCosine\n(buildY())),buildAverage (buildSine (buildX()), buildTimes\n(buildX(),buildX()))))))),buildY())))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet sampleExpr =\n  buildCosine\n    (buildSine\n       (buildTimes\n          ((buildCosine\n              (buildAverage\n                 ((buildCosine (buildX ())),\n                   (buildTimes\n                      ((buildCosine\n                          (buildCosine\n                             (buildAverage\n                                ((buildTimes ((buildY ()), (buildY ()))),\n                                  (buildCosine (buildX ())))))),\n                        (buildCosine\n                           (buildTimes\n                              ((buildSine (buildCosine (buildY ()))),\n                                (buildAverage\n                                   ((buildSine (buildX ())),\n                                     (buildTimes ((buildX ()), (buildX ()))))))))))))),\n            (buildY ()))));;\n","type":"","out":""},{"in":"let sampleExpr2 =\nbuildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet sampleExpr2 =\n  buildThresh\n    ((buildX ()), (buildY ()), (buildSine (buildX ())),\n      (buildCosine (buildY ())));;\n","type":"","out":""},{"in":"let rec build (rand,depth) = match depth with\n| 0 -> (match rand(0, 1) with \n| 0 -> buildX() \n| 1 -> buildY()\n| _ -> failwith \"this should have been unreachable :<\"\n)\n| _ -> \nlet num = rand(0,150) in \nlet (a,b,c,d) = (build(rand, depth-1), build(rand, depth-1), \nbuild(rand, depth-1), build(rand, depth-1)) in\nmatch num with\n| num when depth <= 3->\n(match num with\n| num when num < 63 ->\n(match num mod 5 with\n| 0 -> buildX()\n| 1 -> buildY()\n| 2 -> buildSinCosSq(c, a)\n| 3 -> buildSine(b)\n| 4 -> buildThresh(a, c, d, c)\n| _ -> failwith \"should be unreachable :<\"\n)\n| num ->\n(match num mod 5 with\n| 0 -> buildY()\n| 1 -> buildX()\n| 2 -> buildCosine(a)\n| 3 -> buildAverage(d, b)\n| 4 -> buildContour(c, a, d)\n| _ -> failwith \"should be unreachable :<\"\n)\n)\n| num when num < 15 ->\n(match num mod 2 with\n| 0 -> buildX()\n| 1 -> buildY()\n| _ -> failwith \"should be unreachable :<\"\n)\n| num when num < 90 && num > 35 ->\n(match num mod 2 with\n| 0 -> buildSinCosSq(a, b)\n| 1 -> buildContour(c, d, a)\n| _ -> failwith \"this should have been unreachable :<\"\n)\n| num when num < 35 ->\n(match num mod 6 with\n| 0 -> buildSine(c)\n| 1 -> buildCosine(d)\n| 2 -> buildSinCosSq(a, c)\n| 3 -> buildContour(b, a, c)\n| 4 -> buildX()\n| 5 -> buildY()\n| _ -> failwith \"should be unreachable :<\"\n)\n| num ->\n(match num mod 7 with \n| 0 -> buildThresh(d, c, b, a)\n| 1 -> buildAverage(c, b)\n| 2 -> buildTimes(a, d)\n| 3 -> buildSine(d)\n| 4 -> buildCosine(c)\n| 5 -> buildSinCosSq(b, a)\n| 6 -> buildContour(d, c, c)\n| _ -> failwith \"should be unreachable :<\"\n)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildContour (e1,e2,e3) = ContourFun (e1, e2, e3);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSinCosSq (e1,e2) = SinCosSq (e1, e2);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  match depth with\n  | 0 ->\n      (match rand (0, 1) with\n       | 0 -> buildX ()\n       | 1 -> buildY ()\n       | _ -> failwith \"this should have been unreachable :<\")\n  | _ ->\n      let num = rand (0, 150) in\n      let (a,b,c,d) =\n        ((build (rand, (depth - 1))), (build (rand, (depth - 1))),\n          (build (rand, (depth - 1))), (build (rand, (depth - 1)))) in\n      (match num with\n       | num when depth <= 3 ->\n           (match num with\n            | num when num < 63 ->\n                (match num mod 5 with\n                 | 0 -> buildX ()\n                 | 1 -> buildY ()\n                 | 2 -> buildSinCosSq (c, a)\n                 | 3 -> buildSine b\n                 | 4 -> buildThresh (a, c, d, c)\n                 | _ -> failwith \"should be unreachable :<\")\n            | num ->\n                (match num mod 5 with\n                 | 0 -> buildY ()\n                 | 1 -> buildX ()\n                 | 2 -> buildCosine a\n                 | 3 -> buildAverage (d, b)\n                 | 4 -> buildContour (c, a, d)\n                 | _ -> failwith \"should be unreachable :<\"))\n       | num when num < 15 ->\n           (match num mod 2 with\n            | 0 -> buildX ()\n            | 1 -> buildY ()\n            | _ -> failwith \"should be unreachable :<\")\n       | num when (num < 90) && (num > 35) ->\n           (match num mod 2 with\n            | 0 -> buildSinCosSq (a, b)\n            | 1 -> buildContour (c, d, a)\n            | _ -> failwith \"this should have been unreachable :<\")\n       | num when num < 35 ->\n           (match num mod 6 with\n            | 0 -> buildSine c\n            | 1 -> buildCosine d\n            | 2 -> buildSinCosSq (a, c)\n            | 3 -> buildContour (b, a, c)\n            | 4 -> buildX ()\n            | 5 -> buildY ()\n            | _ -> failwith \"should be unreachable :<\")\n       | num ->\n           (match num mod 7 with\n            | 0 -> buildThresh (d, c, b, a)\n            | 1 -> buildAverage (c, b)\n            | 2 -> buildTimes (a, d)\n            | 3 -> buildSine d\n            | 4 -> buildCosine c\n            | 5 -> buildSinCosSq (b, a)\n            | 6 -> buildContour (d, c, c)\n            | _ -> failwith \"should be unreachable :<\"));;\n","type":"","out":""},{"in":"let g1 () = (9, 6523124, 34167)","min":"\nlet g1 () = (9, 6523124, 34167);;\n","type":"","out":""},{"in":"let g2 () = (10, 210238, 52111)","min":"\nlet g2 () = (10, 210238, 52111);;\n","type":"","out":""},{"in":"let g3 () = (12, 514565, 231148)","min":"\nlet g3 () = (12, 514565, 231148);;\n","type":"","out":""},{"in":"let c1 () = (9, 132167, 64322)","min":"\nlet c1 () = (9, 132167, 64322);;\n","type":"","out":""},{"in":"let c2 () = (12, 11111, 41231)","min":"\nlet c2 () = (12, 11111, 41231);;\n","type":"","out":""},{"in":"let c3 () = (10, 5013731, 873489)","min":"\nlet c3 () = (10, 5013731, 873489);;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rand = makeRand(27, 130)","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet rand = makeRand (27, 130);;\n","type":"","out":""},{"in":"let expr = build(rand, 6)","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildContour (e1,e2,e3) = ContourFun (e1, e2, e3);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSinCosSq (e1,e2) = SinCosSq (e1, e2);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  match depth with\n  | 0 ->\n      (match rand (0, 1) with\n       | 0 -> buildX ()\n       | 1 -> buildY ()\n       | _ -> failwith \"this should have been unreachable :<\")\n  | _ ->\n      let num = rand (0, 150) in\n      let (a,b,c,d) =\n        ((build (rand, (depth - 1))), (build (rand, (depth - 1))),\n          (build (rand, (depth - 1))), (build (rand, (depth - 1)))) in\n      (match num with\n       | num when depth <= 3 ->\n           (match num with\n            | num when num < 63 ->\n                (match num mod 5 with\n                 | 0 -> buildX ()\n                 | 1 -> buildY ()\n                 | 2 -> buildSinCosSq (c, a)\n                 | 3 -> buildSine b\n                 | 4 -> buildThresh (a, c, d, c)\n                 | _ -> failwith \"should be unreachable :<\")\n            | num ->\n                (match num mod 5 with\n                 | 0 -> buildY ()\n                 | 1 -> buildX ()\n                 | 2 -> buildCosine a\n                 | 3 -> buildAverage (d, b)\n                 | 4 -> buildContour (c, a, d)\n                 | _ -> failwith \"should be unreachable :<\"))\n       | num when num < 15 ->\n           (match num mod 2 with\n            | 0 -> buildX ()\n            | 1 -> buildY ()\n            | _ -> failwith \"should be unreachable :<\")\n       | num when (num < 90) && (num > 35) ->\n           (match num mod 2 with\n            | 0 -> buildSinCosSq (a, b)\n            | 1 -> buildContour (c, d, a)\n            | _ -> failwith \"this should have been unreachable :<\")\n       | num when num < 35 ->\n           (match num mod 6 with\n            | 0 -> buildSine c\n            | 1 -> buildCosine d\n            | 2 -> buildSinCosSq (a, c)\n            | 3 -> buildContour (b, a, c)\n            | 4 -> buildX ()\n            | 5 -> buildY ()\n            | _ -> failwith \"should be unreachable :<\")\n       | num ->\n           (match num mod 7 with\n            | 0 -> buildThresh (d, c, b, a)\n            | 1 -> buildAverage (c, b)\n            | 2 -> buildTimes (a, d)\n            | 3 -> buildSine d\n            | 4 -> buildCosine c\n            | 5 -> buildSinCosSq (b, a)\n            | 6 -> buildContour (d, c, c)\n            | _ -> failwith \"should be unreachable :<\"));;\n\nlet rand = makeRand (27, 130);;\n\nlet expr = build (rand, 6);;\n","type":"","out":""},{"in":"let _ = eval(expr, 0.70, 0.45)","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildContour (e1,e2,e3) = ContourFun (e1, e2, e3);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSinCosSq (e1,e2) = SinCosSq (e1, e2);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  match depth with\n  | 0 ->\n      (match rand (0, 1) with\n       | 0 -> buildX ()\n       | 1 -> buildY ()\n       | _ -> failwith \"this should have been unreachable :<\")\n  | _ ->\n      let num = rand (0, 150) in\n      let (a,b,c,d) =\n        ((build (rand, (depth - 1))), (build (rand, (depth - 1))),\n          (build (rand, (depth - 1))), (build (rand, (depth - 1)))) in\n      (match num with\n       | num when depth <= 3 ->\n           (match num with\n            | num when num < 63 ->\n                (match num mod 5 with\n                 | 0 -> buildX ()\n                 | 1 -> buildY ()\n                 | 2 -> buildSinCosSq (c, a)\n                 | 3 -> buildSine b\n                 | 4 -> buildThresh (a, c, d, c)\n                 | _ -> failwith \"should be unreachable :<\")\n            | num ->\n                (match num mod 5 with\n                 | 0 -> buildY ()\n                 | 1 -> buildX ()\n                 | 2 -> buildCosine a\n                 | 3 -> buildAverage (d, b)\n                 | 4 -> buildContour (c, a, d)\n                 | _ -> failwith \"should be unreachable :<\"))\n       | num when num < 15 ->\n           (match num mod 2 with\n            | 0 -> buildX ()\n            | 1 -> buildY ()\n            | _ -> failwith \"should be unreachable :<\")\n       | num when (num < 90) && (num > 35) ->\n           (match num mod 2 with\n            | 0 -> buildSinCosSq (a, b)\n            | 1 -> buildContour (c, d, a)\n            | _ -> failwith \"this should have been unreachable :<\")\n       | num when num < 35 ->\n           (match num mod 6 with\n            | 0 -> buildSine c\n            | 1 -> buildCosine d\n            | 2 -> buildSinCosSq (a, c)\n            | 3 -> buildContour (b, a, c)\n            | 4 -> buildX ()\n            | 5 -> buildY ()\n            | _ -> failwith \"should be unreachable :<\")\n       | num ->\n           (match num mod 7 with\n            | 0 -> buildThresh (d, c, b, a)\n            | 1 -> buildAverage (c, b)\n            | 2 -> buildTimes (a, d)\n            | 3 -> buildSine d\n            | 4 -> buildCosine c\n            | 5 -> buildSinCosSq (b, a)\n            | 6 -> buildContour (d, c, c)\n            | _ -> failwith \"should be unreachable :<\"));;\n\nlet rand = makeRand (27, 130);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet expr = build (rand, 6);;\n\nlet _ = eval (expr, 0.70, 0.45);;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildContour (e1,e2,e3) = ContourFun (e1, e2, e3);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSinCosSq (e1,e2) = SinCosSq (e1, e2);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  match depth with\n  | 0 ->\n      (match rand (0, 1) with\n       | 0 -> buildX ()\n       | 1 -> buildY ()\n       | _ -> failwith \"this should have been unreachable :<\")\n  | _ ->\n      let num = rand (0, 150) in\n      let (a,b,c,d) =\n        ((build (rand, (depth - 1))), (build (rand, (depth - 1))),\n          (build (rand, (depth - 1))), (build (rand, (depth - 1)))) in\n      (match num with\n       | num when depth <= 3 ->\n           (match num with\n            | num when num < 63 ->\n                (match num mod 5 with\n                 | 0 -> buildX ()\n                 | 1 -> buildY ()\n                 | 2 -> buildSinCosSq (c, a)\n                 | 3 -> buildSine b\n                 | 4 -> buildThresh (a, c, d, c)\n                 | _ -> failwith \"should be unreachable :<\")\n            | num ->\n                (match num mod 5 with\n                 | 0 -> buildY ()\n                 | 1 -> buildX ()\n                 | 2 -> buildCosine a\n                 | 3 -> buildAverage (d, b)\n                 | 4 -> buildContour (c, a, d)\n                 | _ -> failwith \"should be unreachable :<\"))\n       | num when num < 15 ->\n           (match num mod 2 with\n            | 0 -> buildX ()\n            | 1 -> buildY ()\n            | _ -> failwith \"should be unreachable :<\")\n       | num when (num < 90) && (num > 35) ->\n           (match num mod 2 with\n            | 0 -> buildSinCosSq (a, b)\n            | 1 -> buildContour (c, d, a)\n            | _ -> failwith \"this should have been unreachable :<\")\n       | num when num < 35 ->\n           (match num mod 6 with\n            | 0 -> buildSine c\n            | 1 -> buildCosine d\n            | 2 -> buildSinCosSq (a, c)\n            | 3 -> buildContour (b, a, c)\n            | 4 -> buildX ()\n            | 5 -> buildY ()\n            | _ -> failwith \"should be unreachable :<\")\n       | num ->\n           (match num mod 7 with\n            | 0 -> buildThresh (d, c, b, a)\n            | 1 -> buildAverage (c, b)\n            | 2 -> buildTimes (a, d)\n            | 3 -> buildSine d\n            | 4 -> buildCosine c\n            | 5 -> buildSinCosSq (b, a)\n            | 6 -> buildContour (d, c, c)\n            | _ -> failwith \"should be unreachable :<\"));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  let rec hlpr e =\n    match e with\n    | VarX  -> \"x\"\n    | VarY  -> \"y\"\n    | Sine expr -> \"sin(pi*\" ^ ((hlpr expr) ^ \")\")\n    | Cosine expr -> \"cos(pi*\" ^ ((hlpr expr) ^ \")\")\n    | SinCosSq (e1,e2) ->\n        \"((sin^2(pi*\" ^ ((hlpr e1) ^ (\")*cos^2(pi*\" ^ ((hlpr e2) ^ \"))/2)\")))\n    | Average (e1,e2) -> \"((\" ^ ((hlpr e1) ^ (\"+\" ^ ((hlpr e2) ^ \")/2)\")))\n    | Times (e1,e2) -> (hlpr e1) ^ (\"*\" ^ (hlpr e2))\n    | Thresh (e1,e2,e3,e4) ->\n        \"(\" ^\n          ((hlpr e1) ^\n             (\"<\" ^\n                ((hlpr e2) ^ (\"?\" ^ ((hlpr e3) ^ (\":\" ^ ((hlpr e4) ^ \")\")))))))\n    | ContourFun (e1,e2,e3) ->\n        let (a,b,c) = ((hlpr e1), (hlpr e2), (hlpr e3)) in\n        \"(abs((cos(pi*\" ^\n          (a ^\n             (\"^2+\" ^\n                (b ^\n                   (\")(sin(pi*\" ^ (a ^ (\"+\" ^ (b ^ (\"^2))))*\" ^ (c ^ \")\"))))))))) in\n  hlpr e;;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildContour (e1,e2,e3) = ContourFun (e1, e2, e3);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSinCosSq (e1,e2) = SinCosSq (e1, e2);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  match depth with\n  | 0 ->\n      (match rand (0, 1) with\n       | 0 -> buildX ()\n       | 1 -> buildY ()\n       | _ -> failwith \"this should have been unreachable :<\")\n  | _ ->\n      let num = rand (0, 150) in\n      let (a,b,c,d) =\n        ((build (rand, (depth - 1))), (build (rand, (depth - 1))),\n          (build (rand, (depth - 1))), (build (rand, (depth - 1)))) in\n      (match num with\n       | num when depth <= 3 ->\n           (match num with\n            | num when num < 63 ->\n                (match num mod 5 with\n                 | 0 -> buildX ()\n                 | 1 -> buildY ()\n                 | 2 -> buildSinCosSq (c, a)\n                 | 3 -> buildSine b\n                 | 4 -> buildThresh (a, c, d, c)\n                 | _ -> failwith \"should be unreachable :<\")\n            | num ->\n                (match num mod 5 with\n                 | 0 -> buildY ()\n                 | 1 -> buildX ()\n                 | 2 -> buildCosine a\n                 | 3 -> buildAverage (d, b)\n                 | 4 -> buildContour (c, a, d)\n                 | _ -> failwith \"should be unreachable :<\"))\n       | num when num < 15 ->\n           (match num mod 2 with\n            | 0 -> buildX ()\n            | 1 -> buildY ()\n            | _ -> failwith \"should be unreachable :<\")\n       | num when (num < 90) && (num > 35) ->\n           (match num mod 2 with\n            | 0 -> buildSinCosSq (a, b)\n            | 1 -> buildContour (c, d, a)\n            | _ -> failwith \"this should have been unreachable :<\")\n       | num when num < 35 ->\n           (match num mod 6 with\n            | 0 -> buildSine c\n            | 1 -> buildCosine d\n            | 2 -> buildSinCosSq (a, c)\n            | 3 -> buildContour (b, a, c)\n            | 4 -> buildX ()\n            | 5 -> buildY ()\n            | _ -> failwith \"should be unreachable :<\")\n       | num ->\n           (match num mod 7 with\n            | 0 -> buildThresh (d, c, b, a)\n            | 1 -> buildAverage (c, b)\n            | 2 -> buildTimes (a, d)\n            | 3 -> buildSine d\n            | 4 -> buildCosine c\n            | 5 -> buildSinCosSq (b, a)\n            | 6 -> buildContour (d, c, c)\n            | _ -> failwith \"should be unreachable :<\"));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  let rec hlpr e =\n    match e with\n    | VarX  -> \"x\"\n    | VarY  -> \"y\"\n    | Sine expr -> \"sin(pi*\" ^ ((hlpr expr) ^ \")\")\n    | Cosine expr -> \"cos(pi*\" ^ ((hlpr expr) ^ \")\")\n    | SinCosSq (e1,e2) ->\n        \"((sin^2(pi*\" ^ ((hlpr e1) ^ (\")*cos^2(pi*\" ^ ((hlpr e2) ^ \"))/2)\")))\n    | Average (e1,e2) -> \"((\" ^ ((hlpr e1) ^ (\"+\" ^ ((hlpr e2) ^ \")/2)\")))\n    | Times (e1,e2) -> (hlpr e1) ^ (\"*\" ^ (hlpr e2))\n    | Thresh (e1,e2,e3,e4) ->\n        \"(\" ^\n          ((hlpr e1) ^\n             (\"<\" ^\n                ((hlpr e2) ^ (\"?\" ^ ((hlpr e3) ^ (\":\" ^ ((hlpr e4) ^ \")\")))))))\n    | ContourFun (e1,e2,e3) ->\n        let (a,b,c) = ((hlpr e1), (hlpr e2), (hlpr e3)) in\n        \"(abs((cos(pi*\" ^\n          (a ^\n             (\"^2+\" ^\n                (b ^\n                   (\")(sin(pi*\" ^ (a ^ (\"+\" ^ (b ^ (\"^2))))*\" ^ (c ^ \")\"))))))))) in\n  hlpr e;;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":0,"stop":18285},"type":"eval"},"cursor":0,"time":1.398285880483381e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | h::t -> let (x, y) = h in\n        if x = k then y\n        else assoc (d, k, t)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' = if List.mem h seen then seen else h::seen in\n          let rest' = t in \n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet rec wwhile (f, b) = let (out, result) = f b in\n    match result with\n      | false -> out\n      | true -> wwhile(f, out)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n\nlet fixpoint (f,b) = \n  let g x = let evaled = f x in (evaled, evaled <> x) in\n    wwhile (g, b)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine        of expr\n    | Cosine      of expr\n    | SinCosSq    of expr * expr\n    | Average     of expr * expr\n    | Times       of expr * expr\n    | Thresh      of expr * expr * expr * expr\t\n    | ContourFun  of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet rec exprToString e = \n  let rec hlpr e = match e with\n    | VarX ->\n        \"x\"\n    | VarY -> \n        \"y\"\n    | Sine expr -> \n        \"sin(pi*\" ^ hlpr expr ^ \")\"\n    | Cosine expr -> \n        \"cos(pi*\" ^ hlpr expr ^ \")\"\n    | SinCosSq (e1, e2) ->\n        \"((sin^2(pi*\" ^ hlpr e1 ^ \")*cos^2(pi*\" ^ hlpr e2 ^ \"))/2)\"\n    | Average (e1,e2) -> \n        \"((\" ^ hlpr e1 ^ \"+\" ^ hlpr e2 ^ \")/2)\"\n    | Times (e1,e2) -> \n        hlpr e1 ^ \"*\" ^ hlpr e2\n    | Thresh (e1,e2,e3,e4) -> \n        \"(\" ^ hlpr e1  ^ \"<\" ^ hlpr e2 ^ \"?\" ^ hlpr e3 ^ \":\" ^ hlpr e4 ^ \")\"\n    | ContourFun (e1, e2, e3) ->\n        let (a, b, c) = (hlpr e1, hlpr e2, hlpr e3) in\n          \"(abs((cos(pi*\" ^ a ^ \"^2+\" ^ b ^ \")(sin(pi*\" ^ a ^ \"+\" ^ b ^ \"^2))))*\" ^\n          c ^ \")\"\n  in \n    hlpr e\n\nlet _ = exprToString sampleExpr1\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildSinCosSq(e1,e2)\t   = SinCosSq(e1, e2)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\nlet buildContour(e1, e2, e3)       = ContourFun(e1, e2, e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX            \n    -> x\n  | VarY            \n    -> y\n  | Sine e'         \n    -> sin (pi *. eval (e', x, y))\n  | Cosine e' \n    -> cos(pi *. eval(e', x, y))\n  | SinCosSq (e1,e2)\n    -> let (a, b) = (pi *. eval(e1, x, y), pi *. eval(e2, x, y)) in\n        ((sin(a)*.sin(a)) +. (cos(b)*.cos(b))) /. 2.0\n  | Average (e1,e2) \n    -> (eval(e1, x, y) +. eval(e2, x, y)) /. 2.0\n  | Times (e1,e2) \n    -> eval(e1, x, y) *. eval(e2, x, y)\n  | Thresh  (a, b, a_less, b_less) \n    -> (match eval (a, x, y) < eval (b, x, y) with\n         | true -> eval (a_less, x, y)\n         | false -> eval (b_less, x, y)\n       )\n  | ContourFun (e1, e2, e3)\n    -> let (a, b, c) = (eval (e1,x,y), eval(e2,x,y), eval(e3,x,y)) in\n        abs_float(cos(pi*.(a**2. +. b)) *. sin(pi*.(a +. b **2.))) *. c\n\n\nlet _ = eval(buildX(), 1.0, 1.0)\nlet _ = eval(buildSine(buildX()), 1.0, 1.0)\nlet _ = eval(buildSine(buildAverage(buildX(), buildY())), 0.3, 0.3)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\n\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand,depth) = match depth with\n  | 0 -> (match rand(0, 1) with \n           | 0 -> buildX() \n           | 1 -> buildY()\n           | _ -> failwith \"this should have been unreachable :<\"\n         )\n  | _ -> \n      let num = rand(0,150) in \n      let (a,b,c,d) = (build(rand, depth-1), build(rand, depth-1), \n                       build(rand, depth-1), build(rand, depth-1)) in\n        match num with\n          | num when depth <= 3->\n              (match num with\n                | num when num < 63 ->\n                    (match num mod 5 with\n                      | 0 -> buildX()\n                      | 1 -> buildY()\n                      | 2 -> buildSinCosSq(c, a)\n                      | 3 -> buildSine(b)\n                      | 4 -> buildThresh(a, c, d, c)\n                      | _ -> failwith \"should be unreachable :<\"\n                    )\n                | num ->\n                    (match num mod 5 with\n                      | 0 -> buildY()\n                      | 1 -> buildX()\n                      | 2 -> buildCosine(a)\n                      | 3 -> buildAverage(d, b)\n                      | 4 -> buildContour(c, a, d)\n                      | _ -> failwith \"should be unreachable :<\"\n                    )\n              )\n          | num when num < 15 ->\n              (match num mod 2 with\n                | 0 -> buildX()\n                | 1 -> buildY()\n                | _ -> failwith \"should be unreachable :<\"\n              )\n          | num when num < 90 && num > 35 ->\n              (match num mod 2 with\n                | 0 -> buildSinCosSq(a, b)\n                | 1 -> buildContour(c, d, a)\n                | _ -> failwith \"this should have been unreachable :<\"\n              )\n          | num when num < 35 ->\n              (match num mod 6 with\n                | 0 -> buildSine(c)\n                | 1 -> buildCosine(d)\n                | 2 -> buildSinCosSq(a, c)\n                | 3 -> buildContour(b, a, c)\n                | 4 -> buildX()\n                | 5 -> buildY()\n                | _ -> failwith \"should be unreachable :<\"\n              )\n          | num ->\n              (match num mod 7 with \n                | 0 -> buildThresh(d, c, b, a)\n                | 1 -> buildAverage(c, b)\n                | 2 -> buildTimes(a, d)\n                | 3 -> buildSine(d)\n                | 4 -> buildCosine(c)\n                | 5 -> buildSinCosSq(b, a)\n                | 6 -> buildContour(d, c, c)\n                | _ -> failwith \"should be unreachable :<\"\n              )\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (9, 6523124, 34167)\nlet g2 () = (10, 210238, 52111)  \nlet g3 () = (12, 514565, 231148)  \n\nlet c1 () = (9, 132167, 64322)\nlet c2 () = (12, 11111, 41231)\nlet c3 () = (10, 5013731, 873489)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\nlet rand = makeRand(27, 130)\nlet expr = build(rand, 6)\nlet _ = eval(expr, 0.70, 0.45)\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n\n","file":"hw2.ml"}
{"ocaml":[{"in":"let rec assoc (d,k,l) = match l with\n| [] -> d\n| h::t -> let (x, y) = h in\nif x = k then y\nelse assoc (d, k, t)","min":"\nlet rec assoc (d,k,l) =\n  match l with\n  | [] -> d\n  | h::t -> let (x,y) = h in if x = k then y else assoc (d, k, t);;\n","type":"","out":""},{"in":"let removeDuplicates l = \nlet rec helper (seen,rest) = \nmatch rest with \n[] -> seen\n| h::t -> \nlet seen' = if List.mem h seen then seen else h::seen in\nlet rest' = t in \nhelper (seen',rest') \nin\nList.rev (helper ([],l))","min":"\nlet removeDuplicates l =\n  let rec helper (seen,rest) =\n    match rest with\n    | [] -> seen\n    | h::t ->\n        let seen' = if List.mem h seen then seen else h :: seen in\n        let rest' = t in helper (seen', rest') in\n  List.rev (helper ([], l));;\n","type":"","out":""},{"in":"let rec wwhile (f, b) = let (out, result) = f b in\nmatch result with\n| false -> out\n| true -> wwhile(f, out)","min":"\nlet rec wwhile (f,b) =\n  let (out,result) = f b in\n  match result with | false  -> out | true  -> wwhile (f, out);;\n","type":"","out":""},{"in":"let fixpoint (f,b) = \nlet g x = let evaled = f x in (evaled, evaled <> x) in\nwwhile (g, b)","min":"\nlet rec wwhile (f,b) =\n  let (out,result) = f b in\n  match result with | false  -> out | true  -> wwhile (f, out);;\n\nlet fixpoint (f,b) =\n  let g x = let evaled = f x in (evaled, (evaled <> x)) in wwhile (g, b);;\n","type":"","out":""},{"in":"type expr = \nVarX\n| VarY\n| Sine        of expr\n| Cosine      of expr\n| SinCosSq    of expr * expr\n| Average     of expr * expr\n| Times       of expr * expr\n| Thresh      of expr * expr * expr * expr\t\n| ContourFun  of expr * expr * expr","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n","type":"","out":""},{"in":"let sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n","type":"","out":""},{"in":"let rec exprToString e = \nlet rec hlpr e = match e with\n| VarX ->\n\"x\"\n| VarY -> \n\"y\"\n| Sine expr -> \n\"sin(pi*\" ^ hlpr expr ^ \")\"\n| Cosine expr -> \n\"cos(pi*\" ^ hlpr expr ^ \")\"\n| SinCosSq (e1, e2) ->\n\"((sin^2(pi*\" ^ hlpr e1 ^ \")*cos^2(pi*\" ^ hlpr e2 ^ \"))/2)\"\n| Average (e1,e2) -> \n\"((\" ^ hlpr e1 ^ \"+\" ^ hlpr e2 ^ \")/2)\"\n| Times (e1,e2) -> \nhlpr e1 ^ \"*\" ^ hlpr e2\n| Thresh (e1,e2,e3,e4) -> \n\"(\" ^ hlpr e1  ^ \"<\" ^ hlpr e2 ^ \"?\" ^ hlpr e3 ^ \":\" ^ hlpr e4 ^ \")\"\n| ContourFun (e1, e2, e3) ->\nlet (a, b, c) = (hlpr e1, hlpr e2, hlpr e3) in\n\"(abs((cos(pi*\" ^ a ^ \"^2+\" ^ b ^ \")(sin(pi*\" ^ a ^ \"+\" ^ b ^ \"^2))))*\" ^\nc ^ \")\"\nin \nhlpr e","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet rec exprToString e =\n  let rec hlpr e =\n    match e with\n    | VarX  -> \"x\"\n    | VarY  -> \"y\"\n    | Sine expr -> \"sin(pi*\" ^ ((hlpr expr) ^ \")\")\n    | Cosine expr -> \"cos(pi*\" ^ ((hlpr expr) ^ \")\")\n    | SinCosSq (e1,e2) ->\n        \"((sin^2(pi*\" ^ ((hlpr e1) ^ (\")*cos^2(pi*\" ^ ((hlpr e2) ^ \"))/2)\")))\n    | Average (e1,e2) -> \"((\" ^ ((hlpr e1) ^ (\"+\" ^ ((hlpr e2) ^ \")/2)\")))\n    | Times (e1,e2) -> (hlpr e1) ^ (\"*\" ^ (hlpr e2))\n    | Thresh (e1,e2,e3,e4) ->\n        \"(\" ^\n          ((hlpr e1) ^\n             (\"<\" ^\n                ((hlpr e2) ^ (\"?\" ^ ((hlpr e3) ^ (\":\" ^ ((hlpr e4) ^ \")\")))))))\n    | ContourFun (e1,e2,e3) ->\n        let (a,b,c) = ((hlpr e1), (hlpr e2), (hlpr e3)) in\n        \"(abs((cos(pi*\" ^\n          (a ^\n             (\"^2+\" ^\n                (b ^\n                   (\")(sin(pi*\" ^ (a ^ (\"+\" ^ (b ^ (\"^2))))*\" ^ (c ^ \")\"))))))))) in\n  hlpr e;;\n","type":"","out":""},{"in":"let _ = exprToString sampleExpr1","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet rec exprToString e =\n  let rec hlpr e =\n    match e with\n    | VarX  -> \"x\"\n    | VarY  -> \"y\"\n    | Sine expr -> \"sin(pi*\" ^ ((hlpr expr) ^ \")\")\n    | Cosine expr -> \"cos(pi*\" ^ ((hlpr expr) ^ \")\")\n    | SinCosSq (e1,e2) ->\n        \"((sin^2(pi*\" ^ ((hlpr e1) ^ (\")*cos^2(pi*\" ^ ((hlpr e2) ^ \"))/2)\")))\n    | Average (e1,e2) -> \"((\" ^ ((hlpr e1) ^ (\"+\" ^ ((hlpr e2) ^ \")/2)\")))\n    | Times (e1,e2) -> (hlpr e1) ^ (\"*\" ^ (hlpr e2))\n    | Thresh (e1,e2,e3,e4) ->\n        \"(\" ^\n          ((hlpr e1) ^\n             (\"<\" ^\n                ((hlpr e2) ^ (\"?\" ^ ((hlpr e3) ^ (\":\" ^ ((hlpr e4) ^ \")\")))))))\n    | ContourFun (e1,e2,e3) ->\n        let (a,b,c) = ((hlpr e1), (hlpr e2), (hlpr e3)) in\n        \"(abs((cos(pi*\" ^\n          (a ^\n             (\"^2+\" ^\n                (b ^\n                   (\")(sin(pi*\" ^ (a ^ (\"+\" ^ (b ^ (\"^2))))*\" ^ (c ^ \")\"))))))))) in\n  hlpr e;;\n\nlet sampleExpr1 =\n  Thresh\n    (VarX, VarY, VarX,\n      (Times ((Sine VarX), (Cosine (Average (VarX, VarY))))));;\n\nlet _ = exprToString sampleExpr1;;\n","type":"","out":""},{"in":"let buildX()                       = VarX","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildX () = VarX;;\n","type":"","out":""},{"in":"let buildY()                       = VarY","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildY () = VarY;;\n","type":"","out":""},{"in":"let buildSine(e)                   = Sine(e)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildSine e = Sine e;;\n","type":"","out":""},{"in":"let buildCosine(e)                 = Cosine(e)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildCosine e = Cosine e;;\n","type":"","out":""},{"in":"let buildSinCosSq(e1,e2)\t   = SinCosSq(e1, e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildSinCosSq (e1,e2) = SinCosSq (e1, e2);;\n","type":"","out":""},{"in":"let buildAverage(e1,e2)            = Average(e1,e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n","type":"","out":""},{"in":"let buildTimes(e1,e2)              = Times(e1,e2)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n","type":"","out":""},{"in":"let buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n","type":"","out":""},{"in":"let buildContour(e1, e2, e3)       = ContourFun(e1, e2, e3)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildContour (e1,e2,e3) = ContourFun (e1, e2, e3);;\n","type":"","out":""},{"in":"let pi = 4.0 *. atan 1.0","min":"\nlet pi = 4.0 *. (atan 1.0);;\n","type":"","out":""},{"in":"let rec eval (e,x,y) = match e with\n| VarX            \n-> x\n| VarY            \n-> y\n| Sine e'         \n-> sin (pi *. eval (e', x, y))\n| Cosine e' \n-> cos(pi *. eval(e', x, y))\n| SinCosSq (e1,e2)\n-> let (a, b) = (pi *. eval(e1, x, y), pi *. eval(e2, x, y)) in\n((sin(a)*.sin(a)) +. (cos(b)*.cos(b))) /. 2.0\n| Average (e1,e2) \n-> (eval(e1, x, y) +. eval(e2, x, y)) /. 2.0\n| Times (e1,e2) \n-> eval(e1, x, y) *. eval(e2, x, y)\n| Thresh  (a, b, a_less, b_less) \n-> (match eval (a, x, y) < eval (b, x, y) with\n| true -> eval (a_less, x, y)\n| false -> eval (b_less, x, y)\n)\n| ContourFun (e1, e2, e3)\n-> let (a, b, c) = (eval (e1,x,y), eval(e2,x,y), eval(e3,x,y)) in\nabs_float(cos(pi*.(a**2. +. b)) *. sin(pi*.(a +. b **2.))) *. c","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n","type":"","out":""},{"in":"let _ = eval(buildX(), 1.0, 1.0)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildX () = VarX;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet _ = eval ((buildX ()), 1.0, 1.0);;\n","type":"","out":""},{"in":"let _ = eval(buildSine(buildX()), 1.0, 1.0)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildSine e = Sine e;;\n\nlet buildX () = VarX;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet _ = eval ((buildSine (buildX ())), 1.0, 1.0);;\n","type":"","out":""},{"in":"let _ = eval(buildSine(buildAverage(buildX(), buildY())), 0.3, 0.3)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildSine e = Sine e;;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet _ =\n  eval ((buildSine (buildAverage ((buildX ()), (buildY ())))), 0.3, 0.3);;\n","type":"","out":""},{"in":"let eval_fn e (x,y) = \nlet rv = eval (e,x,y) in\nassert (-1.0 <= rv && rv <= 1.0);\nrv","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n","type":"","out":""},{"in":"let sampleExpr =\nbuildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\nbuildX()),buildTimes(buildCosine (buildCosine (buildAverage\n(buildTimes (buildY(),buildY()),buildCosine (buildX())))),\nbuildCosine (buildTimes (buildSine (buildCosine\n(buildY())),buildAverage (buildSine (buildX()), buildTimes\n(buildX(),buildX()))))))),buildY())))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet sampleExpr =\n  buildCosine\n    (buildSine\n       (buildTimes\n          ((buildCosine\n              (buildAverage\n                 ((buildCosine (buildX ())),\n                   (buildTimes\n                      ((buildCosine\n                          (buildCosine\n                             (buildAverage\n                                ((buildTimes ((buildY ()), (buildY ()))),\n                                  (buildCosine (buildX ())))))),\n                        (buildCosine\n                           (buildTimes\n                              ((buildSine (buildCosine (buildY ()))),\n                                (buildAverage\n                                   ((buildSine (buildX ())),\n                                     (buildTimes ((buildX ()), (buildX ()))))))))))))),\n            (buildY ()))));;\n","type":"","out":""},{"in":"let sampleExpr2 =\nbuildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet sampleExpr2 =\n  buildThresh\n    ((buildX ()), (buildY ()), (buildSine (buildX ())),\n      (buildCosine (buildY ())));;\n","type":"","out":""},{"in":"let rec build (rand,depth) = match depth with\n| 0 -> (match rand(0, 1) with \n| 0 -> buildX() \n| 1 -> buildY()\n| _ -> failwith \"this should have been unreachable :<\"\n)\n| _ -> \nlet num = rand(0,150) in \nlet (a,b,c,d) = (build(rand, depth-1), build(rand, depth-1), \nbuild(rand, depth-1), build(rand, depth-1)) in\nmatch num with\n| num when depth <= 3->\n(match num with\n| num when num < 63 ->\n(match num mod 5 with\n| 0 -> buildX()\n| 1 -> buildY()\n| 2 -> buildSinCosSq(c, a)\n| 3 -> buildSine(b)\n| 4 -> buildThresh(a, c, d, c)\n| _ -> failwith \"should be unreachable :<\"\n)\n| num ->\n(match num mod 5 with\n| 0 -> buildY()\n| 1 -> buildX()\n| 2 -> buildCosine(a)\n| 3 -> buildAverage(d, b)\n| 4 -> buildContour(c, a, d)\n| _ -> failwith \"should be unreachable :<\"\n)\n)\n| num when num < 15 ->\n(match num mod 2 with\n| 0 -> buildX()\n| 1 -> buildY()\n| _ -> failwith \"should be unreachable :<\"\n)\n| num when num < 90 && num > 35 ->\n(match num mod 2 with\n| 0 -> buildSinCosSq(a, b)\n| 1 -> buildContour(c, d, a)\n| _ -> failwith \"this should have been unreachable :<\"\n)\n| num when num < 35 ->\n(match num mod 6 with\n| 0 -> buildSine(c)\n| 1 -> buildCosine(d)\n| 2 -> buildSinCosSq(a, c)\n| 3 -> buildContour(b, a, c)\n| 4 -> buildX()\n| 5 -> buildY()\n| _ -> failwith \"should be unreachable :<\"\n)\n| num ->\n(match num mod 7 with \n| 0 -> buildThresh(d, c, b, a)\n| 1 -> buildAverage(c, b)\n| 2 -> buildTimes(a, d)\n| 3 -> buildSine(d)\n| 4 -> buildCosine(c)\n| 5 -> buildSinCosSq(b, a)\n| 6 -> buildContour(d, c, c)\n| _ -> failwith \"should be unreachable :<\"\n)","min":"\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildContour (e1,e2,e3) = ContourFun (e1, e2, e3);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSinCosSq (e1,e2) = SinCosSq (e1, e2);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  match depth with\n  | 0 ->\n      (match rand (0, 1) with\n       | 0 -> buildX ()\n       | 1 -> buildY ()\n       | _ -> failwith \"this should have been unreachable :<\")\n  | _ ->\n      let num = rand (0, 150) in\n      let (a,b,c,d) =\n        ((build (rand, (depth - 1))), (build (rand, (depth - 1))),\n          (build (rand, (depth - 1))), (build (rand, (depth - 1)))) in\n      (match num with\n       | num when depth <= 3 ->\n           (match num with\n            | num when num < 63 ->\n                (match num mod 5 with\n                 | 0 -> buildX ()\n                 | 1 -> buildY ()\n                 | 2 -> buildSinCosSq (c, a)\n                 | 3 -> buildSine b\n                 | 4 -> buildThresh (a, c, d, c)\n                 | _ -> failwith \"should be unreachable :<\")\n            | num ->\n                (match num mod 5 with\n                 | 0 -> buildY ()\n                 | 1 -> buildX ()\n                 | 2 -> buildCosine a\n                 | 3 -> buildAverage (d, b)\n                 | 4 -> buildContour (c, a, d)\n                 | _ -> failwith \"should be unreachable :<\"))\n       | num when num < 15 ->\n           (match num mod 2 with\n            | 0 -> buildX ()\n            | 1 -> buildY ()\n            | _ -> failwith \"should be unreachable :<\")\n       | num when (num < 90) && (num > 35) ->\n           (match num mod 2 with\n            | 0 -> buildSinCosSq (a, b)\n            | 1 -> buildContour (c, d, a)\n            | _ -> failwith \"this should have been unreachable :<\")\n       | num when num < 35 ->\n           (match num mod 6 with\n            | 0 -> buildSine c\n            | 1 -> buildCosine d\n            | 2 -> buildSinCosSq (a, c)\n            | 3 -> buildContour (b, a, c)\n            | 4 -> buildX ()\n            | 5 -> buildY ()\n            | _ -> failwith \"should be unreachable :<\")\n       | num ->\n           (match num mod 7 with\n            | 0 -> buildThresh (d, c, b, a)\n            | 1 -> buildAverage (c, b)\n            | 2 -> buildTimes (a, d)\n            | 3 -> buildSine d\n            | 4 -> buildCosine c\n            | 5 -> buildSinCosSq (b, a)\n            | 6 -> buildContour (d, c, c)\n            | _ -> failwith \"should be unreachable :<\"));;\n","type":"","out":""},{"in":"let g1 () = (9, 6523124, 34167)","min":"\nlet g1 () = (9, 6523124, 34167);;\n","type":"","out":""},{"in":"let g2 () = (10, 210238, 52111)","min":"\nlet g2 () = (10, 210238, 52111);;\n","type":"","out":""},{"in":"let g3 () = (12, 514565, 231148)","min":"\nlet g3 () = (12, 514565, 231148);;\n","type":"","out":""},{"in":"let c1 () = (9, 132167, 64322)","min":"\nlet c1 () = (9, 132167, 64322);;\n","type":"","out":""},{"in":"let c2 () = (12, 11111, 41231)","min":"\nlet c2 () = (12, 11111, 41231);;\n","type":"","out":""},{"in":"let c3 () = (10, 5013731, 873489)","min":"\nlet c3 () = (10, 5013731, 873489);;\n","type":"","out":""},{"in":"let makeRand (seed1, seed2) = \nlet seed = (Array.of_list [seed1;seed2]) in\nlet s = Random.State.make seed in\n(fun (x,y) -> (x + (Random.State.int s (y-x))))","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n","type":"","out":""},{"in":"let rand = makeRand(27, 130)","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet rand = makeRand (27, 130);;\n","type":"","out":""},{"in":"let expr = build(rand, 6)","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildContour (e1,e2,e3) = ContourFun (e1, e2, e3);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSinCosSq (e1,e2) = SinCosSq (e1, e2);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  match depth with\n  | 0 ->\n      (match rand (0, 1) with\n       | 0 -> buildX ()\n       | 1 -> buildY ()\n       | _ -> failwith \"this should have been unreachable :<\")\n  | _ ->\n      let num = rand (0, 150) in\n      let (a,b,c,d) =\n        ((build (rand, (depth - 1))), (build (rand, (depth - 1))),\n          (build (rand, (depth - 1))), (build (rand, (depth - 1)))) in\n      (match num with\n       | num when depth <= 3 ->\n           (match num with\n            | num when num < 63 ->\n                (match num mod 5 with\n                 | 0 -> buildX ()\n                 | 1 -> buildY ()\n                 | 2 -> buildSinCosSq (c, a)\n                 | 3 -> buildSine b\n                 | 4 -> buildThresh (a, c, d, c)\n                 | _ -> failwith \"should be unreachable :<\")\n            | num ->\n                (match num mod 5 with\n                 | 0 -> buildY ()\n                 | 1 -> buildX ()\n                 | 2 -> buildCosine a\n                 | 3 -> buildAverage (d, b)\n                 | 4 -> buildContour (c, a, d)\n                 | _ -> failwith \"should be unreachable :<\"))\n       | num when num < 15 ->\n           (match num mod 2 with\n            | 0 -> buildX ()\n            | 1 -> buildY ()\n            | _ -> failwith \"should be unreachable :<\")\n       | num when (num < 90) && (num > 35) ->\n           (match num mod 2 with\n            | 0 -> buildSinCosSq (a, b)\n            | 1 -> buildContour (c, d, a)\n            | _ -> failwith \"this should have been unreachable :<\")\n       | num when num < 35 ->\n           (match num mod 6 with\n            | 0 -> buildSine c\n            | 1 -> buildCosine d\n            | 2 -> buildSinCosSq (a, c)\n            | 3 -> buildContour (b, a, c)\n            | 4 -> buildX ()\n            | 5 -> buildY ()\n            | _ -> failwith \"should be unreachable :<\")\n       | num ->\n           (match num mod 7 with\n            | 0 -> buildThresh (d, c, b, a)\n            | 1 -> buildAverage (c, b)\n            | 2 -> buildTimes (a, d)\n            | 3 -> buildSine d\n            | 4 -> buildCosine c\n            | 5 -> buildSinCosSq (b, a)\n            | 6 -> buildContour (d, c, c)\n            | _ -> failwith \"should be unreachable :<\"));;\n\nlet rand = makeRand (27, 130);;\n\nlet expr = build (rand, 6);;\n","type":"","out":""},{"in":"let _ = eval(expr, 0.70, 0.45)","min":"\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildContour (e1,e2,e3) = ContourFun (e1, e2, e3);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSinCosSq (e1,e2) = SinCosSq (e1, e2);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  match depth with\n  | 0 ->\n      (match rand (0, 1) with\n       | 0 -> buildX ()\n       | 1 -> buildY ()\n       | _ -> failwith \"this should have been unreachable :<\")\n  | _ ->\n      let num = rand (0, 150) in\n      let (a,b,c,d) =\n        ((build (rand, (depth - 1))), (build (rand, (depth - 1))),\n          (build (rand, (depth - 1))), (build (rand, (depth - 1)))) in\n      (match num with\n       | num when depth <= 3 ->\n           (match num with\n            | num when num < 63 ->\n                (match num mod 5 with\n                 | 0 -> buildX ()\n                 | 1 -> buildY ()\n                 | 2 -> buildSinCosSq (c, a)\n                 | 3 -> buildSine b\n                 | 4 -> buildThresh (a, c, d, c)\n                 | _ -> failwith \"should be unreachable :<\")\n            | num ->\n                (match num mod 5 with\n                 | 0 -> buildY ()\n                 | 1 -> buildX ()\n                 | 2 -> buildCosine a\n                 | 3 -> buildAverage (d, b)\n                 | 4 -> buildContour (c, a, d)\n                 | _ -> failwith \"should be unreachable :<\"))\n       | num when num < 15 ->\n           (match num mod 2 with\n            | 0 -> buildX ()\n            | 1 -> buildY ()\n            | _ -> failwith \"should be unreachable :<\")\n       | num when (num < 90) && (num > 35) ->\n           (match num mod 2 with\n            | 0 -> buildSinCosSq (a, b)\n            | 1 -> buildContour (c, d, a)\n            | _ -> failwith \"this should have been unreachable :<\")\n       | num when num < 35 ->\n           (match num mod 6 with\n            | 0 -> buildSine c\n            | 1 -> buildCosine d\n            | 2 -> buildSinCosSq (a, c)\n            | 3 -> buildContour (b, a, c)\n            | 4 -> buildX ()\n            | 5 -> buildY ()\n            | _ -> failwith \"should be unreachable :<\")\n       | num ->\n           (match num mod 7 with\n            | 0 -> buildThresh (d, c, b, a)\n            | 1 -> buildAverage (c, b)\n            | 2 -> buildTimes (a, d)\n            | 3 -> buildSine d\n            | 4 -> buildCosine c\n            | 5 -> buildSinCosSq (b, a)\n            | 6 -> buildContour (d, c, c)\n            | _ -> failwith \"should be unreachable :<\"));;\n\nlet rand = makeRand (27, 130);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet expr = build (rand, 6);;\n\nlet _ = eval (expr, 0.70, 0.45);;\n","type":"","out":""},{"in":"let rec rseq g r n =\nif n <= 0 then [] else (g r)::(rseq g r (n-1))","min":"\nlet rec rseq g r n = if n <= 0 then [] else (g r) :: (rseq g r (n - 1));;\n","type":"","out":""},{"in":"let toReal (i,n) = (float_of_int i) /. (float_of_int n)","min":"\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n","type":"","out":""},{"in":"let toIntensity z = int_of_float (127.5 +. (127.5 *. z))","min":"\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n","type":"","out":""},{"in":"let rec ffor (low,high,f) = \nif low > high then () else \nlet _ = f low in \nffor (low+1,high,f)","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n","type":"","out":""},{"in":"let emitGrayscale (f,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_g_\"^name) in\nlet chan = open_out (fname^\".pgm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z = f (x,y) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz = toIntensity(z) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz))) in \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".pgm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n","type":"","out":""},{"in":"let doRandomGray (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand(seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e = build (g,depth) in\nlet _ = print_string (exprToString e) in\nlet f = eval_fn e in\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitGrayscale (f,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildContour (e1,e2,e3) = ContourFun (e1, e2, e3);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSinCosSq (e1,e2) = SinCosSq (e1, e2);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  match depth with\n  | 0 ->\n      (match rand (0, 1) with\n       | 0 -> buildX ()\n       | 1 -> buildY ()\n       | _ -> failwith \"this should have been unreachable :<\")\n  | _ ->\n      let num = rand (0, 150) in\n      let (a,b,c,d) =\n        ((build (rand, (depth - 1))), (build (rand, (depth - 1))),\n          (build (rand, (depth - 1))), (build (rand, (depth - 1)))) in\n      (match num with\n       | num when depth <= 3 ->\n           (match num with\n            | num when num < 63 ->\n                (match num mod 5 with\n                 | 0 -> buildX ()\n                 | 1 -> buildY ()\n                 | 2 -> buildSinCosSq (c, a)\n                 | 3 -> buildSine b\n                 | 4 -> buildThresh (a, c, d, c)\n                 | _ -> failwith \"should be unreachable :<\")\n            | num ->\n                (match num mod 5 with\n                 | 0 -> buildY ()\n                 | 1 -> buildX ()\n                 | 2 -> buildCosine a\n                 | 3 -> buildAverage (d, b)\n                 | 4 -> buildContour (c, a, d)\n                 | _ -> failwith \"should be unreachable :<\"))\n       | num when num < 15 ->\n           (match num mod 2 with\n            | 0 -> buildX ()\n            | 1 -> buildY ()\n            | _ -> failwith \"should be unreachable :<\")\n       | num when (num < 90) && (num > 35) ->\n           (match num mod 2 with\n            | 0 -> buildSinCosSq (a, b)\n            | 1 -> buildContour (c, d, a)\n            | _ -> failwith \"this should have been unreachable :<\")\n       | num when num < 35 ->\n           (match num mod 6 with\n            | 0 -> buildSine c\n            | 1 -> buildCosine d\n            | 2 -> buildSinCosSq (a, c)\n            | 3 -> buildContour (b, a, c)\n            | 4 -> buildX ()\n            | 5 -> buildY ()\n            | _ -> failwith \"should be unreachable :<\")\n       | num ->\n           (match num mod 7 with\n            | 0 -> buildThresh (d, c, b, a)\n            | 1 -> buildAverage (c, b)\n            | 2 -> buildTimes (a, d)\n            | 3 -> buildSine d\n            | 4 -> buildCosine c\n            | 5 -> buildSinCosSq (b, a)\n            | 6 -> buildContour (d, c, c)\n            | _ -> failwith \"should be unreachable :<\"));;\n\nlet emitGrayscale (f,n,name) =\n  let fname = \"art_g_\" ^ name in\n  let chan = open_out (fname ^ \".pgm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z = f (x, y) in\n                  let iz = toIntensity z in output_char chan (char_of_int iz))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".pgm \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".pgm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  let rec hlpr e =\n    match e with\n    | VarX  -> \"x\"\n    | VarY  -> \"y\"\n    | Sine expr -> \"sin(pi*\" ^ ((hlpr expr) ^ \")\")\n    | Cosine expr -> \"cos(pi*\" ^ ((hlpr expr) ^ \")\")\n    | SinCosSq (e1,e2) ->\n        \"((sin^2(pi*\" ^ ((hlpr e1) ^ (\")*cos^2(pi*\" ^ ((hlpr e2) ^ \"))/2)\")))\n    | Average (e1,e2) -> \"((\" ^ ((hlpr e1) ^ (\"+\" ^ ((hlpr e2) ^ \")/2)\")))\n    | Times (e1,e2) -> (hlpr e1) ^ (\"*\" ^ (hlpr e2))\n    | Thresh (e1,e2,e3,e4) ->\n        \"(\" ^\n          ((hlpr e1) ^\n             (\"<\" ^\n                ((hlpr e2) ^ (\"?\" ^ ((hlpr e3) ^ (\":\" ^ ((hlpr e4) ^ \")\")))))))\n    | ContourFun (e1,e2,e3) ->\n        let (a,b,c) = ((hlpr e1), (hlpr e2), (hlpr e3)) in\n        \"(abs((cos(pi*\" ^\n          (a ^\n             (\"^2+\" ^\n                (b ^\n                   (\")(sin(pi*\" ^ (a ^ (\"+\" ^ (b ^ (\"^2))))*\" ^ (c ^ \")\"))))))))) in\n  hlpr e;;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomGray (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e = build (g, depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitGrayscale (f, n, name);;\n","type":"","out":""},{"in":"let emitColor (f1,f2,f3,n,name) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet fname  = (\"art_c_\"^name) in\nlet chan = open_out (fname^\".ppm\") in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet n2p1 = n*2+1 in   \nlet _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\nlet _ = \nffor (-n, n, \nfun ix ->\nffor (-n, n, \nfun iy ->\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet x = toReal(ix,n) in\nlet y = toReal(iy,n) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet z1 = f1 (x,y) in\nlet z2 = f2 (x,y) in\nlet z3 = f3 (x,y) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet iz1 = toIntensity(z1) in\nlet iz2 = toIntensity(z2) in\nlet iz3 = toIntensity(z3) in\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\noutput_char chan (char_of_int iz1);\noutput_char chan (char_of_int iz2);\noutput_char chan (char_of_int iz3);\n)) in  \nclose_out chan;\nignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\nignore(Sys.command (\"rm \"^fname^\".ppm\"))","min":"\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n","type":"","out":""},{"in":"let doRandomColor (depth,seed1,seed2) =\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet g = makeRand (seed1,seed2) in\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet e1 = build (g, depth) in\nlet e2 = build (g, depth) in\nlet e3 = build (g, depth) in\n\nlet _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\nlet _ = Format.printf \"green = %s \\n\" (exprToString e2) in\nlet _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\nlet f1 = eval_fn e1 in\nlet f2 = eval_fn e2 in\nlet f3 = eval_fn e3 in\n\n(*XXXXXXXXXXXXXXXXXX*)\nlet n = 150 in\n(*XXXXXXXXXXXXXXXXXX*)\nlet name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\nemitColor (f1,f2,f3,n,name)","min":"\nlet pi = 4.0 *. (atan 1.0);;\n\nlet rec eval (e,x,y) =\n  match e with\n  | VarX  -> x\n  | VarY  -> y\n  | Sine e' -> sin (pi *. (eval (e', x, y)))\n  | Cosine e' -> cos (pi *. (eval (e', x, y)))\n  | SinCosSq (e1,e2) ->\n      let (a,b) = ((pi *. (eval (e1, x, y))), (pi *. (eval (e2, x, y)))) in\n      (((sin a) *. (sin a)) +. ((cos b) *. (cos b))) /. 2.0\n  | Average (e1,e2) -> ((eval (e1, x, y)) +. (eval (e2, x, y))) /. 2.0\n  | Times (e1,e2) -> (eval (e1, x, y)) *. (eval (e2, x, y))\n  | Thresh (a,b,a_less,b_less) ->\n      (match (eval (a, x, y)) < (eval (b, x, y)) with\n       | true  -> eval (a_less, x, y)\n       | false  -> eval (b_less, x, y))\n  | ContourFun (e1,e2,e3) ->\n      let (a,b,c) = ((eval (e1, x, y)), (eval (e2, x, y)), (eval (e3, x, y))) in\n      (abs_float\n         ((cos (pi *. ((a ** 2.) +. b))) *. (sin (pi *. (a +. (b ** 2.))))))\n        *. c;;\n\nlet rec ffor (low,high,f) =\n  if low > high then () else (let _ = f low in ffor ((low + 1), high, f));;\n\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z));;\n\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n);;\n\ntype expr =\n  | VarX\n  | VarY\n  | Sine of expr\n  | Cosine of expr\n  | SinCosSq of expr* expr\n  | Average of expr* expr\n  | Times of expr* expr\n  | Thresh of expr* expr* expr* expr\n  | ContourFun of expr* expr* expr;;\n\nlet buildAverage (e1,e2) = Average (e1, e2);;\n\nlet buildContour (e1,e2,e3) = ContourFun (e1, e2, e3);;\n\nlet buildCosine e = Cosine e;;\n\nlet buildSinCosSq (e1,e2) = SinCosSq (e1, e2);;\n\nlet buildSine e = Sine e;;\n\nlet buildThresh (a,b,a_less,b_less) = Thresh (a, b, a_less, b_less);;\n\nlet buildTimes (e1,e2) = Times (e1, e2);;\n\nlet buildX () = VarX;;\n\nlet buildY () = VarY;;\n\nlet rec build (rand,depth) =\n  match depth with\n  | 0 ->\n      (match rand (0, 1) with\n       | 0 -> buildX ()\n       | 1 -> buildY ()\n       | _ -> failwith \"this should have been unreachable :<\")\n  | _ ->\n      let num = rand (0, 150) in\n      let (a,b,c,d) =\n        ((build (rand, (depth - 1))), (build (rand, (depth - 1))),\n          (build (rand, (depth - 1))), (build (rand, (depth - 1)))) in\n      (match num with\n       | num when depth <= 3 ->\n           (match num with\n            | num when num < 63 ->\n                (match num mod 5 with\n                 | 0 -> buildX ()\n                 | 1 -> buildY ()\n                 | 2 -> buildSinCosSq (c, a)\n                 | 3 -> buildSine b\n                 | 4 -> buildThresh (a, c, d, c)\n                 | _ -> failwith \"should be unreachable :<\")\n            | num ->\n                (match num mod 5 with\n                 | 0 -> buildY ()\n                 | 1 -> buildX ()\n                 | 2 -> buildCosine a\n                 | 3 -> buildAverage (d, b)\n                 | 4 -> buildContour (c, a, d)\n                 | _ -> failwith \"should be unreachable :<\"))\n       | num when num < 15 ->\n           (match num mod 2 with\n            | 0 -> buildX ()\n            | 1 -> buildY ()\n            | _ -> failwith \"should be unreachable :<\")\n       | num when (num < 90) && (num > 35) ->\n           (match num mod 2 with\n            | 0 -> buildSinCosSq (a, b)\n            | 1 -> buildContour (c, d, a)\n            | _ -> failwith \"this should have been unreachable :<\")\n       | num when num < 35 ->\n           (match num mod 6 with\n            | 0 -> buildSine c\n            | 1 -> buildCosine d\n            | 2 -> buildSinCosSq (a, c)\n            | 3 -> buildContour (b, a, c)\n            | 4 -> buildX ()\n            | 5 -> buildY ()\n            | _ -> failwith \"should be unreachable :<\")\n       | num ->\n           (match num mod 7 with\n            | 0 -> buildThresh (d, c, b, a)\n            | 1 -> buildAverage (c, b)\n            | 2 -> buildTimes (a, d)\n            | 3 -> buildSine d\n            | 4 -> buildCosine c\n            | 5 -> buildSinCosSq (b, a)\n            | 6 -> buildContour (d, c, c)\n            | _ -> failwith \"should be unreachable :<\"));;\n\nlet emitColor (f1,f2,f3,n,name) =\n  let fname = \"art_c_\" ^ name in\n  let chan = open_out (fname ^ \".ppm\") in\n  let n2p1 = (n * 2) + 1 in\n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ =\n    ffor\n      ((- n), n,\n        (fun ix  ->\n           ffor\n             ((- n), n,\n               (fun iy  ->\n                  let x = toReal (ix, n) in\n                  let y = toReal (iy, n) in\n                  let z1 = f1 (x, y) in\n                  let z2 = f2 (x, y) in\n                  let z3 = f3 (x, y) in\n                  let iz1 = toIntensity z1 in\n                  let iz2 = toIntensity z2 in\n                  let iz3 = toIntensity z3 in\n                  output_char chan (char_of_int iz1);\n                  output_char chan (char_of_int iz2);\n                  output_char chan (char_of_int iz3))))) in\n  close_out chan;\n  ignore (Sys.command (\"convert \" ^ (fname ^ (\".ppm  \" ^ (fname ^ \".jpg\")))));\n  ignore (Sys.command (\"rm \" ^ (fname ^ \".ppm\")));;\n\nlet eval_fn e (x,y) =\n  let rv = eval (e, x, y) in assert (((-1.0) <= rv) && (rv <= 1.0)); rv;;\n\nlet rec exprToString e =\n  let rec hlpr e =\n    match e with\n    | VarX  -> \"x\"\n    | VarY  -> \"y\"\n    | Sine expr -> \"sin(pi*\" ^ ((hlpr expr) ^ \")\")\n    | Cosine expr -> \"cos(pi*\" ^ ((hlpr expr) ^ \")\")\n    | SinCosSq (e1,e2) ->\n        \"((sin^2(pi*\" ^ ((hlpr e1) ^ (\")*cos^2(pi*\" ^ ((hlpr e2) ^ \"))/2)\")))\n    | Average (e1,e2) -> \"((\" ^ ((hlpr e1) ^ (\"+\" ^ ((hlpr e2) ^ \")/2)\")))\n    | Times (e1,e2) -> (hlpr e1) ^ (\"*\" ^ (hlpr e2))\n    | Thresh (e1,e2,e3,e4) ->\n        \"(\" ^\n          ((hlpr e1) ^\n             (\"<\" ^\n                ((hlpr e2) ^ (\"?\" ^ ((hlpr e3) ^ (\":\" ^ ((hlpr e4) ^ \")\")))))))\n    | ContourFun (e1,e2,e3) ->\n        let (a,b,c) = ((hlpr e1), (hlpr e2), (hlpr e3)) in\n        \"(abs((cos(pi*\" ^\n          (a ^\n             (\"^2+\" ^\n                (b ^\n                   (\")(sin(pi*\" ^ (a ^ (\"+\" ^ (b ^ (\"^2))))*\" ^ (c ^ \")\"))))))))) in\n  hlpr e;;\n\nlet makeRand (seed1,seed2) =\n  let seed = Array.of_list [seed1; seed2] in\n  let s = Random.State.make seed in\n  fun (x,y)  -> x + (Random.State.int s (y - x));;\n\nlet doRandomColor (depth,seed1,seed2) =\n  let g = makeRand (seed1, seed2) in\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n  let n = 150 in\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n  emitColor (f1, f2, f3, n, name);;\n","type":"","out":""},{"in":"type test = unit -> string","min":"\ntype test = unit -> string;;\n","type":"","out":""},{"in":"let key = \"\"","min":"\nlet key = \"\";;\n","type":"","out":""},{"in":"let prefix130 = \"130\"","min":"\nlet prefix130 = \"130\";;\n","type":"","out":""},{"in":"let print130 s = print_string (prefix130^\">>\"^s)","min":"\nlet prefix130 = \"130\";;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n","type":"","out":""},{"in":"exception ErrorCode of string","min":"\nexception ErrorCode of string;;\n","type":"","out":""},{"in":"type result = Pass | Fail | ErrorCode of string","min":"\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n","type":"","out":""},{"in":"let score = ref 0","min":"\nlet score = ref 0;;\n","type":"","out":""},{"in":"let max = ref 0","min":"\nlet max = ref 0;;\n","type":"","out":""},{"in":"let timeout = 300","min":"\nlet timeout = 300;;\n","type":"","out":""},{"in":"let runWTimeout (f,arg,out,time) = \ntry if compare (f arg) out = 0 then Pass else Fail\nwith e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\")","min":"\nlet prefix130 = \"130\";;\n\ntype result =\n  | Pass\n  | Fail\n  | ErrorCode of string;;\n\nlet print130 s = print_string (prefix130 ^ (\">>\" ^ s));;\n\nlet runWTimeout (f,arg,out,time) =\n  try if (compare (f arg) out) = 0 then Pass else Fail\n  with\n  | e ->\n      (print130 (\"Uncaught Exception: \" ^ (Printexc.to_string e));\n       ErrorCode \"exception\");;\n","type":"","out":""},{"in":"let explode s = \nlet rec _exp i = \nif i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n_exp 0","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n","type":"","out":""},{"in":"let implode cs = \nString.concat \"\" (List.map (String.make 1) cs)","min":"\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n","type":"","out":""},{"in":"let drop_paren s = \nimplode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))","min":"\nlet explode s =\n  let rec _exp i =\n    if i >= (String.length s) then [] else (s.[i]) :: (_exp (i + 1)) in\n  _exp 0;;\n\nlet implode cs = String.concat \"\" (List.map (String.make 1) cs);;\n\nlet drop_paren s =\n  implode\n    (List.filter (fun c  -> not (List.mem c ['('; ' '; ')'])) (explode s));;\n","type":"","out":""},{"in":"let eq_real p (r1,r2) = \n(r1 -. r2) < p || (r2 -. r1) < p","min":"\nlet eq_real p (r1,r2) = ((r1 -. r2) < p) || ((r2 -. r1) < p);;\n","type":"","out":""},{"in":"let scoreMsg () = \nFormat.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max","min":"\nlet max = ref 0;;\n\nlet score = ref 0;;\n\nlet scoreMsg () =\n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" (!score) (!max);;\n","type":"","out":""}],"event":{"region":{"start":0,"stop":18285},"type":"eval"},"cursor":0,"time":1.398320969152646e9,"body":"(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec assoc (d,k,l) = match l with\n  | [] -> d\n  | h::t -> let (x, y) = h in\n        if x = k then y\n        else assoc (d, k, t)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet removeDuplicates l = \n  let rec helper (seen,rest) = \n    match rest with \n        [] -> seen\n      | h::t -> \n          let seen' = if List.mem h seen then seen else h::seen in\n          let rest' = t in \n            helper (seen',rest') \n  in\n    List.rev (helper ([],l))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n\nlet rec wwhile (f, b) = let (out, result) = f b in\n    match result with\n      | false -> out\n      | true -> wwhile(f, out)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n\nlet fixpoint (f,b) = \n  let g x = let evaled = f x in (evaled, evaled <> x) in\n    wwhile (g, b)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*) \n\ntype expr = \n      VarX\n    | VarY\n    | Sine        of expr\n    | Cosine      of expr\n    | SinCosSq    of expr * expr\n    | Average     of expr * expr\n    | Times       of expr * expr\n    | Thresh      of expr * expr * expr * expr\t\n    | ContourFun  of expr * expr * expr\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet sampleExpr1 = Thresh(VarX,VarY,VarX,(Times(Sine(VarX),Cosine(Average(VarX,VarY)))));;\n\nlet rec exprToString e = \n  let rec hlpr e = match e with\n    | VarX ->\n        \"x\"\n    | VarY -> \n        \"y\"\n    | Sine expr -> \n        \"sin(pi*\" ^ hlpr expr ^ \")\"\n    | Cosine expr -> \n        \"cos(pi*\" ^ hlpr expr ^ \")\"\n    | SinCosSq (e1, e2) ->\n        \"((sin^2(pi*\" ^ hlpr e1 ^ \")*cos^2(pi*\" ^ hlpr e2 ^ \"))/2)\"\n    | Average (e1,e2) -> \n        \"((\" ^ hlpr e1 ^ \"+\" ^ hlpr e2 ^ \")/2)\"\n    | Times (e1,e2) -> \n        hlpr e1 ^ \"*\" ^ hlpr e2\n    | Thresh (e1,e2,e3,e4) -> \n        \"(\" ^ hlpr e1  ^ \"<\" ^ hlpr e2 ^ \"?\" ^ hlpr e3 ^ \":\" ^ hlpr e4 ^ \")\"\n    | ContourFun (e1, e2, e3) ->\n        let (a, b, c) = (hlpr e1, hlpr e2, hlpr e3) in\n          \"(abs((cos(pi*\" ^ a ^ \"^2+\" ^ b ^ \")(sin(pi*\" ^ a ^ \"+\" ^ b ^ \"^2))))*\" ^\n          c ^ \")\"\n  in \n    hlpr e\n\nlet _ = exprToString sampleExpr1\n(*XXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet buildX()                       = VarX\nlet buildY()                       = VarY\nlet buildSine(e)                   = Sine(e)\nlet buildCosine(e)                 = Cosine(e)\nlet buildSinCosSq(e1,e2)\t   = SinCosSq(e1, e2)\nlet buildAverage(e1,e2)            = Average(e1,e2)\nlet buildTimes(e1,e2)              = Times(e1,e2)\nlet buildThresh(a,b,a_less,b_less) = Thresh(a,b,a_less,b_less)\nlet buildContour(e1, e2, e3)       = ContourFun(e1, e2, e3)\n\n\nlet pi = 4.0 *. atan 1.0\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet rec eval (e,x,y) = match e with\n  | VarX            \n    -> x\n  | VarY            \n    -> y\n  | Sine e'         \n    -> sin (pi *. eval (e', x, y))\n  | Cosine e' \n    -> cos(pi *. eval(e', x, y))\n  | SinCosSq (e1,e2)\n    -> let (a, b) = (pi *. eval(e1, x, y), pi *. eval(e2, x, y)) in\n        ((sin(a)*.sin(a)) +. (cos(b)*.cos(b))) /. 2.0\n  | Average (e1,e2) \n    -> (eval(e1, x, y) +. eval(e2, x, y)) /. 2.0\n  | Times (e1,e2) \n    -> eval(e1, x, y) *. eval(e2, x, y)\n  | Thresh  (a, b, a_less, b_less) \n    -> (match eval (a, x, y) < eval (b, x, y) with\n         | true -> eval (a_less, x, y)\n         | false -> eval (b_less, x, y)\n       )\n  | ContourFun (e1, e2, e3)\n    -> let (a, b, c) = (eval (e1,x,y), eval(e2,x,y), eval(e3,x,y)) in\n        abs_float(cos(pi*.(a**2. +. b)) *. sin(pi*.(a +. b **2.))) *. c\n\n\nlet _ = eval(buildX(), 1.0, 1.0)\nlet _ = eval(buildSine(buildX()), 1.0, 1.0)\nlet _ = eval(buildSine(buildAverage(buildX(), buildY())), 0.3, 0.3)\n\n\nlet eval_fn e (x,y) = \n  let rv = eval (e,x,y) in\n    assert (-1.0 <= rv && rv <= 1.0);\n    rv\n\n\n\nlet sampleExpr =\n  buildCosine(buildSine(buildTimes(buildCosine(buildAverage(buildCosine(\n                                                              buildX()),buildTimes(buildCosine (buildCosine (buildAverage\n                                                                                                               (buildTimes (buildY(),buildY()),buildCosine (buildX())))),\n                                                                                   buildCosine (buildTimes (buildSine (buildCosine\n                                                                                                                         (buildY())),buildAverage (buildSine (buildX()), buildTimes\n                                                                                                                                                                           (buildX(),buildX()))))))),buildY())))\n\nlet sampleExpr2 =\n  buildThresh(buildX(),buildY(),buildSine(buildX()),buildCosine(buildY()))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec build (rand,depth) = match depth with\n  | 0 -> (match rand(0, 1) with \n           | 0 -> buildX() \n           | 1 -> buildY()\n           | _ -> failwith \"this should have been unreachable :<\"\n         )\n  | _ -> \n      let num = rand(0,150) in \n      let (a,b,c,d) = (build(rand, depth-1), build(rand, depth-1), \n                       build(rand, depth-1), build(rand, depth-1)) in\n        match num with\n          | num when depth <= 3->\n              (match num with\n                | num when num < 63 ->\n                    (match num mod 5 with\n                      | 0 -> buildX()\n                      | 1 -> buildY()\n                      | 2 -> buildSinCosSq(c, a)\n                      | 3 -> buildSine(b)\n                      | 4 -> buildThresh(a, c, d, c)\n                      | _ -> failwith \"should be unreachable :<\"\n                    )\n                | num ->\n                    (match num mod 5 with\n                      | 0 -> buildY()\n                      | 1 -> buildX()\n                      | 2 -> buildCosine(a)\n                      | 3 -> buildAverage(d, b)\n                      | 4 -> buildContour(c, a, d)\n                      | _ -> failwith \"should be unreachable :<\"\n                    )\n              )\n          | num when num < 15 ->\n              (match num mod 2 with\n                | 0 -> buildX()\n                | 1 -> buildY()\n                | _ -> failwith \"should be unreachable :<\"\n              )\n          | num when num < 90 && num > 35 ->\n              (match num mod 2 with\n                | 0 -> buildSinCosSq(a, b)\n                | 1 -> buildContour(c, d, a)\n                | _ -> failwith \"this should have been unreachable :<\"\n              )\n          | num when num < 35 ->\n              (match num mod 6 with\n                | 0 -> buildSine(c)\n                | 1 -> buildCosine(d)\n                | 2 -> buildSinCosSq(a, c)\n                | 3 -> buildContour(b, a, c)\n                | 4 -> buildX()\n                | 5 -> buildY()\n                | _ -> failwith \"should be unreachable :<\"\n              )\n          | num ->\n              (match num mod 7 with \n                | 0 -> buildThresh(d, c, b, a)\n                | 1 -> buildAverage(c, b)\n                | 2 -> buildTimes(a, d)\n                | 3 -> buildSine(d)\n                | 4 -> buildCosine(c)\n                | 5 -> buildSinCosSq(b, a)\n                | 6 -> buildContour(d, c, c)\n                | _ -> failwith \"should be unreachable :<\"\n              )\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet g1 () = (9, 6523124, 34167)\nlet g2 () = (10, 210238, 52111)  \nlet g3 () = (12, 514565, 231148)  \n\nlet c1 () = (9, 132167, 64322)\nlet c2 () = (12, 11111, 41231)\nlet c3 () = (10, 5013731, 873489)\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXX\n\nXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXX*)\n*)\n\nlet makeRand (seed1, seed2) = \n  let seed = (Array.of_list [seed1;seed2]) in\n  let s = Random.State.make seed in\n    (fun (x,y) -> (x + (Random.State.int s (y-x))))\n\nlet rand = makeRand(27, 130)\nlet expr = build(rand, 6)\nlet _ = eval(expr, 0.70, 0.45)\n\n\nlet rec rseq g r n =\n  if n <= 0 then [] else (g r)::(rseq g r (n-1))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\n(*X\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toReal (i,n) = (float_of_int i) /. (float_of_int n)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet toIntensity z = int_of_float (127.5 +. (127.5 *. z))\n\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet rec ffor (low,high,f) = \n  if low > high then () else \n    let _ = f low in \n      ffor (low+1,high,f)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\n\nlet emitGrayscale (f,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_g_\"^name) in\n  let chan = open_out (fname^\".pgm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P5 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z = f (x,y) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz = toIntensity(z) in\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz))) in \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".pgm \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".pgm\"))\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\nlet doRandomGray (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand(seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e = build (g,depth) in\n  let _ = print_string (exprToString e) in\n  let f = eval_fn e in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitGrayscale (f,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXX\n\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet emitColor (f1,f2,f3,n,name) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let fname  = (\"art_c_\"^name) in\n  let chan = open_out (fname^\".ppm\") in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let n2p1 = n*2+1 in   \n  let _ = output_string chan (Format.sprintf \"P6 %d %d 255\\n\" n2p1 n2p1) in\n  let _ = \n    ffor (-n, n, \n          fun ix ->\n            ffor (-n, n, \n                  fun iy ->\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let x = toReal(ix,n) in\n                    let y = toReal(iy,n) in\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let z1 = f1 (x,y) in\n                    let z2 = f2 (x,y) in\n                    let z3 = f3 (x,y) in\n\n                    (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                    let iz1 = toIntensity(z1) in\n                    let iz2 = toIntensity(z2) in\n                    let iz3 = toIntensity(z3) in\n\n                      (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n                      output_char chan (char_of_int iz1);\n                      output_char chan (char_of_int iz2);\n                      output_char chan (char_of_int iz3);\n                 )) in  \n    close_out chan;\n    ignore(Sys.command (\"convert \"^fname^\".ppm  \"^fname^\".jpg\"));\n    ignore(Sys.command (\"rm \"^fname^\".ppm\")) \n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nXXXXXXXXXXXXXXXXXXXXXXXXXX\n*)\nlet doRandomColor (depth,seed1,seed2) =\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let g = makeRand (seed1,seed2) in\n  (*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n  let e1 = build (g, depth) in\n  let e2 = build (g, depth) in\n  let e3 = build (g, depth) in\n\n  let _ = Format.printf \"red   = %s \\n\" (exprToString e1) in\n  let _ = Format.printf \"green = %s \\n\" (exprToString e2) in\n  let _ = Format.printf \"blue  = %s \\n\" (exprToString e3) in\n\n  let f1 = eval_fn e1 in\n  let f2 = eval_fn e2 in\n  let f3 = eval_fn e3 in\n\n  (*XXXXXXXXXXXXXXXXXX*)\n  let n = 150 in\n  (*XXXXXXXXXXXXXXXXXX*)\n  let name = Format.sprintf \"%d_%d_%d\" depth seed1 seed2 in\n    emitColor (f1,f2,f3,n,name)\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\n\ntype test = unit -> string\n\nlet key = \"\" (*XXXXXXXX*)\nlet prefix130 = \"130\" (*XXXXXXXX*)\nlet print130 s = print_string (prefix130^\">>\"^s)\n\nexception ErrorCode of string\n\nexception TestException\n\ntype result = Pass | Fail | ErrorCode of string\n\nlet score = ref 0\nlet max = ref 0\nlet timeout = 300\n\nlet runWTimeout (f,arg,out,time) = \n  try if compare (f arg) out = 0 then Pass else Fail\n  with e -> (print130 (\"Uncaught Exception: \"^(Printexc.to_string e)); ErrorCode \"exception\") \n\nlet testTest () =\n  let testGood x = 1 in\n  let testBad x = 0 in \n  let testException x = raise TestException in\n  let rec testTimeout x = testTimeout x in\n    runWTimeout(testGood,0,1,5) = Pass &&  \n    runWTimeout(testBad,0,1,5) = Fail &&  \n    runWTimeout(testException,0,1,5) = ErrorCode \"exception\" && \n    runWTimeout(testTimeout,0,1,5) = ErrorCode \"timeout\"\n\nlet runTest ((f,arg,out),points,name) =\n  let _   = max := !max + points in\n  let outs = \n    match runWTimeout(f,arg,out,timeout) with \n        Pass -> (score := !score + points; \"[pass]\")\n      | Fail -> \"[fail]\"\n      | ErrorCode e -> \"[error: \"^e^\"]\"  in\n    name^\" \"^outs^\" (\"^(string_of_int points)^\")\\n\"\n\n(*XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX*)\nlet explode s = \n  let rec _exp i = \n    if i >= String.length s then [] else (s.[i])::(_exp (i+1)) in\n    _exp 0\n\nlet implode cs = \n  String.concat \"\" (List.map (String.make 1) cs)\n\nlet drop_paren s = \n  implode (List.filter (fun c -> not (List.mem c ['(';' ';')'])) (explode s))\n\nlet eq_real p (r1,r2) = \n  (r1 -. r2) < p || (r2 -. r1) < p\n\nlet mkTest f x y name = runTest ((f, x, y), 1, name)\n\nlet badTest () = \"WARNING: Your tests are not valid!!\\n\"\n\nlet scoreMsg () = \n  Format.sprintf \"Results: Score/Max = %d / %d \\n\" !score !max \n\nlet sampleTests =\n  [\n    (fun () -> mkTest\n                 assoc\n                 (-1, \"william\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 23\n                 \"sample: assoc 1\"\n    );\n    (fun () -> mkTest \n                 assoc\n                 (-1, \"bob\", [(\"ranjit\",85);(\"william\",23);(\"moose\",44)])\n                 (-1)\n                 \"sample: assoc 2\"\n    ); \n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;6;2;4;12;2;13;6;9]\n                 [1;6;2;4;12;13;9]\n                 \"sample: removeDuplicates 2\"\n    );\n    (fun () -> mkTest \n                 removeDuplicates\n                 [1;1;1]\n                 [1]\n                 \"sample: removeDuplicates 2\"\n    );\n\n    (fun () -> mkTest \n                 wwhile \n                 ((fun x -> let xx = x*x*x in (xx, xx < 100)), 2) \n                 512 \n                 \"sample: wwhile 1\"\n    ); \n    (fun () -> mkTest \n                 fixpoint\n                 ((fun x -> truncate (1e6 *. cos (1e-6 *. float x))), 0)\n                 739085\n                 \"sample: fixpoint 1\"\n    ); \n\n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr, 150,\"sample\")\n                 ()\n                 \"sample: eval_fn 1: manual\"\n    ); \n    (fun () -> mkTest \n                 emitGrayscale\n                 (eval_fn sampleExpr2, 150,\"sample2\")\n                 ()\n                 \"sample: eval_fn 2: manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g1 ()))\n                 ()\n                 ()\n                 \"sample: gray 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g2 ()))\n                 ()\n                 ()\n                 \"sample: gray 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomGray (g3 ()))\n                 ()\n                 ()\n                 \"sample: gray 3 : manual\"\n    );\n\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c1 ()))\n                 ()\n                 ()\n                 \"sample: color 1 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c2 ()))\n                 ()\n                 ()\n                 \"sample: color 2 : manual\"\n    );\n    (fun () -> mkTest \n                 (fun () -> doRandomColor (c3 ()))\n                 ()\n                 ()\n                 \"sample: color 3 : manual\"\n    )] \n\nlet doTest f = \n  try f () with ex -> \n    Format.sprintf \"WARNING: INVALID TEST THROWS EXCEPTION!!: %s \\n\\n\"\n      (Printexc.to_string ex)\n\nlet _ =\n  let report = List.map doTest sampleTests                in\n  let _      = List.iter print130 (report@([scoreMsg()])) in\n  let _      = print130 (\"Compiled\\n\")                    in\n    (!score, !max)\n\n","file":"hw2.ml"}
